<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>并查集&amp;最小生成树部分题解及代码</title>
      <link href="/2023/01/05/%E5%B9%B6%E6%9F%A5%E9%9B%86-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3%E5%8F%8A%E4%BB%A3%E7%A0%81/"/>
      <url>/2023/01/05/%E5%B9%B6%E6%9F%A5%E9%9B%86-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3%E5%8F%8A%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="并查集-amp-最小生成树题解"><a href="#并查集-amp-最小生成树题解" class="headerlink" title="并查集&amp;最小生成树题解"></a>并查集&amp;最小生成树题解</h1><h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><p><strong>解题思路:</strong> 计算几个连通块，并查集一下即可</p><h2 id="B"><a href="#B" class="headerlink" title="B"></a>B</h2><p><strong>解题思路:</strong> 计算这片连通森林还需要几条边变成一个连通块，那么需要数量就是连通块数量减去$1$</p><h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><p><strong>解题思路:</strong> 最小生成树模板题</p><h2 id="D"><a href="#D" class="headerlink" title="D"></a>D</h2><p><strong>解题思路:</strong> $MST$模板题，先加上已经选择的边，再加上没有选择的边即可</p><h2 id="E"><a href="#E" class="headerlink" title="E"></a>E</h2><p><strong>解题思路:</strong> 判断是否只有一个$MST$，那么我们可以先找到一棵$MST$，记录这一棵$MST$的边，然后我们暴力去枚举去掉这条边之后是否还存在一棵和之前权值一样的$MST$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x,y,r;</span><br><span class="line">&#125;a[maxn];</span><br><span class="line"><span class="type">int</span> flag[maxn],n,m;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DSU</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> f[maxn],num;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getf</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x == f[x] ? x : f[x] = <span class="built_in">getf</span>(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> fx = <span class="built_in">getf</span>(x);</span><br><span class="line"><span class="type">int</span> fy = <span class="built_in">getf</span>(y);</span><br><span class="line">f[fx] = fy;</span><br><span class="line"><span class="keyword">if</span>(fx != fy)</span><br><span class="line">&#123;</span><br><span class="line">num++;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i) f[i] = i;</span><br><span class="line">num = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;dsu;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">kruskal</span></span><br><span class="line">&#123;</span><br><span class="line">DSU now;</span><br><span class="line"><span class="type">int</span> nowres;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">now.<span class="built_in">init</span>();</span><br><span class="line">nowres = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;kru;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cmp</span><span class="params">(node A,node B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> A.r &lt; B.r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line">cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">dsu.<span class="built_in">init</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= m;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; a[i].x &gt;&gt; a[i].y &gt;&gt; a[i].r;</span><br><span class="line">flag[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a + <span class="number">1</span>,a + <span class="number">1</span> + m,cmp);</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dsu.<span class="built_in">merge</span>(a[i].x,a[i].y))</span><br><span class="line">&#123;</span><br><span class="line">ans += a[i].r;</span><br><span class="line">flag[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!flag[i]) <span class="keyword">continue</span>;</span><br><span class="line">kru.<span class="built_in">init</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= m;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j == i) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(kru.now.<span class="built_in">merge</span>(a[j].x,a[j].y))</span><br><span class="line">&#123;</span><br><span class="line">kru.nowres += a[j].r;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(kru.nowres == ans &amp;&amp; kru.now.num == n - <span class="number">1</span>) f = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(f) cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;Not Unique!\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="F"><a href="#F" class="headerlink" title="F"></a>F</h2><p><strong>解题思路:</strong> 首先先把免费的边连接起来，然后对$n$个点建立点对，排序之后求最小生成树，直接用$Kruskal$记录边即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">chkmin</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">chkmax</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> p[maxn][<span class="number">2</span>],tot,n,m;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="type">double</span> r;</span><br><span class="line"><span class="built_in">node</span>()&#123;&#125;;</span><br><span class="line"><span class="built_in">node</span>(<span class="type">int</span> _x,<span class="type">int</span> _y,<span class="type">double</span> _r): <span class="built_in">x</span>(_x),<span class="built_in">y</span>(_y),<span class="built_in">r</span>(_r)&#123;&#125;</span><br><span class="line">&#125;a[maxn];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DSU</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> f[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getf</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x == f[x] ? x : f[x] = <span class="built_in">getf</span>(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> op)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> fx = <span class="built_in">getf</span>(x);</span><br><span class="line"><span class="type">int</span> fy = <span class="built_in">getf</span>(y);</span><br><span class="line"><span class="keyword">if</span>(fx != fy)</span><br><span class="line">&#123;</span><br><span class="line">f[fx] = fy;</span><br><span class="line"><span class="keyword">if</span>(op) cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; y &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i) f[i] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;dsu;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pow2</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">cal</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sqrt</span>(<span class="number">1.0</span> * <span class="built_in">pow2</span>(p[i][<span class="number">0</span>] - p[j][<span class="number">0</span>]) + <span class="number">1.0</span> * <span class="built_in">pow2</span>(p[i][<span class="number">1</span>] - p[j][<span class="number">1</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cmp</span><span class="params">(node A,node B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> A.r &lt; B.r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; p[i][<span class="number">0</span>] &gt;&gt; p[i][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">cin &gt;&gt; m;</span><br><span class="line">dsu.<span class="built_in">init</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>,u,v;i &lt;= m;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">dsu.<span class="built_in">merge</span>(u,v,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>;j &lt;= n;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">double</span> dis = <span class="built_in">cal</span>(i,j);</span><br><span class="line">a[++tot] = <span class="built_in">node</span>(i,j,dis);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a + <span class="number">1</span>,a + <span class="number">1</span> + tot,cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= tot;++i)</span><br><span class="line">&#123;</span><br><span class="line">dsu.<span class="built_in">merge</span>(a[i].x,a[i].y,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G"><a href="#G" class="headerlink" title="G"></a>G</h2><p><strong>解题思路:</strong> 和上课讲的基本类似，同时需要注意的是这里存在位置固定的问题，如果位置固定的话那么对于他所存在的连通块只会带来$1$的贡献</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">5e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> a[maxn],b[maxn],c[maxn],n;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DSU</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> f[maxn],sz[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getf</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x == f[x] ? x : f[x] = <span class="built_in">getf</span>(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> fx = <span class="built_in">getf</span>(x);</span><br><span class="line"><span class="type">int</span> fy = <span class="built_in">getf</span>(y);</span><br><span class="line"><span class="keyword">if</span>(fx != fy)</span><br><span class="line">&#123;</span><br><span class="line">f[fy] = fx;</span><br><span class="line">sz[fx] += sz[fy];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i) f[i] = i,sz[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;dsu;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line">cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i) cin &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i) cin &gt;&gt; b[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i) cin &gt;&gt; c[i];</span><br><span class="line">dsu.<span class="built_in">init</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line">dsu.<span class="built_in">merge</span>(a[i],b[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(c[i])</span><br><span class="line">&#123;</span><br><span class="line">dsu.sz[dsu.<span class="built_in">getf</span>(c[i])] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dsu.f[i] == i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dsu.sz[i] &gt;= <span class="number">2</span>) ans = ans * <span class="number">2</span> % mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="H"><a href="#H" class="headerlink" title="H"></a>H</h2><p><strong>解题思路:</strong> 种族并查集，首先我们先思考如何解决多个种族之间的事情，首先我们先考虑$A$这个位置，因为它可以吃$B$,但是被$C$吃，因此在这里的关系存在的是三种：自己(同族)，食物，敌人。所以我们再开空间的时候可以开$3$倍的空间。</p><p>然后我们考虑这样一件事情，假设$a$可以吃$b,c$，那么$b,c$实际上是同族；同理如果$b,c$可以吃$a$，那么$b,c$也是同族。那么也就是说 <strong>敌人的敌人是朋友</strong></p><p>那么接下来考虑什么时候不合法，首先是在$x$和$y$合并的时候，如果$x$是$y$的敌人或者$y$是$x$的敌人就不行</p><p>然后考虑$x$可以吃$y$的情况下，首先是题目告诉如果相同就不行，然后是如果$x$是$y$的同族或者$y$可以吃$x$不行</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="comment">// const int inf = 1e18;</span></span><br><span class="line"><span class="type">int</span> f[maxn * <span class="number">3</span>],n,m,ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getf</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x == f[x] ? x : f[x] = <span class="built_in">getf</span>(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> fx = <span class="built_in">getf</span>(x);</span><br><span class="line"><span class="type">int</span> fy = <span class="built_in">getf</span>(y);</span><br><span class="line">f[fx] = fy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line"><span class="comment">// cin &gt;&gt; n &gt;&gt; m;</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">3</span> * n;++i) f[i] = i;</span><br><span class="line"><span class="comment">//A -&gt; B -&gt; C -&gt; A</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>,op,x,y;i &lt;= m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;op,&amp;x,&amp;y);</span><br><span class="line"><span class="keyword">if</span>(x &gt; n || y &gt; n)</span><br><span class="line">&#123;</span><br><span class="line">ans++;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">getf</span>(x) == <span class="built_in">getf</span>(y + <span class="number">2</span> * n) || <span class="built_in">getf</span>(x + <span class="number">2</span> * n) == <span class="built_in">getf</span>(y))</span><br><span class="line">&#123;</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">merge</span>(x,y);</span><br><span class="line"><span class="built_in">merge</span>(x + n,y + n);</span><br><span class="line"><span class="built_in">merge</span>(x + <span class="number">2</span> * n,y + <span class="number">2</span> * n);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(x == y)</span><br><span class="line">&#123;</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">getf</span>(x) == <span class="built_in">getf</span>(y) || <span class="built_in">getf</span>(x + <span class="number">2</span> * n) == <span class="built_in">getf</span>(y))</span><br><span class="line">&#123;</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">merge</span>(x,y + <span class="number">2</span> * n);</span><br><span class="line"><span class="built_in">merge</span>(x + n,y);</span><br><span class="line"><span class="built_in">merge</span>(x + <span class="number">2</span> * n,y + n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="I"><a href="#I" class="headerlink" title="I"></a>I</h2><p><strong>解题思路:</strong> 求一个连通块最大是多少，但是由于标号很大所以我们先需要离散化再进行并查集查找即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> ans,n;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DSU</span></span><br><span class="line">&#123;</span><br><span class="line">unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; f;</span><br><span class="line">unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; sz;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getf</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x == f[x] ? x : f[x] = <span class="built_in">getf</span>(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> fx = <span class="built_in">getf</span>(x);</span><br><span class="line"><span class="type">int</span> fy = <span class="built_in">getf</span>(y);</span><br><span class="line"><span class="keyword">if</span>(fx != fy)</span><br><span class="line">&#123;</span><br><span class="line">f[fx] = fy;</span><br><span class="line">sz[fy] += sz[fx];</span><br><span class="line">ans = <span class="built_in">max</span>(ans,sz[fy]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">f.<span class="built_in">clear</span>();</span><br><span class="line">sz.<span class="built_in">clear</span>();</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;dsu;</span><br><span class="line">array&lt;<span class="type">int</span>,2&gt; p[maxn];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line">cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">dsu.<span class="built_in">init</span>();</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>,u,v;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">p[i] = &#123;u,v&#125;;</span><br><span class="line">dsu.f[u] = u,dsu.sz[u] = <span class="number">1</span>;</span><br><span class="line">dsu.f[v] = v,dsu.sz[v] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> [u,v] = p[i];</span><br><span class="line">dsu.<span class="built_in">merge</span>(u,v);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="J"><a href="#J" class="headerlink" title="J"></a>J</h2><p><strong>题目大意:</strong> 有三个长度为$n$的序列$a,b,c$</p><p>$Alice$和$Bob$玩游戏，一共进行$n$个回合，游戏规则如下：</p><ul><li>选定$a_i,b_i,c_i$</li><li>$Alice$从这三个数字选择一个数字删掉</li><li>$Bob$从这三个数字选择一个数字</li></ul><p>我们让$Bob$每回合选择的数字是$d_i$,如果序列$d$是一个排列那么$Alice$获胜否则$Bob$获胜</p><p>现在给定$a,b$两个数组，问有多少个$c$数组可以使得$Bob$获胜，结果对$998244353$取模</p><p><strong>解题思路:</strong> 首先我们先考虑$Alice$会选择什么数字删掉，假设对于第$i$次操作来说，$a_i &#x3D; b_i$,那么我们可以选择任意的$c_i$并且最终把$c_i$删掉，这样子$Bob$一定取到的是$a_i$这个数字表示的值(因为$a_i &#x3D; b_i$)</p><p>然后我们考虑如果$a_i \neq b_i$那么我们选择的$c_i$就非常重要，因为$c_i$决定着我们可以选择$a_i$或者$b_i$中的哪个数字，只需要让$c_i &#x3D; a_i \ or \ c_i &#x3D; b_i$即可</p><p>那么选择某一个位置的思路就很清晰了，我们只需要考虑构造大于等于两个相同的并且把其中一个不需要的值删掉即可</p><p>接下来我们再考虑位置之间带来的因素</p><p>假设我们没有$a_i &#x3D; b_i$的情况，那么我们现在的问题可以转换为给定两个序列分别是$a,b$，每个位置上面取一个看是否可以构成一个排序</p><p>对于这一个问题来说，因为每一个位置做一个选择，同时也相同与每一个位置的两个数字相互制衡，那么我们可以用图论的语言来表达，在他们之间建一条边</p><p>我们可以发现只有基环树的形式是可以的，而基环树的形式实际上就是点数等于边数</p><p>那么我们最终只需要使用并查集取维护每个环中存在点数和边数即可</p><p>那么最后再思考答案贡献，对于一个基环树来说，如果这个树里面没有自环，那么贡献就是$2$，因为考虑每条边有两个选择，如果里面有自环的话，贡献就是$n$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">chkmin</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">chkmax</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">int</span> n,m,a[maxn],b[maxn];</span><br><span class="line"><span class="type">int</span> f[maxn],szv[maxn],sze[maxn],loop[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line">f[i] = i;</span><br><span class="line">szv[i] = <span class="number">1</span>;</span><br><span class="line">sze[i] = <span class="number">0</span>;</span><br><span class="line">loop[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getf</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x == f[x] ? x : f[x] = <span class="built_in">getf</span>(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> fx = <span class="built_in">getf</span>(x);</span><br><span class="line"><span class="type">int</span> fy = <span class="built_in">getf</span>(y);</span><br><span class="line"><span class="keyword">if</span>(fx != fy)</span><br><span class="line">&#123;</span><br><span class="line">f[fy] = fx;</span><br><span class="line">sze[fx] += sze[fy];</span><br><span class="line">szv[fx] += szv[fy];</span><br><span class="line">loop[fx] += loop[fy];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line">cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i) cin &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i) cin &gt;&gt; b[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">merge</span>(a[i],b[i]);</span><br><span class="line">sze[<span class="built_in">getf</span>(a[i])]++;</span><br><span class="line"><span class="keyword">if</span>(a[i] == b[i]) loop[<span class="built_in">getf</span>(a[i])]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i == <span class="built_in">getf</span>(i))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(sze[i] != szv[i]) ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">else</span> ans = ans * <span class="number">2</span> % mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> dsu </tag>
            
            <tag> mst </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pythonbasic</title>
      <link href="/2023/01/03/pythonbasic/"/>
      <url>/2023/01/03/pythonbasic/</url>
      
        <content type="html"><![CDATA[<h1 id="Python基础语法和基本数据"><a href="#Python基础语法和基本数据" class="headerlink" title="Python基础语法和基本数据"></a>Python基础语法和基本数据</h1><h2 id="标识符号"><a href="#标识符号" class="headerlink" title="标识符号"></a>标识符号</h2><ul><li>第一个字符必须是字母表中字母或下划线 <strong>_</strong> 。</li><li>标识符的其他的部分由字母、数字和下划线组成。</li><li>标识符对大小写敏感。</li></ul><h2 id="Python保留字"><a href="#Python保留字" class="headerlink" title="Python保留字"></a>Python保留字</h2><p>保留字即关键字，我们不能把它们用作任何标识符名称。$Python$ 的标准库提供了一个 $keyword$ 模块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> keyword</span><br><span class="line"><span class="built_in">print</span>(keyword.kwlist)</span><br></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>$python$中单行注释以 <strong>#</strong> 开头</p><p>多行注释可以用多个 <strong>#</strong> 号，还有 <strong>‘’’</strong> 和 **”””**：</p><h2 id="Python多行语句"><a href="#Python多行语句" class="headerlink" title="Python多行语句"></a>Python多行语句</h2><p>$Python$ 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠 *<em>*</em> 来实现多行语句，例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">total = item_one + \</span><br><span class="line">        item_two + \</span><br><span class="line">        item_three</span><br></pre></td></tr></table></figure><h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><p>用 <code>**</code> 运算符来计算乘方</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">5</span> ** <span class="number">2</span>)</span><br><span class="line"><span class="comment">#25</span></span><br></pre></td></tr></table></figure><p>在交互模式下，可以用变量 <code>_</code> 表示上一次的值</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ul><li><p>$Python$中单引号 <strong>‘</strong> 和双引号 <strong>“</strong> 使用完全相同。</p></li><li><p>使用三引号(<strong>‘’’</strong> 或 <strong>“””</strong>)可以指定一个多行字符串。</p></li><li><p>按字面意义级联字符串，如 <strong>“this “ “is “ “string”</strong> 会被自动转换为 <strong>this is string</strong>。</p></li><li><p>字符串可以用 <strong>+</strong> 运算符连接在一起，用 ***** 运算符重复。</p></li><li><p>$Python$ 中的字符串有两种索引方式，从左往右以 <strong>0</strong> 开始，从右往左以 <strong>-1</strong> 开始。</p></li><li><p>$Python$ 中的字符串不能改变。</p></li><li><p>$Python$ 没有单独的字符类型，一个字符就是长度为 1 的字符串。</p></li><li><p>字符串的截取的语法格式如下：<strong>变量[头下标:尾下标:步长]</strong></p></li></ul><h3 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h3><p>$Python$中单引号 <code>&#39;</code> 和双引号 <code>&quot;</code>使用完全相同。</p><p>反斜杠 <code>\</code> 可以用来转义，或者如果我们想要使用单引号我们外面可以加一个双引号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;this is test1&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;this is \&#x27; test2&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;this is test &#x27;3 &quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this is test1</span><br><span class="line">this is &#x27; test2</span><br><span class="line">this is test &#x27;3</span><br></pre></td></tr></table></figure><p>注意如果我们不需要使用到转义的话我们可以在字符串前面加一个<code>r</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\hahah\tese&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">r&#x27;\hahah\tese&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\hahahese</span><br><span class="line">\hahah\tese</span><br></pre></td></tr></table></figure><h3 id="跨行连续输入"><a href="#跨行连续输入" class="headerlink" title="跨行连续输入"></a>跨行连续输入</h3><p>使用三引号<code>&quot;&quot;&quot;</code> 或 <code>&#39;&#39;&#39;</code>可以指定一个多行字符串。</p><h3 id="连接字符串"><a href="#连接字符串" class="headerlink" title="连接字符串"></a>连接字符串</h3><p>字符串可以用 <strong>+</strong> 运算符连接在一起，用 ***** 运算符重复</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">3</span> * <span class="string">&#x27;ha&#x27;</span> + <span class="string">&#x27;uhuh&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hahahauhuh</span><br></pre></td></tr></table></figure><p>或者说可以按照字面意思连接字符串，比如相邻多个字符串会自动连接到一起</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;114514&#x27;</span><span class="string">&#x27;1919810&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1145141919810</span><br></pre></td></tr></table></figure><p>因此我们在输出较长字符串的时候我们可以使用按照字面意思连接的方法来输出</p><h3 id="字符串只读"><a href="#字符串只读" class="headerlink" title="字符串只读"></a>字符串只读</h3><p>$python$中的字符串不能被修改，如果我们需要强行修改的话会错掉</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test = <span class="string">&quot;testword&quot;</span></span><br><span class="line">test[<span class="number">3</span>] = <span class="string">&#x27;i&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;e:\Sublime Text\code\codeforces\traing\test.py&quot;, line 2, in &lt;module&gt;</span><br><span class="line">    test[3] = &#x27;i&#x27;</span><br><span class="line">TypeError: &#x27;str&#x27; object does not support item assignment</span><br></pre></td></tr></table></figure><p>如果需要一个新的字符串我们只能通过新建的方式来，同时我们可以使用$len$来获取字符串的长度</p><h3 id="字符串属性"><a href="#字符串属性" class="headerlink" title="字符串属性"></a>字符串属性</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">文本序列类型 --- str</span><br><span class="line">     字符串是一种 *序列类型* ，因此也支持序列类型的各种操作。</span><br><span class="line"></span><br><span class="line">  字符串的方法</span><br><span class="line">     字符串支持许多变换和查找的方法。</span><br><span class="line"></span><br><span class="line">  格式化字符串字面值</span><br><span class="line">     内嵌表达式的字符串字面值。</span><br><span class="line"></span><br><span class="line">  格式字符串语法</span><br><span class="line">     使用 &quot;str.format()&quot; 进行字符串格式化。</span><br><span class="line"></span><br><span class="line">  printf 风格的字符串格式化</span><br><span class="line">     这里详述了使用 &quot;%&quot; 运算符进行字符串格式化。</span><br></pre></td></tr></table></figure><h2 id="字符串索引"><a href="#字符串索引" class="headerlink" title="字符串索引"></a>字符串索引</h2><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>字符串是可以被索引 (下标) 访问的，字符串的第一个字母的索引是 $0$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test = <span class="string">&quot;testword&quot;</span></span><br><span class="line"><span class="built_in">print</span>(test[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(test[<span class="number">2</span>])</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t</span><br><span class="line">s</span><br></pre></td></tr></table></figure><h3 id="负索引"><a href="#负索引" class="headerlink" title="负索引"></a>负索引</h3><p>索引使用负数的话说明是从右边往左边开始数，因为我们考虑到0的负数还是本身所以我们从 $-1$开始数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test = <span class="string">&quot;testword&quot;</span></span><br><span class="line"><span class="built_in">print</span>(test[-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(test[-<span class="number">3</span>])</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d</span><br><span class="line">o</span><br></pre></td></tr></table></figure><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><p>索引可以获得单个字符，切片可以获得一个字符串的字串，切片的形式是$[l:r]$，对于切片来说$l$是被包含在输出的字符串当中但是$r$不会</p><p>切片的索引有默认值；省略开始索引时默认为0，省略结束索引时默认为到字符 串的结束:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">test = <span class="string">&quot;testword&quot;</span></span><br><span class="line"><span class="built_in">print</span>(test[<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(test[<span class="number">2</span>:<span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(test[:<span class="number">2</span>] + test[<span class="number">2</span>:])</span><br><span class="line"><span class="built_in">print</span>(test[:<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(test[-<span class="number">3</span>:])</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">te</span><br><span class="line">stw</span><br><span class="line">testword</span><br><span class="line">tes</span><br><span class="line">ord</span><br></pre></td></tr></table></figure><p>我们可以发现一个性质就是对于一个字符串来说$s[:i] + s[i:] &#x3D; s$</p><h3 id="索引越界"><a href="#索引越界" class="headerlink" title="索引越界"></a>索引越界</h3><p>在我们使用过大的索引的时候会出现以下的错误:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test = <span class="string">&quot;testword&quot;</span></span><br><span class="line"><span class="built_in">print</span>(test[<span class="number">114514</span>])</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;e:\Sublime Text\code\codeforces\traing\test.py&quot;, line 2, in &lt;module&gt;</span><br><span class="line">    print(test[114514])</span><br><span class="line">IndexError: string index out of range</span><br></pre></td></tr></table></figure><p>但是对于切片中的越界索引他会自动去取到相对应的边界</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test = <span class="string">&quot;testword&quot;</span></span><br><span class="line"><span class="built_in">print</span>(test[<span class="number">2</span>:<span class="number">114514</span>])</span><br><span class="line"><span class="built_in">print</span>(test[<span class="number">114514</span>:])</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stword</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h3><p>列表是写在<code>[]</code>之间用有道分隔开的元素列表，和字符串一样列表也可以被索引和截取，列表被截取后返回一个包含所需元素的新列表，注意列表中的元素类型可以不相同</p><p>我们可以通过和字符串类似的写法$[a:b:c]$来表示从坐标$a$开始到坐标$b - 1$每次相间隔$c$去一个列表中的元素，特别需要注意的是，当$c &lt; 0$的时候，截取字符是从后往前的，那么我们可以采用如下的写法来进行对一个列表逆序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">reverseWords</span>(<span class="params"><span class="built_in">input</span></span>):</span><br><span class="line">     </span><br><span class="line">    <span class="comment"># 通过空格将字符串分隔符，把各个单词分隔为列表</span></span><br><span class="line">    inputWords = <span class="built_in">input</span>.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 翻转字符串</span></span><br><span class="line">    <span class="comment"># 假设列表 list = [1,2,3,4],  </span></span><br><span class="line">    <span class="comment"># list[0]=1, list[1]=2 ，而 -1 表示最后一个元素 list[-1]=4 ( 与 list[3]=4 一样)</span></span><br><span class="line">    <span class="comment"># inputWords[-1::-1] 有三个参数</span></span><br><span class="line">    <span class="comment"># 第一个参数 -1 表示最后一个元素</span></span><br><span class="line">    <span class="comment"># 第二个参数为空，表示移动到列表末尾</span></span><br><span class="line">    <span class="comment"># 第三个参数为步长，-1 表示逆向</span></span><br><span class="line">    inputWords=inputWords[-<span class="number">1</span>::-<span class="number">1</span>]</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 重新组合字符串</span></span><br><span class="line">    output = <span class="string">&#x27; &#x27;</span>.join(inputWords)</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">input</span> = <span class="string">&#x27;I like runoob&#x27;</span></span><br><span class="line">    rw = reverseWords(<span class="built_in">input</span>)</span><br><span class="line">    <span class="built_in">print</span>(rw)</span><br></pre></td></tr></table></figure><p>列表还可以通过$append$来添加元素</p><h2 id="多个语句构成代码组"><a href="#多个语句构成代码组" class="headerlink" title="多个语句构成代码组"></a>多个语句构成代码组</h2><p>缩进相同的一组语句构成一个代码块，我们称之代码组。</p><p>像$ if $、$ while $ 、$ def $ 和$ class$ 这样的复合语句，首行以关键字开始，以冒号( : )结束，该行之后的一行或多行代码构成代码组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> expression : </span><br><span class="line">   suite</span><br><span class="line"><span class="keyword">elif</span> expression : </span><br><span class="line">   suite </span><br><span class="line"><span class="keyword">else</span> : </span><br><span class="line">   suite</span><br></pre></td></tr></table></figure><h3 id="Tuple（元组）"><a href="#Tuple（元组）" class="headerlink" title="Tuple（元组）"></a>Tuple（元组）</h3><p>元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号 <strong>()</strong> 里，元素之间用逗号隔开。</p><p>元组中的类型也可以不相同</p><h3 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h3><p>集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员。</p><p>基本功能是进行成员关系测试和删除重复元素。</p><p>可以使用大括号 ${ }$ 或者 $set()$ 函数创建集合，注意：创建一个空集合必须用 $set()$ 而不是 ${ }$，因为 ${ }$ 是用来创建一个空字典。</p><p>创建格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">st = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">a = <span class="built_in">set</span>(<span class="string">&quot;1234567&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a:&quot;</span>,a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;st:&quot;</span>,st)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a: &#123;<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;7&#x27;</span>&#125;</span><br><span class="line">st: &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当然，对于一个已有元素的$set$,如果我们需要往这个里面添加元素的话，我们可以使用$add$函数来进行添加</p><p>注意这里的集合是一个 <strong>没有顺序</strong> 的集合</p><p>对于集合来说我们通常还需要判断一个集合和另外一个集合之间的关系，那么实际上 $python$也为我们提供了这些方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(a - b)     <span class="meta"># a 和 b 的差集</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a | b)     <span class="meta"># a 和 b 的并集</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a &amp; b)     <span class="meta"># a 和 b 的交集</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a ^ b)     <span class="meta"># a 和 b 中不同时存在的元素，即只在一个集合中出现</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">set</span>(<span class="string">&quot;145296&quot;</span>)</span><br><span class="line">b = <span class="built_in">set</span>(<span class="string">&quot;256789&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(a - b)</span><br><span class="line"><span class="built_in">print</span>(a | b)</span><br><span class="line"><span class="built_in">print</span>(a &amp; b)</span><br><span class="line"><span class="built_in">print</span>(a ^ b)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;4&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;6&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;7&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="Dictionary（字典）"><a href="#Dictionary（字典）" class="headerlink" title="Dictionary（字典）"></a>Dictionary（字典）</h3><p>字典是一种映射类型，字典用 ${ }$标识，它是一个无序的 键$(key)$ : 值$(value)$ 的集合。</p><p>键$(key)$必须使用不可变类型。</p><p>在同一个字典中，键$(key)$必须是唯一的。</p><p>注意对于字典的构造函数$dict()$也可以直接从键值对序列中构建字典如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dict</span>([(<span class="string">&#x27;Runoob&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;Google&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;Taobao&#x27;</span>, <span class="number">3</span>)])</span><br><span class="line">&#123;<span class="string">&#x27;Runoob&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;Google&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;Taobao&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;x: x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> (<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>)&#125;</span><br><span class="line">&#123;<span class="number">2</span>: <span class="number">4</span>, <span class="number">4</span>: <span class="number">16</span>, <span class="number">6</span>: <span class="number">36</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dict</span>(Runoob=<span class="number">1</span>, Google=<span class="number">2</span>, Taobao=<span class="number">3</span>)</span><br><span class="line">&#123;<span class="string">&#x27;Runoob&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;Google&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;Taobao&#x27;</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><h3 id="读取键盘输入"><a href="#读取键盘输入" class="headerlink" title="读取键盘输入"></a>读取键盘输入</h3><p>$python$提供$input()$函数从标准输入中读入一行 <strong>文本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>)</span><br></pre></td></tr></table></figure><h3 id="读取一行中的多个数字"><a href="#读取一行中的多个数字" class="headerlink" title="读取一行中的多个数字"></a>读取一行中的多个数字</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取一行中的两个整数</span></span><br><span class="line">a, b = <span class="built_in">map</span>(<span class="built_in">float</span>, <span class="built_in">input</span>().split())</span><br><span class="line"><span class="built_in">print</span>(a,b)</span><br></pre></td></tr></table></figure><h3 id="读取一行中的数字，两个数字类型不一样"><a href="#读取一行中的数字，两个数字类型不一样" class="headerlink" title="读取一行中的数字，两个数字类型不一样"></a>读取一行中的数字，两个数字类型不一样</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取一行中的两个数字</span></span><br><span class="line">a, b = <span class="built_in">input</span>().split()</span><br><span class="line">a = <span class="built_in">int</span>(a)</span><br><span class="line">b = <span class="built_in">float</span>(b)</span><br><span class="line"><span class="built_in">print</span>(a,b)</span><br></pre></td></tr></table></figure><h3 id="读取一个文件直到末尾"><a href="#读取一个文件直到末尾" class="headerlink" title="读取一个文件直到末尾"></a>读取一个文件直到末尾</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># 读取文件的每一行</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        <span class="comment"># 在这里处理每一行的数据</span></span><br><span class="line">        <span class="built_in">print</span>(line)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Python循环语句"><a href="#Python循环语句" class="headerlink" title="Python循环语句"></a>Python循环语句</h2><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>$python$中并不存在$do…while$的语法，因此我们可以直接用$while$来写。</p><p>除此之外$python$还存在在一个$while$后面跟着$else$</p><p>一般来说是如果我当前的$while$不执行的话那么我就会直接走后面的$else$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">10</span></span><br><span class="line">now = <span class="number">0</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> now &lt;= n:</span><br><span class="line">    <span class="built_in">sum</span> += now</span><br><span class="line">    now += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sum??&quot;</span>,<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure><p>比如上面的程序就是先去计算$1…10$的和然后跳出循环之后直接输出这个和是多少</p><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>我们需要注意的是，对于$python$来说，$for$循环可以遍历任何可以迭代的对象，比如一个列表或者一个字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Good number&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;now number is&quot;</span>,i)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;no good number&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;finish&quot;</span>)</span><br></pre></td></tr></table></figure><p>对于上述程序我们跑出来的结果是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">now number is 1</span><br><span class="line">now number is 2</span><br><span class="line">Good number</span><br><span class="line">finish</span><br></pre></td></tr></table></figure><p>更改成以下内容跑出来的数据相对应的是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Good number&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;now number is&quot;</span>,i)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;no good number&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;finish&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">now number is 1</span><br><span class="line">now number is 2</span><br><span class="line">now number is 7</span><br><span class="line">now number is 4</span><br><span class="line">now number is 5</span><br><span class="line">no good number</span><br><span class="line">finish</span><br></pre></td></tr></table></figure><h4 id="range函数"><a href="#range函数" class="headerlink" title="range函数"></a>range函数</h4><p>遍历数字序列的时候我们可以使用内置的$range$函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(i,end = <span class="string">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 1 2 3 4</span><br></pre></td></tr></table></figure><p>如何指定区间的话，假设$range(l,r)$，那么我们获得的数字就是从$l$然后一直到$r - 1$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(i,end = <span class="string">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5 6 7 8 9</span><br></pre></td></tr></table></figure><p>当然$range$还具有第三个参数步长，可以通过给这个步长一些指定的参数来进行循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">10</span>,<span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="built_in">sum</span> += i</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure><p>比如上述程序就会从$0 - 8$逐个相加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">10</span>,<span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="built_in">sum</span> += i</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure><p>同时我们也可以通过$range$和$len$函数去遍历一个序列的索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">55</span>,<span class="number">666</span>,<span class="number">7777</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    <span class="built_in">print</span>(i,a[i])</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0 1</span><br><span class="line">1 2</span><br><span class="line">2 3</span><br><span class="line">3 4</span><br><span class="line">4 55</span><br><span class="line">5 666</span><br><span class="line">6 7777</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>goodbye2022</title>
      <link href="/2023/01/03/goodbye2022/"/>
      <url>/2023/01/03/goodbye2022/</url>
      
        <content type="html"><![CDATA[<h1 id="Good-Bye-2022"><a href="#Good-Bye-2022" class="headerlink" title="Good Bye 2022"></a>Good Bye 2022</h1><h2 id="A-Koxia-and-Whiteboards"><a href="#A-Koxia-and-Whiteboards" class="headerlink" title="A.Koxia and Whiteboards"></a>A.Koxia and Whiteboards</h2><p>**题目大意: ** 给定一个长度为$n$的序列，接下来进行$m$次操作，问操作之后序列值最大是多少</p><p><strong>解题思路:</strong> 数量级很小考虑暴力即可，每次把$a$序列中最小的元素换下来</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">chkmin</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">chkmax</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n,m,a[maxn],b[maxn];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line">cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">multiset&lt;<span class="type">int</span>&gt; st;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i) cin &gt;&gt; a[i],st.<span class="built_in">insert</span>(a[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= m;++i) cin &gt;&gt; b[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= m;++i)</span><br><span class="line">&#123;</span><br><span class="line">st.<span class="built_in">erase</span>(st.<span class="built_in">begin</span>());</span><br><span class="line">st.<span class="built_in">insert</span>(b[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> to:st) sum += to;</span><br><span class="line">cout &lt;&lt; sum &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Koxia-and-Permutation"><a href="#B-Koxia-and-Permutation" class="headerlink" title="B. Koxia and Permutation"></a>B. Koxia and Permutation</h2><p><strong>题目大意:</strong> 构造一个长度为$n$的序列，进行$n - k + 1$次划分，第$i$次划分获得的是从$i$开始$k$个数字的最大值和最小值相加，一个排列$p$的代价是划分中的值的最大值，问这个最大值最小的序列是什么样的</p><p><strong>解题思路:</strong> 因为最后要让我们的最大值最小，考虑值的构成是一个区域内的最大值加上最小值，如果一段区域里面都是连续的大数是肯定不行的，因此我们可以从$1-n$的数字头尾顺序取即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">chkmin</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">chkmax</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n,m,a[maxn],b[maxn];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line">cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>,j = n;i &lt; j;++i,--j)</span><br><span class="line">&#123;</span><br><span class="line">ans.<span class="built_in">push_back</span>(j);</span><br><span class="line">ans.<span class="built_in">push_back</span>(i);</span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;??? &quot; &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; j &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n &amp; <span class="number">1</span>) ans.<span class="built_in">push_back</span>((n + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> to:ans)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; to &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Koxia-and-Number-Theory"><a href="#C-Koxia-and-Number-Theory" class="headerlink" title="C. Koxia and Number Theory"></a>C. Koxia and Number Theory</h2><p><strong>题目大意:</strong> 给定一个长度为$n$的序列,问是否存在一个$x$使得每一对$gcd(a_i+ x ,a_j + x) &#x3D; 1$</p><p><strong>解题思路:</strong> 不懂数学，感觉可以看严格鸽的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">chkmin</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">chkmax</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n,m,a[maxn],b[maxn];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line">cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">set&lt;<span class="type">int</span>&gt; st;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i) cin &gt;&gt; a[i],st.<span class="built_in">insert</span>(a[i]);</span><br><span class="line"><span class="keyword">if</span>(st.<span class="built_in">size</span>() != n)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;No\n&quot;</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> p = <span class="number">2</span>;p &lt;= n;++p)</span><br><span class="line">&#123;</span><br><span class="line">map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mp;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i) mp[a[i] % p]++;</span><br><span class="line"><span class="type">int</span> mi = n + n;</span><br><span class="line"><span class="type">int</span> ha = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> to:mp)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(to.second &gt;= <span class="number">2</span>) ha++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ha &gt;= p) f = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(f) cout &lt;&lt; <span class="string">&quot;Yes\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;No\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Koxia-and-Game"><a href="#D-Koxia-and-Game" class="headerlink" title="D. Koxia and Game"></a>D. Koxia and Game</h2><p><strong>题目大意:</strong> 有三个长度为$n$的序列$a,b,c$</p><p>$Alice$和$Bob$玩游戏，一共进行$n$个回合，游戏规则如下：</p><ul><li>选定$a_i,b_i,c_i$</li><li>$Alice$从这三个数字选择一个数字删掉</li><li>$Bob$从这三个数字选择一个数字</li></ul><p>我们让$Bob$每回合选择的数字是$d_i$,如果序列$d$是一个排列那么$Alice$获胜否则$Bob$获胜</p><p>现在给定$a,b$两个数组，问有多少个$c$数组可以使得$Bob$获胜，结果对$998244353$取模</p><p><strong>解题思路:</strong> 首先我们先考虑$Alice$会选择什么数字删掉，假设对于第$i$次操作来说，$a_i &#x3D; b_i$,那么我们可以选择任意的$c_i$并且最终把$c_i$删掉，这样子$Bob$一定取到的是$a_i$这个数字表示的值(因为$a_i &#x3D; b_i$)</p><p>然后我们考虑如果$a_i \neq b_i$那么我们选择的$c_i$就非常重要，因为$c_i$决定着我们可以选择$a_i$或者$b_i$中的哪个数字，只需要让$c_i &#x3D; a_i \ or \ c_i &#x3D; b_i$即可</p><p>那么选择某一个位置的思路就很清晰了，我们只需要考虑构造大于等于两个相同的并且把其中一个不需要的值删掉即可</p><p>接下来我们再考虑位置之间带来的因素</p><p>假设我们没有$a_i &#x3D; b_i$的情况，那么我们现在的问题可以转换为给定两个序列分别是$a,b$，每个位置上面取一个看是否可以构成一个排序</p><p>对于这一个问题来说，因为每一个位置做一个选择，同时也相同与每一个位置的两个数字相互制衡，那么我们可以用图论的语言来表达，在他们之间建一条边</p><p>我们可以发现只有基环树的形式是可以的，而基环树的形式实际上就是点数等于边数</p><p>那么我们最终只需要使用并查集取维护每个环中存在点数和边数即可</p><p>那么最后再思考答案贡献，对于一个基环树来说，如果这个树里面没有自环，那么贡献就是$2$，因为考虑每条边有两个选择，如果里面有自环的话，贡献就是$n$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">chkmin</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">chkmax</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">int</span> n,m,a[maxn],b[maxn];</span><br><span class="line"><span class="type">int</span> f[maxn],szv[maxn],sze[maxn],loop[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line">f[i] = i;</span><br><span class="line">szv[i] = <span class="number">1</span>;</span><br><span class="line">sze[i] = <span class="number">0</span>;</span><br><span class="line">loop[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getf</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x == f[x] ? x : f[x] = <span class="built_in">getf</span>(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> fx = <span class="built_in">getf</span>(x);</span><br><span class="line"><span class="type">int</span> fy = <span class="built_in">getf</span>(y);</span><br><span class="line"><span class="keyword">if</span>(fx != fy)</span><br><span class="line">&#123;</span><br><span class="line">f[fy] = fx;</span><br><span class="line">sze[fx] += sze[fy];</span><br><span class="line">szv[fx] += szv[fy];</span><br><span class="line">loop[fx] += loop[fy];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line">cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i) cin &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i) cin &gt;&gt; b[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">merge</span>(a[i],b[i]);</span><br><span class="line">sze[<span class="built_in">getf</span>(a[i])]++;</span><br><span class="line"><span class="keyword">if</span>(a[i] == b[i]) loop[<span class="built_in">getf</span>(a[i])]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i == <span class="built_in">getf</span>(i))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(sze[i] != szv[i]) ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">else</span> ans = ans * <span class="number">2</span> % mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> cf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ICPC-2021-EC-J</title>
      <link href="/2022/11/11/ICPC-2021-EC-J/"/>
      <url>/2022/11/11/ICPC-2021-EC-J/</url>
      
        <content type="html"><![CDATA[<h1 id="J-Elden-Ring"><a href="#J-Elden-Ring" class="headerlink" title="J. Elden Ring"></a>J. Elden Ring</h1><p><a href="https://codeforces.com/gym/103861/problem/J">https://codeforces.com/gym/103861/problem/J</a></p><p><strong>题目大意:</strong> 给定一个规模为$2e5$的无向图，每个点除了起始点都有一个怪物在那里，第$i$个点的怪物的战力值为$l_i$，我们初始的战力值为$l_1$</p><p>我们可以打败怪物当且仅当我们的战力值比怪物的高。怪物每天的战力值会增加$B$，我们杀掉一只怪物增加的战力值为$A$，问我们是否可以到达最终点</p><p><strong>解题思路:</strong> 考虑这道题和别的题目不一样的地方也就是引入了战力值这个概念，首先我们假设我们的战力值永远不会改变，那么起始也就是对于$A &#x3D; B$的这一种情况，我们直接$BFS$，并且看当前这个点的战力值是否比起始点要小，符合条件的那么我们就可以加入相对应的队列即可。</p><p>然后我们考虑$A &lt; B$的这一种情况，因为我们的战力值是不断减少的，那么我们仍然可以直接$BFS$去找我们可以到达的点，并且比较到达当前点消耗的数值是否比原来的战力值小即可。</p><p>最后我们来分析$A &gt; B$的情况，因为$A &gt; B$，所以我们的战力值是在不断增加的。在不断增加的时候我们实际上是可以开放很多点的，那么对于原来的跑图来说我们处理的要么是本身可以到达的，要么是处理因为一些条件不能到达的，因此对于这一张新图来说我们先跑一遍最短路来处理什么点在这种情况下可以先到达。</p><p>对于处理这一张新图来说我们首先先把$1$号节点给放进去，然后我们再跑$dij$，优先队列里面放的是当前点的权值和这个点，维护一个小数字在前面的队列。因为小数字在前面，那么我们可以不断增加自己的战力值，因此最后有可能达到一些权值更大的情况。</p><p>然后在跑实际天数的时候我们可以直接跑$dij$，但是这里的话使用的是从$1$号节点到当前这个$now$节点所需要的天数,然后对当前的值进行分析，如果比转移点要小的话直接$+1$即可，否则计算以下从$1$号节点转移过来的权值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> ll inf = <span class="number">1e18</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; edge[maxn];</span><br><span class="line">ll n,m,A,B;</span><br><span class="line">ll dis[maxn],vis[maxn],val[maxn];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line">cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> Case = <span class="number">1</span>;Case &lt;= T;++Case)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; A &gt;&gt; B;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line">edge[i].<span class="built_in">clear</span>();</span><br><span class="line">dis[i] = inf;</span><br><span class="line">vis[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>,u,v;i &lt;= m;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">edge[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">edge[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i) cin &gt;&gt; val[i],val[i] += B;</span><br><span class="line">val[<span class="number">1</span>] -= B;</span><br><span class="line"><span class="keyword">if</span>(A == B)</span><br><span class="line">&#123;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">que.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">dis[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!que.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> now = que.<span class="built_in">front</span>();</span><br><span class="line">que.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> to:edge[now])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(val[to] &lt; val[<span class="number">1</span>] &amp;&amp; dis[to] &gt; dis[now])</span><br><span class="line">&#123;</span><br><span class="line">que.<span class="built_in">push</span>(to);</span><br><span class="line">dis[to] = dis[now] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; (dis[n] == inf ? <span class="number">-1</span> : dis[n]) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(A &lt; B)</span><br><span class="line">&#123;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">que.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">dis[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!que.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> now = que.<span class="built_in">front</span>();</span><br><span class="line">que.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> to:edge[now])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">1ll</span> * val[to] + dis[now] * (B - A) * <span class="number">1ll</span> &lt; val[<span class="number">1</span>] &amp;&amp; dis[to] &gt; dis[now])</span><br><span class="line">&#123;</span><br><span class="line">dis[to] = dis[now] + <span class="number">1</span>;</span><br><span class="line">que.<span class="built_in">push</span>(to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; (dis[n] == inf ? <span class="number">-1</span> : dis[n]) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">priority_queue&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;,vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt;,greater&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt;&gt; que;</span><br><span class="line"><span class="type">int</span> day = <span class="number">-1</span>;</span><br><span class="line">que.<span class="built_in">push</span>(&#123;<span class="number">0</span>,<span class="number">1</span>&#125;);</span><br><span class="line"><span class="keyword">while</span>(!que.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> [nowd,now] = que.<span class="built_in">top</span>();</span><br><span class="line">que.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span>(vis[now]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(day != <span class="number">-1</span> &amp;&amp; val[now] &gt;= val[<span class="number">1</span>] + (A - B) * day)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">vis[now] = <span class="number">1</span>;</span><br><span class="line">day++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> to:edge[now])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[to]) que.<span class="built_in">push</span>(&#123;val[to],to&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dis[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!que.<span class="built_in">empty</span>()) que.<span class="built_in">pop</span>();</span><br><span class="line">que.<span class="built_in">push</span>(&#123;dis[<span class="number">1</span>],<span class="number">1</span>&#125;);</span><br><span class="line"><span class="keyword">while</span>(!que.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> [nowd,now] = que.<span class="built_in">top</span>();</span><br><span class="line">que.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span>(nowd &gt; dis[now]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> to:edge[now])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[to]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(val[to] &lt; val[now] &amp;&amp; dis[to] &gt; nowd + <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">dis[to] = nowd + <span class="number">1</span>;</span><br><span class="line">que.<span class="built_in">push</span>(&#123;dis[to],to&#125;);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dis[to] &gt; <span class="built_in">max</span>(nowd + <span class="number">1ll</span>,(val[to] - val[<span class="number">1</span>]) / (A - B) + <span class="number">2</span>))</span><br><span class="line">&#123;</span><br><span class="line">dis[to] = <span class="built_in">max</span>(nowd + <span class="number">1ll</span>,(val[to] - val[<span class="number">1</span>]) / (A - B) + <span class="number">2</span>);</span><br><span class="line">que.<span class="built_in">push</span>(&#123;dis[to],to&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; (dis[n] == inf ? <span class="number">-1</span> : dis[n]) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 最短路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 831 A - E</title>
      <link href="/2022/11/01/Codeforces-Round-831-A-E/"/>
      <url>/2022/11/01/Codeforces-Round-831-A-E/</url>
      
        <content type="html"><![CDATA[<h1 id="Codeforces-Round-831-A-E"><a href="#Codeforces-Round-831-A-E" class="headerlink" title="Codeforces Round 831 A - E"></a>Codeforces Round 831 A - E</h1><h2 id="A-Factorise-N-M"><a href="#A-Factorise-N-M" class="headerlink" title="A. Factorise N+M"></a>A. Factorise N+M</h2><p><strong>题目大意:</strong> 给定一个质数$n$，找到一个质数$m$ ，使得$n + m$是一个非质数</p><p><strong>解题思路:</strong> 对于非$2$的质数来说其他质数全部都是奇数，那么我们可以对于这些质数加上一个$3$，然后对于$2$特判加上$5$即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line">cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="number">7</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="number">3</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Jumbo-Extra-Cheese-2"><a href="#B-Jumbo-Extra-Cheese-2" class="headerlink" title="B. Jumbo Extra Cheese 2"></a>B. Jumbo Extra Cheese 2</h2><p><strong>题目大意:</strong> 给定$n$个矩阵，我们需要把矩阵放到$x$轴上面，一个矩阵不能放在另外一个矩阵的上面，问这个矩阵的形成的一个图形的周长是多少</p><p><strong>解题思路:</strong> 将这个图形拿出来在颅内思考一下，发现因为很多个矩形会贴在一起，那么对于形成的这个图形的 <strong>高</strong> 实际上就是最长的矩形的高，同时对于每个矩形来说他们的宽都要计算两边，那么我们对于每一个矩形来说我们可以选定较小的那一部分作为宽，较高的那一部分作为高，然后找一个最长的高即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; a[maxn];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line">cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>,u,v;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line"><span class="keyword">if</span>(u &lt; v) <span class="built_in">swap</span>(u,v);</span><br><span class="line">a[i] = &#123;u,v&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a + <span class="number">1</span>,a + <span class="number">1</span> + n);</span><br><span class="line"><span class="type">int</span> ans = <span class="number">2</span> * a[n].first;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line">ans += a[i].second * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Bricks-and-Bags"><a href="#C-Bricks-and-Bags" class="headerlink" title="C. Bricks and Bags"></a>C. Bricks and Bags</h2><p><strong>题目大意:</strong> 给定$n(1 \leq n \leq 10^5)$个数字，将他们放在$a,b,c$三个背包中，玩家需要从这三个背包中各选择一个数字，并且计算$|w_1 - w_2| + |w_2 - w_3|$ $(w_1 \in a,w_2 \in b,w_3 \in c)$的值是多少，然后玩家想要让值尽可能的小，放置者想要让值尽可能的大，问如何放置才能使得这个值最大</p><p><strong>解题思路:</strong> 首先先放在数轴上面考虑这个问题，我们假设$w_3 &gt; w_1$，如果$w_2$在$w_1$和$w_3$之间，那么值就是$w_3 - w_1$，如果$w_2 &lt; w_1$，那么对应的值就是$w_1 - w_2 + w_3 - w_2$，若$w_2 &gt; w_3$，那么对应的值就是$w_2 - w_3 + w_2 - w_1$</p><p>对于夹在中间的情况，我们可以直接计算，也就是整个序列的最大值减去整个序列的最小值</p><p>如果是第一种情况$w_2 &lt; w_1$，那么实际上我们是去取若干个小值给放在$b$中，为了让权值最大我们可以把$a_n$给单独拉出来当作$w_3$，假设目前取到的小值已经到了第$i$位，那么权值就是$a_n - a_i + a_{i + 1} - a_i$</p><p>如果是第二种情况$w_2 &gt; w_3$，那么实际上我们就是去取若干个大值给放在$b$中，为了让权值最大我们可以把$a_1$给单独拉出来当作$w_1$，假设目前取到的大值已经到了第$i$位，那么权值实际上就是$a_i - a_1 + a_i - a_{i - 1}$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line">cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i) cin &gt;&gt; a[i];</span><br><span class="line"><span class="built_in">sort</span>(a + <span class="number">1</span>,a + <span class="number">1</span> + n);</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; n - <span class="number">1</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">chkmax</span>(ans,a[n] - a[i] + a[i + <span class="number">1</span>] - a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = n;i &gt; <span class="number">2</span>;--i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">chkmax</span>(ans,a[i] - a[i - <span class="number">1</span>] + a[i] - a[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Knowledge-Cards"><a href="#D-Knowledge-Cards" class="headerlink" title="D. Knowledge Cards"></a>D. Knowledge Cards</h2><p><strong>题目大意:</strong> 给定一个$n * m(n * m \leq 10^6)$的矩阵，刚开始在矩阵$(1,1)$堆积着$k$张牌，从顶部到底部分别是$a_1,a_2,…,a_k$，接下来我们可以把牌移动到别的格子中，注意除了$(1,1)$和$(n,m)$这两个格子其他格子放置的牌数不能超过一张，然后$(1,1)$不能被重复放置牌，也不能从$(n,m)$移出去一张牌，问堆在$(n,m)$上面的牌从顶部到底部牌的排列是否可以是$1,2,3,…k$</p><p><strong>解题思路:</strong> 直接移动牌即可，因为我们在移动牌的时候肯定需要给当前一张牌留出一点位置的，所以除了$(1,1)$和$(n,m)$我们另外留出一个位置就能随便移动了，否则就是不能构成的情况</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= k;++i) cin &gt;&gt; a[i];</span><br><span class="line"><span class="type">int</span> nowcnt = k;</span><br><span class="line">priority_queue&lt;<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;,less&lt;<span class="type">int</span>&gt;&gt; q;</span><br><span class="line"><span class="type">int</span> f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= k;++i)</span><br><span class="line">&#123;</span><br><span class="line">    q.<span class="built_in">push</span>(a[i]);</span><br><span class="line">    <span class="keyword">if</span>(q.<span class="built_in">size</span>() &gt;= n * m - <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        f = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>() &amp;&amp; q.<span class="built_in">top</span>() == nowcnt)</span><br><span class="line">    &#123;</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        nowcnt--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(f) cout &lt;&lt; <span class="string">&quot;YA\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;TIDAK\n&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="E-Hanging-Hearts"><a href="#E-Hanging-Hearts" class="headerlink" title="E. Hanging Hearts"></a>E. Hanging Hearts</h2><p><strong>题目大意:</strong> 给定一棵树，我们需要给这棵树分配一些权值，这些权值属于一个排列。然后我们从叶子开始取，取的时候会构成一个序列。我们每次取叶子的时候判断他的父节点是否大于叶子结点如果大于叶子结点那么父节点的权值也变成叶子结点的权值，问构成的序列中形成的最大非递减子序列长度是多少</p><p><strong>解题思路:</strong> 考虑拿取叶子的性质实际上我们将小的权值放在下面更好一点，因为小的权值会把权值赋值给上面的父亲节点，那么对于一个节点来说她下面可能有很多条链，我这个节点要么作为子序列的终点要么作为子序列的中转点。如果作为终点的话那么也需要从下面的终点转移过来，如果作为中转点的话就可以将下面的节点选择他们的中转点或者是终点取最大然后把权值全部加起来</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n,m,k;</span><br><span class="line"><span class="type">int</span> dp[maxn][<span class="number">2</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; edge[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> s,<span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dp[s][<span class="number">0</span>] = dp[s][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> mx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> to:edge[s])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(to == fa) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs</span>(to,s);</span><br><span class="line">dp[s][<span class="number">0</span>] += <span class="built_in">max</span>(dp[to][<span class="number">0</span>],dp[to][<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">chkmax</span>(mx,dp[to][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">dp[s][<span class="number">1</span>] = mx + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>,x;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line">edge[i].<span class="built_in">push_back</span>(x);</span><br><span class="line">edge[x].<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">cout &lt;&lt; <span class="built_in">max</span>(dp[<span class="number">1</span>][<span class="number">0</span>],dp[<span class="number">1</span>][<span class="number">1</span>]) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 思维 </tag>
            
            <tag> cf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Computational Geometry</title>
      <link href="/2022/10/29/Computational-Geometry/"/>
      <url>/2022/10/29/Computational-Geometry/</url>
      
        <content type="html"><![CDATA[<h1 id="计算几何"><a href="#计算几何" class="headerlink" title="计算几何"></a>计算几何</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="type">point_t</span>=<span class="type">long</span> <span class="type">double</span>;  <span class="comment">//全局数据类型，可修改为 long long 等</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">point_t</span> eps=<span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">long</span> <span class="type">double</span> PI=<span class="number">3.1415926535897932384l</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点与向量</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">struct</span> <span class="title class_">point</span></span><br><span class="line">&#123;</span><br><span class="line">    T x,y;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> point &amp;a) <span class="type">const</span> &#123;<span class="built_in">return</span> (<span class="built_in">abs</span>(x-a.x)&lt;=eps &amp;&amp; <span class="built_in">abs</span>(y-a.y)&lt;=eps);&#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> point &amp;a) <span class="type">const</span> &#123;<span class="keyword">if</span> (<span class="built_in">abs</span>(x-a.x)&lt;=eps) <span class="keyword">return</span> y&lt;a.y-eps; <span class="keyword">return</span> <span class="built_in">x</span>&lt;a.x-eps;&#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&gt;(<span class="type">const</span> point &amp;a) <span class="type">const</span> &#123;<span class="keyword">return</span> !(*<span class="keyword">this</span>&lt;a || *<span class="keyword">this</span>==a);&#125;</span><br><span class="line">    point <span class="keyword">operator</span>+(<span class="type">const</span> point &amp;a) <span class="type">const</span> &#123;<span class="keyword">return</span> &#123;x+a.x,y+a.y&#125;;&#125;</span><br><span class="line">    point <span class="keyword">operator</span>-(<span class="type">const</span> point &amp;a) <span class="type">const</span> &#123;<span class="keyword">return</span> &#123;x-a.x,y-a.y&#125;;&#125;</span><br><span class="line">    point <span class="keyword">operator</span>-() <span class="type">const</span> &#123;<span class="keyword">return</span> &#123;-x,-y&#125;;&#125;</span><br><span class="line">    point <span class="keyword">operator</span>*(<span class="type">const</span> T k) <span class="type">const</span> &#123;<span class="keyword">return</span> &#123;k*x,k*y&#125;;&#125;</span><br><span class="line">    point <span class="keyword">operator</span>/(<span class="type">const</span> T k) <span class="type">const</span> &#123;<span class="keyword">return</span> &#123;x/k,y/k&#125;;&#125;</span><br><span class="line">    T <span class="keyword">operator</span>*(<span class="type">const</span> point &amp;a) <span class="type">const</span> &#123;<span class="keyword">return</span> x*a.x+y*a.y;&#125;  <span class="comment">// 点积</span></span><br><span class="line">    T <span class="keyword">operator</span>^(<span class="type">const</span> point &amp;a) <span class="type">const</span> &#123;<span class="keyword">return</span> x*a.y-y*a.x;&#125;  <span class="comment">// 叉积，注意优先级</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">toleft</span><span class="params">(<span class="type">const</span> point &amp;a)</span> <span class="type">const</span> </span>&#123;<span class="type">const</span> <span class="keyword">auto</span> t=(*<span class="keyword">this</span>)^a; <span class="keyword">return</span> (t&gt;eps)-(t&lt;-eps);&#125;  <span class="comment">// to-left 测试</span></span><br><span class="line">    <span class="function">T <span class="title">len2</span><span class="params">()</span> <span class="type">const</span> </span>&#123;<span class="keyword">return</span> (*<span class="keyword">this</span>)*(*<span class="keyword">this</span>);&#125;  <span class="comment">// 向量长度的平方</span></span><br><span class="line">    <span class="function">T <span class="title">dis2</span><span class="params">(<span class="type">const</span> point &amp;a)</span> <span class="type">const</span> </span>&#123;<span class="keyword">return</span> (a-(*<span class="keyword">this</span>)).<span class="built_in">len2</span>();&#125;  <span class="comment">// 两点距离的平方</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 涉及浮点数</span></span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">len</span><span class="params">()</span> <span class="type">const</span> </span>&#123;<span class="keyword">return</span> <span class="built_in">sqrtl</span>(<span class="built_in">len2</span>());&#125;  <span class="comment">// 向量长度</span></span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">dis</span><span class="params">(<span class="type">const</span> point &amp;a)</span> <span class="type">const</span> </span>&#123;<span class="keyword">return</span> <span class="built_in">sqrtl</span>(<span class="built_in">dis2</span>(a));&#125;  <span class="comment">// 两点距离</span></span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">ang</span><span class="params">(<span class="type">const</span> point &amp;a)</span> <span class="type">const</span> </span>&#123;<span class="keyword">return</span> <span class="built_in">acosl</span>(<span class="built_in">max</span>(<span class="number">-1.0l</span>,<span class="built_in">min</span>(<span class="number">1.0l</span>,((*<span class="keyword">this</span>)*a)/(<span class="built_in">len</span>()*a.<span class="built_in">len</span>()))));&#125;  <span class="comment">// 向量夹角</span></span><br><span class="line">    <span class="function">point <span class="title">rot</span><span class="params">(<span class="type">const</span> <span class="type">long</span> <span class="type">double</span> rad)</span> <span class="type">const</span> </span>&#123;<span class="keyword">return</span> &#123;x*<span class="built_in">cos</span>(rad)-y*<span class="built_in">sin</span>(rad),x*<span class="built_in">sin</span>(rad)+y*<span class="built_in">cos</span>(rad)&#125;;&#125;  <span class="comment">// 逆时针旋转（给定角度）</span></span><br><span class="line">    <span class="function">point <span class="title">rot</span><span class="params">(<span class="type">const</span> <span class="type">long</span> <span class="type">double</span> cosr,<span class="type">const</span> <span class="type">long</span> <span class="type">double</span> sinr)</span> <span class="type">const</span> </span>&#123;<span class="keyword">return</span> &#123;x*cosr-y*sinr,x*sinr+y*cosr&#125;;&#125;  <span class="comment">// 逆时针旋转（给定角度的正弦与余弦）</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> Point=point&lt;<span class="type">point_t</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 极角排序</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">argcmp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> Point &amp;a,<span class="type">const</span> Point &amp;b)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span> quad=[](<span class="type">const</span> Point &amp;a)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a.y&lt;-eps) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (a.y&gt;eps) <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">            <span class="keyword">if</span> (a.x&lt;-eps) <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">            <span class="keyword">if</span> (a.x&gt;eps) <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> qa=<span class="built_in">quad</span>(a),qb=<span class="built_in">quad</span>(b);</span><br><span class="line">        <span class="keyword">if</span> (qa!=qb) <span class="keyword">return</span> qa&lt;qb;</span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span> t=a^b;</span><br><span class="line">        <span class="comment">// if (abs(t)&lt;=eps) return a*a&lt;b*b-eps;  // 不同长度的向量需要分开</span></span><br><span class="line">        <span class="keyword">return</span> t&gt;eps;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直线</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">struct</span> <span class="title class_">line</span></span><br><span class="line">&#123;</span><br><span class="line">    point&lt;T&gt; p,v;  <span class="comment">// p 为直线上一点，v 为方向向量</span></span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> line &amp;a) <span class="type">const</span> &#123;<span class="keyword">return</span> v.<span class="built_in">toleft</span>(a.v)==<span class="number">0</span> &amp;&amp; v.<span class="built_in">toleft</span>(p-a.p)==<span class="number">0</span>;&#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">toleft</span><span class="params">(<span class="type">const</span> point&lt;T&gt; &amp;a)</span> <span class="type">const</span> </span>&#123;<span class="keyword">return</span> v.<span class="built_in">toleft</span>(a-p);&#125;  <span class="comment">// to-left 测试</span></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> line &amp;a) <span class="type">const</span>  <span class="comment">// 半平面交算法定义的排序</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">abs</span>(v^a.v)&lt;=eps &amp;&amp; v*a.v&gt;=-eps) <span class="keyword">return</span> <span class="built_in">toleft</span>(a.p)==<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">argcmp</span>()(v,a.v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 涉及浮点数</span></span><br><span class="line">    <span class="function">point&lt;T&gt; <span class="title">inter</span><span class="params">(<span class="type">const</span> line &amp;a)</span> <span class="type">const</span> </span>&#123;<span class="keyword">return</span> p+v*((a.v^(p-a.p))/(v^a.v));&#125;  <span class="comment">// 直线交点</span></span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">dis</span><span class="params">(<span class="type">const</span> point&lt;T&gt; &amp;a)</span> <span class="type">const</span> </span>&#123;<span class="keyword">return</span> <span class="built_in">abs</span>(v^(a-p))/v.<span class="built_in">len</span>();&#125;  <span class="comment">// 点到直线距离</span></span><br><span class="line">    <span class="function">point&lt;T&gt; <span class="title">proj</span><span class="params">(<span class="type">const</span> point&lt;T&gt; &amp;a)</span> <span class="type">const</span> </span>&#123;<span class="keyword">return</span> p+v*((v*(a-p))/(v*v));&#125;  <span class="comment">// 点在直线上的投影</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> Line=line&lt;<span class="type">point_t</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线段</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">struct</span> <span class="title class_">segment</span></span><br><span class="line">&#123;</span><br><span class="line">    point&lt;T&gt; a,b;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> segment &amp;s) <span class="type">const</span> &#123;<span class="keyword">return</span> <span class="built_in">make_pair</span>(a,b)&lt;<span class="built_in">make_pair</span>(s.a,s.b);&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判定性函数建议在整数域使用</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断点是否在线段上</span></span><br><span class="line">    <span class="comment">// -1 点在线段端点 | 0 点不在线段上 | 1 点严格在线段上</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">is_on</span><span class="params">(<span class="type">const</span> point&lt;T&gt; &amp;p)</span> <span class="type">const</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p==a || p==b) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> (p-a).<span class="built_in">toleft</span>(p-b)==<span class="number">0</span> &amp;&amp; (p-a)*(p-b)&lt;-eps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断线段直线是否相交</span></span><br><span class="line">    <span class="comment">// -1 直线经过线段端点 | 0 线段和直线不相交 | 1 线段和直线严格相交</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">is_inter</span><span class="params">(<span class="type">const</span> line&lt;T&gt; &amp;l)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l.<span class="built_in">toleft</span>(a)==<span class="number">0</span> || l.<span class="built_in">toleft</span>(b)==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> l.<span class="built_in">toleft</span>(a)!=l.<span class="built_in">toleft</span>(b);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断两线段是否相交</span></span><br><span class="line">    <span class="comment">// -1 在某一线段端点处相交 | 0 两线段不相交 | 1 两线段严格相交</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">is_inter</span><span class="params">(<span class="type">const</span> segment&lt;T&gt; &amp;s)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">is_on</span>(s.a) || <span class="built_in">is_on</span>(s.b) || s.<span class="built_in">is_on</span>(a) || s.<span class="built_in">is_on</span>(b)) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="type">const</span> line&lt;T&gt; l&#123;a,b-a&#125;,ls&#123;s.a,s.b-s.a&#125;;</span><br><span class="line">        <span class="keyword">return</span> l.<span class="built_in">toleft</span>(s.a)*l.<span class="built_in">toleft</span>(s.b)==<span class="number">-1</span> &amp;&amp; ls.<span class="built_in">toleft</span>(a)*ls.<span class="built_in">toleft</span>(b)==<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 点到线段距离</span></span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">dis</span><span class="params">(<span class="type">const</span> point&lt;T&gt; &amp;p)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((p-a)*(b-a)&lt;-eps || (p-b)*(a-b)&lt;-eps) <span class="keyword">return</span> <span class="built_in">min</span>(p.<span class="built_in">dis</span>(a),p.<span class="built_in">dis</span>(b));</span><br><span class="line">        <span class="type">const</span> line&lt;T&gt; l&#123;a,b-a&#125;;</span><br><span class="line">        <span class="keyword">return</span> l.<span class="built_in">dis</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 两线段间距离</span></span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">dis</span><span class="params">(<span class="type">const</span> segment&lt;T&gt; &amp;s)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">is_inter</span>(s)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(&#123;<span class="built_in">dis</span>(s.a),<span class="built_in">dis</span>(s.b),s.<span class="built_in">dis</span>(a),s.<span class="built_in">dis</span>(b)&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> Segment=segment&lt;<span class="type">point_t</span>&gt;;</span><br><span class="line"><span class="comment">//----------------------------必打-----------------------//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 多边形</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">struct</span> <span class="title class_">polygon</span></span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;point&lt;T&gt;&gt; p;  <span class="comment">// 以逆时针顺序存储</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">nxt</span><span class="params">(<span class="type">const</span> <span class="type">size_t</span> i)</span> <span class="type">const</span> </span>&#123;<span class="keyword">return</span> i==p.<span class="built_in">size</span>()<span class="number">-1</span>?<span class="number">0</span>:i+<span class="number">1</span>;&#125;</span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">pre</span><span class="params">(<span class="type">const</span> <span class="type">size_t</span> i)</span> <span class="type">const</span> </span>&#123;<span class="keyword">return</span> i==<span class="number">0</span>?p.<span class="built_in">size</span>()<span class="number">-1</span>:i<span class="number">-1</span>;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 回转数</span></span><br><span class="line">    <span class="comment">// 返回值第一项表示点是否在多边形边上</span></span><br><span class="line">    <span class="comment">// 对于狭义多边形，回转数为 0 表示点在多边形外，否则点在多边形内</span></span><br><span class="line">    <span class="function">pair&lt;<span class="type">bool</span>,<span class="type">int</span>&gt; <span class="title">winding</span><span class="params">(<span class="type">const</span> point&lt;T&gt; &amp;a)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i=<span class="number">0</span>;i&lt;p.<span class="built_in">size</span>();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">const</span> point&lt;T&gt; u=p[i],v=p[<span class="built_in">nxt</span>(i)];</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">abs</span>((a-u)^(a-v))&lt;=eps &amp;&amp; (a-u)*(a-v)&lt;=eps) <span class="keyword">return</span> &#123;<span class="literal">true</span>,<span class="number">0</span>&#125;;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">abs</span>(u.y-v.y)&lt;=eps) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">const</span> Line uv=&#123;u,v-u&#125;;</span><br><span class="line">            <span class="keyword">if</span> (u.y&lt;v.y-eps &amp;&amp; uv.<span class="built_in">toleft</span>(a)&lt;=<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (u.y&gt;v.y+eps &amp;&amp; uv.<span class="built_in">toleft</span>(a)&gt;=<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (u.y&lt;a.y-eps &amp;&amp; v.y&gt;=a.y-eps) cnt++;</span><br><span class="line">            <span class="keyword">if</span> (u.y&gt;=a.y-eps &amp;&amp; v.y&lt;a.y-eps) cnt--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="literal">false</span>,cnt&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 多边形面积的两倍</span></span><br><span class="line">    <span class="comment">// 可用于判断点的存储顺序是顺时针或逆时针</span></span><br><span class="line">    <span class="function">T <span class="title">area</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        T sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i=<span class="number">0</span>;i&lt;p.<span class="built_in">size</span>();i++) sum+=p[i]^p[<span class="built_in">nxt</span>(i)];</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 多边形的周长</span></span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">circ</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">double</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i=<span class="number">0</span>;i&lt;p.<span class="built_in">size</span>();i++) sum+=p[i].<span class="built_in">dis</span>(p[<span class="built_in">nxt</span>(i)]);</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> Polygon=polygon&lt;<span class="type">point_t</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//凸多边形</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">struct</span> <span class="title class_">convex</span>: polygon&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 闵可夫斯基和</span></span><br><span class="line">    convex <span class="keyword">operator</span>+(<span class="type">const</span> convex &amp;c) <span class="type">const</span>  </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span> &amp;p=<span class="keyword">this</span>-&gt;p;</span><br><span class="line">        <span class="function">vector&lt;Segment&gt; <span class="title">e1</span><span class="params">(p.size())</span>,<span class="title">e2</span><span class="params">(c.p.size())</span>,<span class="title">edge</span><span class="params">(p.size()+c.p.size())</span></span>;</span><br><span class="line">        vector&lt;point&lt;T&gt;&gt; res; res.<span class="built_in">reserve</span>(p.<span class="built_in">size</span>()+c.p.<span class="built_in">size</span>());</span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span> cmp=[](<span class="type">const</span> Segment &amp;u,<span class="type">const</span> Segment &amp;v) &#123;<span class="keyword">return</span> <span class="built_in">argcmp</span>()(u.b-u.a,v.b-v.a);&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i=<span class="number">0</span>;i&lt;p.<span class="built_in">size</span>();i++) e1[i]=&#123;p[i],p[<span class="keyword">this</span>-&gt;<span class="built_in">nxt</span>(i)]&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i=<span class="number">0</span>;i&lt;c.p.<span class="built_in">size</span>();i++) e2[i]=&#123;c.p[i],c.p[c.<span class="built_in">nxt</span>(i)]&#125;;</span><br><span class="line">        <span class="built_in">rotate</span>(e1.<span class="built_in">begin</span>(),<span class="built_in">min_element</span>(e1.<span class="built_in">begin</span>(),e1.<span class="built_in">end</span>(),cmp),e1.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">rotate</span>(e2.<span class="built_in">begin</span>(),<span class="built_in">min_element</span>(e2.<span class="built_in">begin</span>(),e2.<span class="built_in">end</span>(),cmp),e2.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">merge</span>(e1.<span class="built_in">begin</span>(),e1.<span class="built_in">end</span>(),e2.<span class="built_in">begin</span>(),e2.<span class="built_in">end</span>(),edge.<span class="built_in">begin</span>(),cmp);</span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span> check=[](<span class="type">const</span> vector&lt;point&lt;T&gt;&gt; &amp;res,<span class="type">const</span> point&lt;T&gt; &amp;u)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">const</span> <span class="keyword">auto</span> back1=res.<span class="built_in">back</span>(),back2=*<span class="built_in">prev</span>(res.<span class="built_in">end</span>(),<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">return</span> (back1-back2).<span class="built_in">toleft</span>(u-back1)==<span class="number">0</span> &amp;&amp; (back1-back2)*(u-back1)&gt;=-eps;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">auto</span> u=e1[<span class="number">0</span>].a+e2[<span class="number">0</span>].a;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;v:edge)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (res.<span class="built_in">size</span>()&gt;<span class="number">1</span> &amp;&amp; <span class="built_in">check</span>(res,u)) res.<span class="built_in">pop_back</span>();</span><br><span class="line">            res.<span class="built_in">push_back</span>(u);</span><br><span class="line">            u=u+v.b-v.a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="built_in">size</span>()&gt;<span class="number">1</span> &amp;&amp; <span class="built_in">check</span>(res,res[<span class="number">0</span>])) res.<span class="built_in">pop_back</span>();</span><br><span class="line">        <span class="keyword">return</span> &#123;res&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 旋转卡壳</span></span><br><span class="line">    <span class="comment">// func 为更新答案的函数，可以根据题目调整位置</span></span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> F&gt; <span class="type">void</span> <span class="title">rotcaliper</span><span class="params">(<span class="type">const</span> F &amp;func)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span> &amp;p=<span class="keyword">this</span>-&gt;p;</span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span> area=[](<span class="type">const</span> point&lt;T&gt; &amp;u,<span class="type">const</span> point&lt;T&gt; &amp;v,<span class="type">const</span> point&lt;T&gt; &amp;w)&#123;<span class="built_in">return</span> (w-u)^(w-v);&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i=<span class="number">0</span>,j=<span class="number">1</span>;i&lt;p.<span class="built_in">size</span>();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">const</span> <span class="keyword">auto</span> nxti=<span class="keyword">this</span>-&gt;<span class="built_in">nxt</span>(i);</span><br><span class="line">            <span class="built_in">func</span>(p[i],p[nxti],p[j]);</span><br><span class="line">            <span class="keyword">while</span> (<span class="built_in">area</span>(p[<span class="keyword">this</span>-&gt;<span class="built_in">nxt</span>(j)],p[i],p[nxti])&gt;=<span class="built_in">area</span>(p[j],p[i],p[nxti]))</span><br><span class="line">            &#123;</span><br><span class="line">                j=<span class="keyword">this</span>-&gt;<span class="built_in">nxt</span>(j);</span><br><span class="line">                <span class="built_in">func</span>(p[i],p[nxti],p[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 凸多边形的直径的平方</span></span><br><span class="line">    <span class="function">T <span class="title">diameter2</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span> &amp;p=<span class="keyword">this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">if</span> (p.<span class="built_in">size</span>()==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (p.<span class="built_in">size</span>()==<span class="number">2</span>) <span class="keyword">return</span> p[<span class="number">0</span>].<span class="built_in">dis2</span>(p[<span class="number">1</span>]);</span><br><span class="line">        T ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">auto</span> func=[&amp;](<span class="type">const</span> point&lt;T&gt; &amp;u,<span class="type">const</span> point&lt;T&gt; &amp;v,<span class="type">const</span> point&lt;T&gt; &amp;w)&#123;ans=<span class="built_in">max</span>(&#123;ans,w.<span class="built_in">dis2</span>(u),w.<span class="built_in">dis2</span>(v)&#125;);&#125;;</span><br><span class="line">        <span class="built_in">rotcaliper</span>(func);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断点是否在凸多边形内</span></span><br><span class="line">    <span class="comment">// 复杂度 O(logn)</span></span><br><span class="line">    <span class="comment">// -1 点在多边形边上 | 0 点在多边形外 | 1 点在多边形内</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">is_in</span><span class="params">(<span class="type">const</span> point&lt;T&gt; &amp;a)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span> &amp;p=<span class="keyword">this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">if</span> (p.<span class="built_in">size</span>()==<span class="number">1</span>) <span class="keyword">return</span> a==p[<span class="number">0</span>]?<span class="number">-1</span>:<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (p.<span class="built_in">size</span>()==<span class="number">2</span>) <span class="keyword">return</span> segment&lt;T&gt;&#123;p[<span class="number">0</span>],p[<span class="number">1</span>]&#125;.<span class="built_in">is_on</span>(a)?<span class="number">-1</span>:<span class="number">0</span>; </span><br><span class="line">        <span class="keyword">if</span> (a==p[<span class="number">0</span>]) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span> ((p[<span class="number">1</span>]-p[<span class="number">0</span>]).<span class="built_in">toleft</span>(a-p[<span class="number">0</span>])==<span class="number">-1</span> || (p.<span class="built_in">back</span>()-p[<span class="number">0</span>]).<span class="built_in">toleft</span>(a-p[<span class="number">0</span>])==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span> cmp=[&amp;](<span class="type">const</span> Point &amp;u,<span class="type">const</span> Point &amp;v)&#123;<span class="built_in">return</span> (u-p[<span class="number">0</span>]).<span class="built_in">toleft</span>(v-p[<span class="number">0</span>])==<span class="number">1</span>;&#125;;</span><br><span class="line">        <span class="type">const</span> <span class="type">size_t</span> i=<span class="built_in">lower_bound</span>(p.<span class="built_in">begin</span>()+<span class="number">1</span>,p.<span class="built_in">end</span>(),a,cmp)-p.<span class="built_in">begin</span>();</span><br><span class="line">        <span class="keyword">if</span> (i==<span class="number">1</span>) <span class="keyword">return</span> segment&lt;T&gt;&#123;p[<span class="number">0</span>],p[i]&#125;.<span class="built_in">is_on</span>(a)?<span class="number">-1</span>:<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (i==p.<span class="built_in">size</span>()<span class="number">-1</span> &amp;&amp; segment&lt;T&gt;&#123;p[<span class="number">0</span>],p[i]&#125;.<span class="built_in">is_on</span>(a)) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span> (segment&lt;T&gt;&#123;p[i<span class="number">-1</span>],p[i]&#125;.<span class="built_in">is_on</span>(a)) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> (p[i]-p[i<span class="number">-1</span>]).<span class="built_in">toleft</span>(a-p[i<span class="number">-1</span>])&gt;<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 凸多边形关于某一方向的极点</span></span><br><span class="line">    <span class="comment">// 复杂度 O(logn)</span></span><br><span class="line">    <span class="comment">// 参考资料：https://codeforces.com/blog/entry/48868</span></span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> F&gt; <span class="type">size_t</span> <span class="title">extreme</span><span class="params">(<span class="type">const</span> F &amp;dir)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span> &amp;p=<span class="keyword">this</span>-&gt;p;</span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span> check=[&amp;](<span class="type">const</span> <span class="type">size_t</span> i)&#123;<span class="keyword">return</span> <span class="built_in">dir</span>(p[i]).<span class="built_in">toleft</span>(p[<span class="keyword">this</span>-&gt;<span class="built_in">nxt</span>(i)]-p[i])&gt;=<span class="number">0</span>;&#125;;</span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span> dir0=<span class="built_in">dir</span>(p[<span class="number">0</span>]); <span class="type">const</span> <span class="keyword">auto</span> check0=<span class="built_in">check</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (!check0 &amp;&amp; <span class="built_in">check</span>(p.<span class="built_in">size</span>()<span class="number">-1</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span> cmp=[&amp;](<span class="type">const</span> Point &amp;v)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">const</span> <span class="type">size_t</span> vi=&amp;v-p.<span class="built_in">data</span>();</span><br><span class="line">            <span class="keyword">if</span> (vi==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="type">const</span> <span class="keyword">auto</span> checkv=<span class="built_in">check</span>(vi);</span><br><span class="line">            <span class="type">const</span> <span class="keyword">auto</span> t=dir0.<span class="built_in">toleft</span>(v-p[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">if</span> (vi==<span class="number">1</span> &amp;&amp; checkv==check0 &amp;&amp; t==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> checkv^(checkv==check0 &amp;&amp; t&lt;=<span class="number">0</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">partition_point</span>(p.<span class="built_in">begin</span>(),p.<span class="built_in">end</span>(),cmp)-p.<span class="built_in">begin</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 过凸多边形外一点求凸多边形的切线，返回切点下标</span></span><br><span class="line">    <span class="comment">// 复杂度 O(logn)</span></span><br><span class="line">    <span class="comment">// 必须保证点在多边形外</span></span><br><span class="line">    <span class="function">pair&lt;<span class="type">size_t</span>,<span class="type">size_t</span>&gt; <span class="title">tangent</span><span class="params">(<span class="type">const</span> point&lt;T&gt; &amp;a)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">size_t</span> i=<span class="built_in">extreme</span>([&amp;](<span class="type">const</span> point&lt;T&gt; &amp;u)&#123;<span class="keyword">return</span> u-a;&#125;);</span><br><span class="line">        <span class="type">const</span> <span class="type">size_t</span> j=<span class="built_in">extreme</span>([&amp;](<span class="type">const</span> point&lt;T&gt; &amp;u)&#123;<span class="keyword">return</span> a-u;&#125;);</span><br><span class="line">        <span class="keyword">return</span> &#123;i,j&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 求平行于给定直线的凸多边形的切线，返回切点下标</span></span><br><span class="line">    <span class="comment">// 复杂度 O(logn)</span></span><br><span class="line">    <span class="function">pair&lt;<span class="type">size_t</span>,<span class="type">size_t</span>&gt; <span class="title">tangent</span><span class="params">(<span class="type">const</span> line&lt;T&gt; &amp;a)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">size_t</span> i=<span class="built_in">extreme</span>([&amp;](...)&#123;<span class="keyword">return</span> a.v;&#125;);</span><br><span class="line">        <span class="type">const</span> <span class="type">size_t</span> j=<span class="built_in">extreme</span>([&amp;](...)&#123;<span class="keyword">return</span> -a.v;&#125;);</span><br><span class="line">        <span class="keyword">return</span> &#123;i,j&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> Convex=convex&lt;<span class="type">point_t</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 圆</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Circle</span></span><br><span class="line">&#123;</span><br><span class="line">    Point c;</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> r;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> Circle &amp;a) <span class="type">const</span> &#123;<span class="keyword">return</span> c==a.c &amp;&amp; <span class="built_in">abs</span>(r-a.r)&lt;=eps;&#125;</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">circ</span><span class="params">()</span> <span class="type">const</span> </span>&#123;<span class="keyword">return</span> <span class="number">2</span>*PI*r;&#125;  <span class="comment">// 周长</span></span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">area</span><span class="params">()</span> <span class="type">const</span> </span>&#123;<span class="keyword">return</span> PI*r*r;&#125;  <span class="comment">// 面积</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 点与圆的关系</span></span><br><span class="line">    <span class="comment">// -1 圆上 | 0 圆外 | 1 圆内</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">is_in</span><span class="params">(<span class="type">const</span> Point &amp;p)</span> <span class="type">const</span> </span>&#123;<span class="type">const</span> <span class="type">long</span> <span class="type">double</span> d=p.<span class="built_in">dis</span>(c); <span class="keyword">return</span> <span class="built_in">abs</span>(d-r)&lt;=eps?<span class="number">-1</span>:d&lt;r-eps;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 直线与圆关系</span></span><br><span class="line">    <span class="comment">// 0 相离 | 1 相切 | 2 相交</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">relation</span><span class="params">(<span class="type">const</span> Line &amp;l)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">long</span> <span class="type">double</span> d=l.<span class="built_in">dis</span>(c);</span><br><span class="line">        <span class="keyword">if</span> (d&gt;r+eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">abs</span>(d-r)&lt;=eps) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 圆与圆关系</span></span><br><span class="line">    <span class="comment">// -1 相同 | 0 相离 | 1 外切 | 2 相交 | 3 内切 | 4 内含</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">relation</span><span class="params">(<span class="type">const</span> Circle &amp;a)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (*<span class="keyword">this</span>==a) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="type">const</span> <span class="type">long</span> <span class="type">double</span> d=c.<span class="built_in">dis</span>(a.c);</span><br><span class="line">        <span class="keyword">if</span> (d&gt;r+a.r+eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">abs</span>(d-r-a.r)&lt;=eps) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">abs</span>(d-<span class="built_in">abs</span>(r-a.r))&lt;=eps) <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">if</span> (d&lt;<span class="built_in">abs</span>(r-a.r)-eps) <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 直线与圆的交点</span></span><br><span class="line">    <span class="function">vector&lt;Point&gt; <span class="title">inter</span><span class="params">(<span class="type">const</span> Line &amp;l)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">long</span> <span class="type">double</span> d=l.<span class="built_in">dis</span>(c);</span><br><span class="line">        <span class="type">const</span> Point p=l.<span class="built_in">proj</span>(c);</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> t=<span class="built_in">relation</span>(l);</span><br><span class="line">        <span class="keyword">if</span> (t==<span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">vector</span>&lt;Point&gt;();</span><br><span class="line">        <span class="keyword">if</span> (t==<span class="number">1</span>) <span class="keyword">return</span> vector&lt;Point&gt;&#123;p&#125;;</span><br><span class="line">        <span class="type">const</span> <span class="type">long</span> <span class="type">double</span> k=<span class="built_in">sqrt</span>(r*r-d*d);</span><br><span class="line">        <span class="keyword">return</span> vector&lt;Point&gt;&#123;p-(l.v/l.v.<span class="built_in">len</span>())*k,p+(l.v/l.v.<span class="built_in">len</span>())*k&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 圆与圆交点</span></span><br><span class="line">    <span class="function">vector&lt;Point&gt; <span class="title">inter</span><span class="params">(<span class="type">const</span> Circle &amp;a)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">long</span> <span class="type">double</span> d=c.<span class="built_in">dis</span>(a.c);</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> t=<span class="built_in">relation</span>(a);</span><br><span class="line">        <span class="keyword">if</span> (t==<span class="number">-1</span> || t==<span class="number">0</span> || t==<span class="number">4</span>) <span class="keyword">return</span> <span class="built_in">vector</span>&lt;Point&gt;();</span><br><span class="line">        Point e=a.c-c; e=e/e.<span class="built_in">len</span>()*r;</span><br><span class="line">        <span class="keyword">if</span> (t==<span class="number">1</span> || t==<span class="number">3</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (r*r+d*d-a.r*a.r&gt;=-eps) <span class="keyword">return</span> vector&lt;Point&gt;&#123;c+e&#125;;</span><br><span class="line">            <span class="keyword">return</span> vector&lt;Point&gt;&#123;c-e&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">const</span> <span class="type">long</span> <span class="type">double</span> costh=(r*r+d*d-a.r*a.r)/(<span class="number">2</span>*r*d),sinth=<span class="built_in">sqrt</span>(<span class="number">1</span>-costh*costh);</span><br><span class="line">        <span class="keyword">return</span> vector&lt;Point&gt;&#123;c+e.<span class="built_in">rot</span>(costh,-sinth),c+e.<span class="built_in">rot</span>(costh,sinth)&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 圆与圆交面积</span></span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">inter_area</span><span class="params">(<span class="type">const</span> Circle &amp;a)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">long</span> <span class="type">double</span> d=c.<span class="built_in">dis</span>(a.c);</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> t=<span class="built_in">relation</span>(a);</span><br><span class="line">        <span class="keyword">if</span> (t==<span class="number">-1</span>) <span class="keyword">return</span> <span class="built_in">area</span>();</span><br><span class="line">        <span class="keyword">if</span> (t&lt;<span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (t&gt;<span class="number">2</span>) <span class="keyword">return</span> <span class="built_in">min</span>(<span class="built_in">area</span>(),a.<span class="built_in">area</span>());</span><br><span class="line">        <span class="type">const</span> <span class="type">long</span> <span class="type">double</span> costh1=(r*r+d*d-a.r*a.r)/(<span class="number">2</span>*r*d),costh2=(a.r*a.r+d*d-r*r)/(<span class="number">2</span>*a.r*d);</span><br><span class="line">        <span class="type">const</span> <span class="type">long</span> <span class="type">double</span> sinth1=<span class="built_in">sqrt</span>(<span class="number">1</span>-costh1*costh1),sinth2=<span class="built_in">sqrt</span>(<span class="number">1</span>-costh2*costh2);</span><br><span class="line">        <span class="type">const</span> <span class="type">long</span> <span class="type">double</span> th1=<span class="built_in">acos</span>(costh1),th2=<span class="built_in">acos</span>(costh2);</span><br><span class="line">        <span class="keyword">return</span> r*r*(th1-costh1*sinth1)+a.r*a.r*(th2-costh2*sinth2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 过圆外一点圆的切线</span></span><br><span class="line">    <span class="function">vector&lt;Line&gt; <span class="title">tangent</span><span class="params">(<span class="type">const</span> Point &amp;a)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> t=<span class="built_in">is_in</span>(a);</span><br><span class="line">        <span class="keyword">if</span> (t==<span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">vector</span>&lt;Line&gt;();</span><br><span class="line">        <span class="keyword">if</span> (t==<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">const</span> Point v=&#123;-(a-c).y,(a-c).x&#125;;</span><br><span class="line">            <span class="keyword">return</span> vector&lt;Line&gt;&#123;&#123;a,v&#125;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        Point e=a-c; e=e/e.<span class="built_in">len</span>()*r;</span><br><span class="line">        <span class="type">const</span> <span class="type">long</span> <span class="type">double</span> costh=r/c.<span class="built_in">dis</span>(a),sinth=<span class="built_in">sqrt</span>(<span class="number">1</span>-costh*costh);</span><br><span class="line">        <span class="type">const</span> Point t1=c+e.<span class="built_in">rot</span>(costh,-sinth),t2=c+e.<span class="built_in">rot</span>(costh,sinth);</span><br><span class="line">        <span class="keyword">return</span> vector&lt;Line&gt;&#123;&#123;a,t1-a&#125;,&#123;a,t2-a&#125;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 两圆的公切线</span></span><br><span class="line">    <span class="function">vector&lt;Line&gt; <span class="title">tangent</span><span class="params">(<span class="type">const</span> Circle &amp;a)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> t=<span class="built_in">relation</span>(a);</span><br><span class="line">        vector&lt;Line&gt; lines;</span><br><span class="line">        <span class="keyword">if</span> (t==<span class="number">-1</span> || t==<span class="number">4</span>) <span class="keyword">return</span> lines;</span><br><span class="line">        <span class="keyword">if</span> (t==<span class="number">1</span> || t==<span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">const</span> Point p=<span class="built_in">inter</span>(a)[<span class="number">0</span>],v=&#123;-(a.c-c).y,(a.c-c).x&#125;;</span><br><span class="line">            lines.<span class="built_in">push_back</span>(&#123;p,v&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">const</span> <span class="type">long</span> <span class="type">double</span> d=c.<span class="built_in">dis</span>(a.c);</span><br><span class="line">        <span class="type">const</span> Point e=(a.c-c)/(a.c-c).<span class="built_in">len</span>();</span><br><span class="line">        <span class="keyword">if</span> (t&lt;=<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">const</span> <span class="type">long</span> <span class="type">double</span> costh=(r-a.r)/d,sinth=<span class="built_in">sqrt</span>(<span class="number">1</span>-costh*costh);</span><br><span class="line">            <span class="type">const</span> Point d1=e.<span class="built_in">rot</span>(costh,-sinth),d2=e.<span class="built_in">rot</span>(costh,sinth);</span><br><span class="line">            <span class="type">const</span> Point u1=c+d1*r,u2=c+d2*r,v1=a.c+d1*a.r,v2=a.c+d2*a.r;</span><br><span class="line">            lines.<span class="built_in">push_back</span>(&#123;u1,v1-u1&#125;); lines.<span class="built_in">push_back</span>(&#123;u2,v2-u2&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (t==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">const</span> <span class="type">long</span> <span class="type">double</span> costh=(r+a.r)/d,sinth=<span class="built_in">sqrt</span>(<span class="number">1</span>-costh*costh);</span><br><span class="line">            <span class="type">const</span> Point d1=e.<span class="built_in">rot</span>(costh,-sinth),d2=e.<span class="built_in">rot</span>(costh,sinth);</span><br><span class="line">            <span class="type">const</span> Point u1=c+d1*r,u2=c+d2*r,v1=a.c-d1*a.r,v2=a.c-d2*a.r;</span><br><span class="line">            lines.<span class="built_in">push_back</span>(&#123;u1,v1-u1&#125;); lines.<span class="built_in">push_back</span>(&#123;u2,v2-u2&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lines;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 圆的反演</span></span><br><span class="line">    <span class="function">tuple&lt;<span class="type">int</span>,Circle,Line&gt; <span class="title">inverse</span><span class="params">(<span class="type">const</span> Line &amp;l)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">const</span> Circle null_c=&#123;&#123;<span class="number">0.0</span>,<span class="number">0.0</span>&#125;,<span class="number">0.0</span>&#125;;</span><br><span class="line">        <span class="type">const</span> Line null_l=&#123;&#123;<span class="number">0.0</span>,<span class="number">0.0</span>&#125;,&#123;<span class="number">0.0</span>,<span class="number">0.0</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">if</span> (l.<span class="built_in">toleft</span>(c)==<span class="number">0</span>) <span class="keyword">return</span> &#123;<span class="number">2</span>,null_c,l&#125;;</span><br><span class="line">        <span class="type">const</span> Point v=l.<span class="built_in">toleft</span>(c)==<span class="number">1</span>?Point&#123;l.v.y,-l.v.x&#125;:Point&#123;-l.v.y,l.v.x&#125;;</span><br><span class="line">        <span class="type">const</span> <span class="type">long</span> <span class="type">double</span> d=r*r/l.<span class="built_in">dis</span>(c);</span><br><span class="line">        <span class="type">const</span> Point p=c+v/v.<span class="built_in">len</span>()*d;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="number">1</span>,&#123;(c+p)/<span class="number">2</span>,d/<span class="number">2</span>&#125;,null_l&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">tuple&lt;<span class="type">int</span>,Circle,Line&gt; <span class="title">inverse</span><span class="params">(<span class="type">const</span> Circle &amp;a)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">const</span> Circle null_c=&#123;&#123;<span class="number">0.0</span>,<span class="number">0.0</span>&#125;,<span class="number">0.0</span>&#125;;</span><br><span class="line">        <span class="type">const</span> Line null_l=&#123;&#123;<span class="number">0.0</span>,<span class="number">0.0</span>&#125;,&#123;<span class="number">0.0</span>,<span class="number">0.0</span>&#125;&#125;;</span><br><span class="line">        <span class="type">const</span> Point v=a.c-c;</span><br><span class="line">        <span class="keyword">if</span> (a.<span class="built_in">is_in</span>(c)==<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">const</span> <span class="type">long</span> <span class="type">double</span> d=r*r/(a.r+a.r);</span><br><span class="line">            <span class="type">const</span> Point p=c+v/v.<span class="built_in">len</span>()*d;</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="number">2</span>,null_c,&#123;p,&#123;-v.y,v.x&#125;&#125;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (c==a.c) <span class="keyword">return</span> &#123;<span class="number">1</span>,&#123;c,r*r/a.r&#125;,null_l&#125;;</span><br><span class="line">        <span class="type">const</span> <span class="type">long</span> <span class="type">double</span> d1=r*r/(c.<span class="built_in">dis</span>(a.c)-a.r),d2=r*r/(c.<span class="built_in">dis</span>(a.c)+a.r);</span><br><span class="line">        <span class="type">const</span> Point p=c+v/v.<span class="built_in">len</span>()*d1,q=c+v/v.<span class="built_in">len</span>()*d2;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="number">1</span>,&#123;(p+q)/<span class="number">2</span>,p.<span class="built_in">dis</span>(q)/<span class="number">2</span>&#125;,null_l&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 圆与多边形面积交</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">double</span> <span class="title">area_inter</span><span class="params">(<span class="type">const</span> Circle &amp;circ,<span class="type">const</span> Polygon &amp;poly)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span> cal=[](<span class="type">const</span> Circle &amp;circ,<span class="type">const</span> Point &amp;a,<span class="type">const</span> Point &amp;b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((a-circ.c).<span class="built_in">toleft</span>(b-circ.c)==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0.0l</span>;</span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span> ina=circ.<span class="built_in">is_in</span>(a),inb=circ.<span class="built_in">is_in</span>(b);</span><br><span class="line">        <span class="type">const</span> Line ab=&#123;a,b-a&#125;;</span><br><span class="line">        <span class="keyword">if</span> (ina &amp;&amp; inb) <span class="keyword">return</span> ((a-circ.c)^(b-circ.c))/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (ina &amp;&amp; !inb)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">const</span> <span class="keyword">auto</span> t=circ.<span class="built_in">inter</span>(ab);</span><br><span class="line">            <span class="type">const</span> Point p=t.<span class="built_in">size</span>()==<span class="number">1</span>?t[<span class="number">0</span>]:t[<span class="number">1</span>];</span><br><span class="line">            <span class="type">const</span> <span class="type">long</span> <span class="type">double</span> ans=((a-circ.c)^(p-circ.c))/<span class="number">2</span>;</span><br><span class="line">            <span class="type">const</span> <span class="type">long</span> <span class="type">double</span> th=(p-circ.c).<span class="built_in">ang</span>(b-circ.c);</span><br><span class="line">            <span class="type">const</span> <span class="type">long</span> <span class="type">double</span> d=circ.r*circ.r*th/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> ((a-circ.c).<span class="built_in">toleft</span>(b-circ.c)==<span class="number">1</span>) <span class="keyword">return</span> ans+d;</span><br><span class="line">            <span class="keyword">return</span> ans-d;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!ina &amp;&amp; inb)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">const</span> Point p=circ.<span class="built_in">inter</span>(ab)[<span class="number">0</span>];</span><br><span class="line">            <span class="type">const</span> <span class="type">long</span> <span class="type">double</span> ans=((p-circ.c)^(b-circ.c))/<span class="number">2</span>;</span><br><span class="line">            <span class="type">const</span> <span class="type">long</span> <span class="type">double</span> th=(a-circ.c).<span class="built_in">ang</span>(p-circ.c);</span><br><span class="line">            <span class="type">const</span> <span class="type">long</span> <span class="type">double</span> d=circ.r*circ.r*th/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> ((a-circ.c).<span class="built_in">toleft</span>(b-circ.c)==<span class="number">1</span>) <span class="keyword">return</span> ans+d;</span><br><span class="line">            <span class="keyword">return</span> ans-d;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span> p=circ.<span class="built_in">inter</span>(ab);</span><br><span class="line">        <span class="keyword">if</span> (p.<span class="built_in">size</span>()==<span class="number">2</span> &amp;&amp; Segment&#123;a,b&#125;.<span class="built_in">dis</span>(circ.c)&lt;=circ.r+eps)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">const</span> <span class="type">long</span> <span class="type">double</span> ans=((p[<span class="number">0</span>]-circ.c)^(p[<span class="number">1</span>]-circ.c))/<span class="number">2</span>;</span><br><span class="line">            <span class="type">const</span> <span class="type">long</span> <span class="type">double</span> th1=(a-circ.c).<span class="built_in">ang</span>(p[<span class="number">0</span>]-circ.c),th2=(b-circ.c).<span class="built_in">ang</span>(p[<span class="number">1</span>]-circ.c);</span><br><span class="line">            <span class="type">const</span> <span class="type">long</span> <span class="type">double</span> d1=circ.r*circ.r*th1/<span class="number">2</span>,d2=circ.r*circ.r*th2/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> ((a-circ.c).<span class="built_in">toleft</span>(b-circ.c)==<span class="number">1</span>) <span class="keyword">return</span> ans+d1+d2;</span><br><span class="line">            <span class="keyword">return</span> ans-d1-d2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">const</span> <span class="type">long</span> <span class="type">double</span> th=(a-circ.c).<span class="built_in">ang</span>(b-circ.c);</span><br><span class="line">        <span class="keyword">if</span> ((a-circ.c).<span class="built_in">toleft</span>(b-circ.c)==<span class="number">1</span>) <span class="keyword">return</span> circ.r*circ.r*th/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> -circ.r*circ.r*th/<span class="number">2</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i=<span class="number">0</span>;i&lt;poly.p.<span class="built_in">size</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">const</span> Point a=poly.p[i],b=poly.p[poly.<span class="built_in">nxt</span>(i)];</span><br><span class="line">        ans+=<span class="built_in">cal</span>(circ,a,b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点集的凸包</span></span><br><span class="line"><span class="comment">// Andrew 算法，复杂度 O(nlogn)</span></span><br><span class="line"><span class="function">Convex <span class="title">convexhull</span><span class="params">(vector&lt;Point&gt; p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;Point&gt; st;</span><br><span class="line">    <span class="keyword">if</span> (p.<span class="built_in">empty</span>()) <span class="keyword">return</span> Convex&#123;st&#125;;</span><br><span class="line">    <span class="built_in">sort</span>(p.<span class="built_in">begin</span>(),p.<span class="built_in">end</span>());</span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span> check=[](<span class="type">const</span> vector&lt;Point&gt; &amp;st,<span class="type">const</span> Point &amp;u)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span> back1=st.<span class="built_in">back</span>(),back2=*<span class="built_in">prev</span>(st.<span class="built_in">end</span>(),<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> (back1-back2).<span class="built_in">toleft</span>(u-back1)&lt;=<span class="number">0</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> Point &amp;u:p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (st.<span class="built_in">size</span>()&gt;<span class="number">1</span> &amp;&amp; <span class="built_in">check</span>(st,u)) st.<span class="built_in">pop_back</span>();</span><br><span class="line">        st.<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">size_t</span> k=st.<span class="built_in">size</span>();</span><br><span class="line">    p.<span class="built_in">pop_back</span>(); <span class="built_in">reverse</span>(p.<span class="built_in">begin</span>(),p.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> Point &amp;u:p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (st.<span class="built_in">size</span>()&gt;k &amp;&amp; <span class="built_in">check</span>(st,u)) st.<span class="built_in">pop_back</span>();</span><br><span class="line">        st.<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    st.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="keyword">return</span> Convex&#123;st&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 半平面交</span></span><br><span class="line"><span class="comment">// 排序增量法，复杂度 O(nlogn)</span></span><br><span class="line"><span class="comment">// 输入与返回值都是用直线表示的半平面集合</span></span><br><span class="line"><span class="function">vector&lt;Line&gt; <span class="title">halfinter</span><span class="params">(vector&lt;Line&gt; l, <span class="type">const</span> <span class="type">point_t</span> lim=<span class="number">1e9</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span> check=[](<span class="type">const</span> Line &amp;a,<span class="type">const</span> Line &amp;b,<span class="type">const</span> Line &amp;c)&#123;<span class="keyword">return</span> a.<span class="built_in">toleft</span>(b.<span class="built_in">inter</span>(c))&lt;<span class="number">0</span>;&#125;;</span><br><span class="line">    <span class="comment">// 无精度误差的方法，但注意取值范围会扩大到三次方</span></span><br><span class="line">    <span class="comment">/*const auto check=[](const Line &amp;a,const Line &amp;b,const Line &amp;c)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        const Point p=a.v*(b.v^c.v),q=b.p*(b.v^c.v)+b.v*(c.v^(b.p-c.p))-a.p*(b.v^c.v);</span></span><br><span class="line"><span class="comment">        return p.toleft(q)&lt;0;</span></span><br><span class="line"><span class="comment">    &#125;;*/</span></span><br><span class="line">    l.<span class="built_in">push_back</span>(&#123;&#123;-lim,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;&#125;); l.<span class="built_in">push_back</span>(&#123;&#123;<span class="number">0</span>,-lim&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;&#125;);</span><br><span class="line">    l.<span class="built_in">push_back</span>(&#123;&#123;lim,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;&#125;); l.<span class="built_in">push_back</span>(&#123;&#123;<span class="number">0</span>,lim&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;&#125;);</span><br><span class="line">    <span class="built_in">sort</span>(l.<span class="built_in">begin</span>(),l.<span class="built_in">end</span>());</span><br><span class="line">    deque&lt;Line&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i=<span class="number">0</span>;i&lt;l.<span class="built_in">size</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i&gt;<span class="number">0</span> &amp;&amp; l[i<span class="number">-1</span>].v.<span class="built_in">toleft</span>(l[i].v)==<span class="number">0</span> &amp;&amp; l[i<span class="number">-1</span>].v*l[i].v&gt;eps) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">size</span>()&gt;<span class="number">1</span> &amp;&amp; <span class="built_in">check</span>(l[i],q.<span class="built_in">back</span>(),q[q.<span class="built_in">size</span>()<span class="number">-2</span>])) q.<span class="built_in">pop_back</span>();</span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">size</span>()&gt;<span class="number">1</span> &amp;&amp; <span class="built_in">check</span>(l[i],q[<span class="number">0</span>],q[<span class="number">1</span>])) q.<span class="built_in">pop_front</span>();</span><br><span class="line">        <span class="keyword">if</span> (!q.<span class="built_in">empty</span>() &amp;&amp; q.<span class="built_in">back</span>().v.<span class="built_in">toleft</span>(l[i].v)&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">vector</span>&lt;Line&gt;();</span><br><span class="line">        q.<span class="built_in">push_back</span>(l[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>()&gt;<span class="number">1</span> &amp;&amp; <span class="built_in">check</span>(q[<span class="number">0</span>],q.<span class="built_in">back</span>(),q[q.<span class="built_in">size</span>()<span class="number">-2</span>])) q.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>()&gt;<span class="number">1</span> &amp;&amp; <span class="built_in">check</span>(q.<span class="built_in">back</span>(),q[<span class="number">0</span>],q[<span class="number">1</span>])) q.<span class="built_in">pop_front</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">vector</span>&lt;Line&gt;(q.<span class="built_in">begin</span>(),q.<span class="built_in">end</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点集形成的最小最大三角形</span></span><br><span class="line"><span class="comment">// 极角序扫描线，复杂度 O(n^2logn)</span></span><br><span class="line"><span class="comment">// 最大三角形问题可以使用凸包与旋转卡壳做到 O(n^2)</span></span><br><span class="line"><span class="function">pair&lt;<span class="type">point_t</span>,<span class="type">point_t</span>&gt; <span class="title">minmax_triangle</span><span class="params">(<span class="type">const</span> vector&lt;Point&gt; &amp;vec)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (vec.<span class="built_in">size</span>()&lt;=<span class="number">2</span>) <span class="keyword">return</span> &#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; evt;</span><br><span class="line">    evt.<span class="built_in">reserve</span>(vec.<span class="built_in">size</span>()*vec.<span class="built_in">size</span>());</span><br><span class="line">    <span class="type">point_t</span> maxans=<span class="number">0</span>,minans=numeric_limits&lt;<span class="type">point_t</span>&gt;::<span class="built_in">max</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i=<span class="number">0</span>;i&lt;vec.<span class="built_in">size</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> j=<span class="number">0</span>;j&lt;vec.<span class="built_in">size</span>();j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i==j) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (vec[i]==vec[j]) minans=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> evt.<span class="built_in">push_back</span>(&#123;i,j&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(evt.<span class="built_in">begin</span>(),evt.<span class="built_in">end</span>(),[&amp;](<span class="type">const</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &amp;u,<span class="type">const</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &amp;v)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">const</span> Point du=vec[u.second]-vec[u.first],dv=vec[v.second]-vec[v.first];</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">argcmp</span>()(&#123;du.y,-du.x&#125;,&#123;dv.y,-dv.x&#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="function">vector&lt;<span class="type">size_t</span>&gt; <span class="title">vx</span><span class="params">(vec.size())</span>,<span class="title">pos</span><span class="params">(vec.size())</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i=<span class="number">0</span>;i&lt;vec.<span class="built_in">size</span>();i++) vx[i]=i;</span><br><span class="line">    <span class="built_in">sort</span>(vx.<span class="built_in">begin</span>(),vx.<span class="built_in">end</span>(),[&amp;](<span class="type">int</span> x,<span class="type">int</span> y)&#123;<span class="keyword">return</span> vec[x]&lt;vec[y];&#125;);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i=<span class="number">0</span>;i&lt;vx.<span class="built_in">size</span>();i++) pos[vx[i]]=i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> [u,v]:evt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">size_t</span> i=pos[u],j=pos[v];</span><br><span class="line">        <span class="type">const</span> <span class="type">size_t</span> l=<span class="built_in">min</span>(i,j),r=<span class="built_in">max</span>(i,j);</span><br><span class="line">        <span class="type">const</span> Point vecu=vec[u],vecv=vec[v];</span><br><span class="line">        <span class="keyword">if</span> (l&gt;<span class="number">0</span>) minans=<span class="built_in">min</span>(minans,<span class="built_in">abs</span>((vec[vx[l<span class="number">-1</span>]]-vecu)^(vec[vx[l<span class="number">-1</span>]]-vecv)));</span><br><span class="line">        <span class="keyword">if</span> (r&lt;vx.<span class="built_in">size</span>()<span class="number">-1</span>) minans=<span class="built_in">min</span>(minans,<span class="built_in">abs</span>((vec[vx[r+<span class="number">1</span>]]-vecu)^(vec[vx[r+<span class="number">1</span>]]-vecv)));</span><br><span class="line">        maxans=<span class="built_in">max</span>(&#123;maxans,<span class="built_in">abs</span>((vec[vx[<span class="number">0</span>]]-vecu)^(vec[vx[<span class="number">0</span>]]-vecv)),<span class="built_in">abs</span>((vec[vx.<span class="built_in">back</span>()]-vecu)^(vec[vx.<span class="built_in">back</span>()]-vecv))&#125;);</span><br><span class="line">        <span class="keyword">if</span> (i&lt;j) <span class="built_in">swap</span>(vx[i],vx[j]),pos[u]=j,pos[v]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;minans,maxans&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断多条线段是否有交点</span></span><br><span class="line"><span class="comment">// 扫描线，复杂度 O(nlogn)</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">segs_inter</span><span class="params">(<span class="type">const</span> vector&lt;Segment&gt; &amp;segs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (segs.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">using</span> <span class="type">seq_t</span>=tuple&lt;<span class="type">point_t</span>,<span class="type">int</span>,Segment&gt;;</span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span> seqcmp=[](<span class="type">const</span> <span class="type">seq_t</span> &amp;u, <span class="type">const</span> <span class="type">seq_t</span> &amp;v)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span> [u0,u1,u2]=u;</span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span> [v0,v1,v2]=v;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">abs</span>(u0-v0)&lt;=eps) <span class="keyword">return</span> <span class="built_in">make_pair</span>(u1,u2)&lt;<span class="built_in">make_pair</span>(v1,v2);</span><br><span class="line">        <span class="keyword">return</span> u0&lt;v0-eps;</span><br><span class="line">    &#125;;</span><br><span class="line">    vector&lt;<span class="type">seq_t</span>&gt; seq;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> seg:segs)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (seg.a.x&gt;seg.b.x+eps) <span class="built_in">swap</span>(seg.a,seg.b);</span><br><span class="line">        seq.<span class="built_in">push_back</span>(&#123;seg.a.x,<span class="number">0</span>,seg&#125;);</span><br><span class="line">        seq.<span class="built_in">push_back</span>(&#123;seg.b.x,<span class="number">1</span>,seg&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(seq.<span class="built_in">begin</span>(),seq.<span class="built_in">end</span>(),seqcmp);</span><br><span class="line">    <span class="type">point_t</span> x_now;</span><br><span class="line">    <span class="keyword">auto</span> cmp=[&amp;](<span class="type">const</span> Segment &amp;u, <span class="type">const</span> Segment &amp;v)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">abs</span>(u.a.x-u.b.x)&lt;=eps || <span class="built_in">abs</span>(v.a.x-v.b.x)&lt;=eps) <span class="keyword">return</span> u.a.y&lt;v.a.y-eps;</span><br><span class="line">        <span class="keyword">return</span> ((x_now-u.a.x)*(u.b.y-u.a.y)+u.a.y*(u.b.x-u.a.x))*(v.b.x-v.a.x)&lt;((x_now-v.a.x)*(v.b.y-v.a.y)+v.a.y*(v.b.x-v.a.x))*(u.b.x-u.a.x)-eps;</span><br><span class="line">    &#125;;</span><br><span class="line">    multiset&lt;Segment,<span class="keyword">decltype</span>(cmp)&gt; s&#123;cmp&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> [x,o,seg]:seq)</span><br><span class="line">    &#123;</span><br><span class="line">        x_now=x;</span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span> it=s.<span class="built_in">lower_bound</span>(seg);</span><br><span class="line">        <span class="keyword">if</span> (o==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (it!=s.<span class="built_in">end</span>() &amp;&amp; seg.<span class="built_in">is_inter</span>(*it)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (it!=s.<span class="built_in">begin</span>() &amp;&amp; seg.<span class="built_in">is_inter</span>(*<span class="built_in">prev</span>(it))) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            s.<span class="built_in">insert</span>(seg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">next</span>(it)!=s.<span class="built_in">end</span>() &amp;&amp; it!=s.<span class="built_in">begin</span>() &amp;&amp; (*<span class="built_in">prev</span>(it)).<span class="built_in">is_inter</span>(*<span class="built_in">next</span>(it))) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            s.<span class="built_in">erase</span>(it);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多边形面积并</span></span><br><span class="line"><span class="comment">// 轮廓积分，复杂度 O(n^2logn)，n为边数</span></span><br><span class="line"><span class="comment">// ans[i] 表示被至少覆盖了 i+1 次的区域的面积</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">long</span> <span class="type">double</span>&gt; <span class="title">area_union</span><span class="params">(<span class="type">const</span> vector&lt;Polygon&gt; &amp;polys)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">size_t</span> siz=polys.<span class="built_in">size</span>();</span><br><span class="line">    vector&lt;vector&lt;pair&lt;Point,Point&gt;&gt;&gt; <span class="built_in">segs</span>(siz);</span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span> check=[](<span class="type">const</span> Point &amp;u,<span class="type">const</span> Segment &amp;e)&#123;<span class="keyword">return</span> !((u&lt;e.a &amp;&amp; u&lt;e.b) || (u&gt;e.a &amp;&amp; u&gt;e.b));&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> cut_edge=[&amp;](<span class="type">const</span> Segment &amp;e,<span class="type">const</span> <span class="type">size_t</span> i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">const</span> Line le&#123;e.a,e.b-e.a&#125;;</span><br><span class="line">        vector&lt;pair&lt;Point,<span class="type">int</span>&gt;&gt; evt;</span><br><span class="line">        evt.<span class="built_in">push_back</span>(&#123;e.a,<span class="number">0</span>&#125;); evt.<span class="built_in">push_back</span>(&#123;e.b,<span class="number">0</span>&#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> j=<span class="number">0</span>;j&lt;polys.<span class="built_in">size</span>();j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i==j) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">const</span> <span class="keyword">auto</span> &amp;pj=polys[j];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">size_t</span> k=<span class="number">0</span>;k&lt;pj.p.<span class="built_in">size</span>();k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">const</span> Segment s=&#123;pj.p[k],pj.p[pj.<span class="built_in">nxt</span>(k)]&#125;;</span><br><span class="line">                <span class="keyword">if</span> (le.<span class="built_in">toleft</span>(s.a)==<span class="number">0</span> &amp;&amp; le.<span class="built_in">toleft</span>(s.b)==<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    evt.<span class="built_in">push_back</span>(&#123;s.a,<span class="number">0</span>&#125;);</span><br><span class="line">                    evt.<span class="built_in">push_back</span>(&#123;s.b,<span class="number">0</span>&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (s.<span class="built_in">is_inter</span>(le))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="type">const</span> Line ls&#123;s.a,s.b-s.a&#125;;</span><br><span class="line">                    <span class="type">const</span> Point u=le.<span class="built_in">inter</span>(ls);</span><br><span class="line">                    <span class="keyword">if</span> (le.<span class="built_in">toleft</span>(s.a)&lt;<span class="number">0</span> &amp;&amp; le.<span class="built_in">toleft</span>(s.b)&gt;=<span class="number">0</span>) evt.<span class="built_in">push_back</span>(&#123;u,<span class="number">-1</span>&#125;);</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (le.<span class="built_in">toleft</span>(s.a)&gt;=<span class="number">0</span> &amp;&amp; le.<span class="built_in">toleft</span>(s.b)&lt;<span class="number">0</span>) evt.<span class="built_in">push_back</span>(&#123;u,<span class="number">1</span>&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(evt.<span class="built_in">begin</span>(),evt.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">if</span> (e.a&gt;e.b) <span class="built_in">reverse</span>(evt.<span class="built_in">begin</span>(),evt.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i=<span class="number">0</span>;i&lt;evt.<span class="built_in">size</span>();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum+=evt[i].second;</span><br><span class="line">            <span class="type">const</span> Point u=evt[i].first,v=evt[i+<span class="number">1</span>].first;</span><br><span class="line">            <span class="keyword">if</span> (!(u==v) &amp;&amp; <span class="built_in">check</span>(u,e) &amp;&amp; <span class="built_in">check</span>(v,e)) segs[sum].<span class="built_in">push_back</span>(&#123;u,v&#125;);</span><br><span class="line">            <span class="keyword">if</span> (v==e.b) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i=<span class="number">0</span>;i&lt;polys.<span class="built_in">size</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span> &amp;pi=polys[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> k=<span class="number">0</span>;k&lt;pi.p.<span class="built_in">size</span>();k++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">const</span> Segment ei=&#123;pi.p[k],pi.p[pi.<span class="built_in">nxt</span>(k)]&#125;;</span><br><span class="line">            <span class="built_in">cut_edge</span>(ei,i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">long</span> <span class="type">double</span>&gt; <span class="title">ans</span><span class="params">(siz)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i=<span class="number">0</span>;i&lt;siz;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">double</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">sort</span>(segs[i].<span class="built_in">begin</span>(),segs[i].<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> j=<span class="number">0</span>;j&lt;segs[i].<span class="built_in">size</span>();j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (j&gt;<span class="number">0</span> &amp;&amp; segs[i][j]==segs[i][j<span class="number">-1</span>]) segs[i+(++cnt)].<span class="built_in">push_back</span>(segs[i][j]);</span><br><span class="line">            <span class="keyword">else</span> cnt=<span class="number">0</span>,sum+=segs[i][j].first^segs[i][j].second;</span><br><span class="line">        &#125;</span><br><span class="line">        ans[i]=sum/<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 圆面积并</span></span><br><span class="line"><span class="comment">// 轮廓积分，复杂度 O(n^2logn)</span></span><br><span class="line"><span class="comment">// ans[i] 表示被至少覆盖了 i+1 次的区域的面积</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">long</span> <span class="type">double</span>&gt; <span class="title">area_union</span><span class="params">(<span class="type">const</span> vector&lt;Circle&gt; &amp;circs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">size_t</span> siz=circs.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">using</span> <span class="type">arc_t</span>=tuple&lt;Point,<span class="type">long</span> <span class="type">double</span>,<span class="type">long</span> <span class="type">double</span>,<span class="type">long</span> <span class="type">double</span>&gt;;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">arc_t</span>&gt;&gt; <span class="built_in">arcs</span>(siz);</span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span> eq=[](<span class="type">const</span> <span class="type">arc_t</span> &amp;u,<span class="type">const</span> <span class="type">arc_t</span> &amp;v)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span> [u1,u2,u3,u4]=u;</span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span> [v1,v2,v3,v4]=v;</span><br><span class="line">        <span class="keyword">return</span> u1==v1 &amp;&amp; <span class="built_in">abs</span>(u2-v2)&lt;=eps &amp;&amp; <span class="built_in">abs</span>(u3-v3)&lt;=eps &amp;&amp; <span class="built_in">abs</span>(u4-v4)&lt;=eps;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> cut_circ=[&amp;](<span class="type">const</span> Circle &amp;ci,<span class="type">const</span> <span class="type">size_t</span> i)</span><br><span class="line">    &#123;</span><br><span class="line">        vector&lt;pair&lt;<span class="type">long</span> <span class="type">double</span>,<span class="type">int</span>&gt;&gt; evt;</span><br><span class="line">        evt.<span class="built_in">push_back</span>(&#123;-PI,<span class="number">0</span>&#125;); evt.<span class="built_in">push_back</span>(&#123;PI,<span class="number">0</span>&#125;);</span><br><span class="line">        <span class="type">int</span> init=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> j=<span class="number">0</span>;j&lt;circs.<span class="built_in">size</span>();j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i==j) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">const</span> Circle &amp;cj=circs[j];</span><br><span class="line">            <span class="keyword">if</span> (ci.r&lt;cj.r-eps &amp;&amp; ci.<span class="built_in">relation</span>(cj)&gt;=<span class="number">3</span>) init++;</span><br><span class="line">            <span class="type">const</span> <span class="keyword">auto</span> inters=ci.<span class="built_in">inter</span>(cj);</span><br><span class="line">            <span class="keyword">if</span> (inters.<span class="built_in">size</span>()==<span class="number">1</span>) evt.<span class="built_in">push_back</span>(&#123;<span class="built_in">atan2l</span>((inters[<span class="number">0</span>]-ci.c).y,(inters[<span class="number">0</span>]-ci.c).x),<span class="number">0</span>&#125;);</span><br><span class="line">            <span class="keyword">if</span> (inters.<span class="built_in">size</span>()==<span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">const</span> Point dl=inters[<span class="number">0</span>]-ci.c,dr=inters[<span class="number">1</span>]-ci.c;</span><br><span class="line">                <span class="type">long</span> <span class="type">double</span> argl=<span class="built_in">atan2l</span>(dl.y,dl.x),argr=<span class="built_in">atan2l</span>(dr.y,dr.x);</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">abs</span>(argl+PI)&lt;=eps) argl=PI;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">abs</span>(argr+PI)&lt;=eps) argr=PI;</span><br><span class="line">                <span class="keyword">if</span> (argl&gt;argr+eps)</span><br><span class="line">                &#123;</span><br><span class="line">                    evt.<span class="built_in">push_back</span>(&#123;argl,<span class="number">1</span>&#125;); evt.<span class="built_in">push_back</span>(&#123;PI,<span class="number">-1</span>&#125;);</span><br><span class="line">                    evt.<span class="built_in">push_back</span>(&#123;-PI,<span class="number">1</span>&#125;); evt.<span class="built_in">push_back</span>(&#123;argr,<span class="number">-1</span>&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    evt.<span class="built_in">push_back</span>(&#123;argl,<span class="number">1</span>&#125;);</span><br><span class="line">                    evt.<span class="built_in">push_back</span>(&#123;argr,<span class="number">-1</span>&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(evt.<span class="built_in">begin</span>(),evt.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> sum=init;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i=<span class="number">0</span>;i&lt;evt.<span class="built_in">size</span>();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum+=evt[i].second;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">abs</span>(evt[i].first-evt[i+<span class="number">1</span>].first)&gt;eps) arcs[sum].<span class="built_in">push_back</span>(&#123;ci.c,ci.r,evt[i].first,evt[i+<span class="number">1</span>].first&#125;);</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">abs</span>(evt[i+<span class="number">1</span>].first-PI)&lt;=eps) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span> oint=[](<span class="type">const</span> <span class="type">arc_t</span> &amp;arc)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span> [cc,cr,l,r]=arc;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">abs</span>(r-l-PI-PI)&lt;=eps) <span class="keyword">return</span> <span class="number">2.0l</span>*PI*cr*cr;</span><br><span class="line">        <span class="keyword">return</span> cr*cr*(r-l)+cc.x*cr*(<span class="built_in">sin</span>(r)-<span class="built_in">sin</span>(l))-cc.y*cr*(<span class="built_in">cos</span>(r)-<span class="built_in">cos</span>(l));</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i=<span class="number">0</span>;i&lt;circs.<span class="built_in">size</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">const</span> <span class="keyword">auto</span> &amp;ci=circs[i];</span><br><span class="line">        <span class="built_in">cut_circ</span>(ci,i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">long</span> <span class="type">double</span>&gt; <span class="title">ans</span><span class="params">(siz)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i=<span class="number">0</span>;i&lt;siz;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">double</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">sort</span>(arcs[i].<span class="built_in">begin</span>(),arcs[i].<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> j=<span class="number">0</span>;j&lt;arcs[i].<span class="built_in">size</span>();j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (j&gt;<span class="number">0</span> &amp;&amp; <span class="built_in">eq</span>(arcs[i][j],arcs[i][j<span class="number">-1</span>])) arcs[i+(++cnt)].<span class="built_in">push_back</span>(arcs[i][j]);</span><br><span class="line">            <span class="keyword">else</span> cnt=<span class="number">0</span>,sum+=<span class="built_in">oint</span>(arcs[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        ans[i]=sum/<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 计算几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>abc274.md</title>
      <link href="/2022/10/25/abc274-md/"/>
      <url>/2022/10/25/abc274-md/</url>
      
        <content type="html"><![CDATA[<h1 id="Atcoder-Beginner-Contest-274-C-E"><a href="#Atcoder-Beginner-Contest-274-C-E" class="headerlink" title="Atcoder Beginner Contest 274 ( C - E )"></a>Atcoder Beginner Contest 274 ( C - E )</h1><h2 id="C-Ameba"><a href="#C-Ameba" class="headerlink" title="C - Ameba"></a>C - Ameba</h2><p><strong>题目大意:</strong> 刚开始有一个生物序号为$1$，有$n$次记录，在第$i$次记录中第$a_i$个生物消失会生成第$2i$和$2i+1$个生物，问对于生物从$1$到$2N+1$他们距离$1$有多少代</p><p><strong>解题思路:</strong> 按照题意模拟即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i) cin &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> to1 = i * <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> to2 = i * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">dis[to1] = dis[to2] = dis[a[i]] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">2</span> * n + <span class="number">1</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; dis[i] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Robot-Arms-2"><a href="#D-Robot-Arms-2" class="headerlink" title="D - Robot Arms 2"></a>D - Robot Arms 2</h2><p><strong>题目大意:</strong> 给定一个长度为$n$的序列以及$x,y$,问是否存在$n + 1$个点$p_1,p_2,…,p_n,p_{n + 1}$在二维坐标系中满足$p_1 &#x3D; (0,0),p_2 &#x3D; (a_1,0),p_{n + 1} &#x3D; (x,y)$相邻两个点距离是$a_i$并且是$90$度</p><p><strong>解题思路:</strong> 分析后发现实际上$x$和$y$是相互不干扰的，那么我们可以分开来处理，注意到$a$的范围很小那么我们可以枚举遍历到的数值是多少</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">chkmin</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">chkmax</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="comment">// typedef long long ll;</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">4e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n,x,y;</span><br><span class="line"><span class="type">int</span> a[maxn],dis[maxn];</span><br><span class="line"><span class="type">int</span> dp[<span class="number">2</span>][maxn],pre[<span class="number">2</span>][maxn];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i) cin &gt;&gt; a[i];</span><br><span class="line"><span class="type">int</span> midp = <span class="number">10000</span>;</span><br><span class="line">pre[<span class="number">1</span>][midp + a[<span class="number">1</span>]] = <span class="number">1</span>;</span><br><span class="line">pre[<span class="number">0</span>][midp] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> now = i &amp; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt;= <span class="number">20000</span>;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(pre[now][j])</span><br><span class="line">&#123;</span><br><span class="line">dp[now][j + a[i]] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(j - a[i] &gt;= <span class="number">0</span>) dp[now][j - a[i]] = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;?? now-&gt; &quot; &lt;&lt; now &lt;&lt; &quot; &quot; &lt;&lt; j &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt;= <span class="number">20000</span>;++j) pre[now][j] = dp[now][j],dp[now][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(pre[<span class="number">1</span>][midp + x] &amp;&amp; pre[<span class="number">0</span>][midp + y]) cout &lt;&lt; <span class="string">&quot;Yes\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;No\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Booster"><a href="#E-Booster" class="headerlink" title="E - Booster"></a>E - Booster</h2><p><strong>题目大意:</strong> 给定一个二维平面其中有$n$个城镇和$m$个加速点$(1 \leq n + m \leq 17)$，初始点在$(0,0)$，问必须经理过所有城镇点需要的时间最短是多少，没必要经过所有加速点但是我们每经过一次加速点我们当前的速度就会翻倍</p><p><strong>解题思路:</strong> 看到题目数据的时候我们就会自然而然的考虑到状态压缩，如何存在当前的状态呢？我们可以用$dp[i][j]$来表示$i$的二进制位状态表示经过了哪些点，然后末尾点是$j$</p><p>那么我们思考转移的过程，假设我们当前位置$j$存在$1$,并且当前$k$也是$1$</p><p>那么我们可以从$k$点转移到$j$点，那么相对应的方程就是$dp[i][j] &#x3D; min(dp[i][j],dp[i - (1 &lt;&lt; j)][k] + d &#x2F; v)$</p><p>然后我们可以在最后枚举从哪个点最后来以及最后的状态获得答案</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">chkmin</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">chkmax</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="type">double</span> dp[<span class="number">1</span> &lt;&lt; <span class="number">18</span>][<span class="number">20</span>];</span><br><span class="line">pair&lt;<span class="type">double</span>,<span class="type">double</span>&gt; p[<span class="number">20</span>];</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">getdis</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sqrt</span>((p[i].first - p[j].first) * (p[i].first - p[j].first) + (p[i].second - p[j].second) * (p[i].second - p[j].second));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">countx</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> now = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = n;i &lt; n + m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(x &gt;&gt; i &amp; <span class="number">1</span>) now++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> now;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">p[<span class="number">0</span>] = &#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">n++;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; n + m;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; p[i].first &gt;&gt; p[i].second;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; (<span class="number">1</span> &lt;&lt; (n + m));++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; n + m;++j) dp[i][j] = <span class="number">1e18</span>;</span><br><span class="line">&#125;</span><br><span class="line">dp[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">cout &lt;&lt; fixed &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; (<span class="number">1</span> &lt;&lt; (n + m));++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; (n + m);++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i &gt;&gt; j &amp; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>;k &lt; (n + m);++k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((i - (<span class="number">1</span> &lt;&lt; j)) &gt;&gt; k &amp; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">double</span> d = <span class="built_in">getdis</span>(j,k);</span><br><span class="line"><span class="type">int</span> nowcnt = <span class="built_in">countx</span>(i - (<span class="number">1</span> &lt;&lt; j));</span><br><span class="line"><span class="type">int</span> v = (<span class="number">1</span> &lt;&lt; nowcnt);</span><br><span class="line">dp[i][j] = <span class="built_in">min</span>(dp[i][j],dp[i - (<span class="number">1</span> &lt;&lt; j)][k] + d / (<span class="number">1.0</span> * v));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">double</span> ans = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = (<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>;i &lt; (<span class="number">1</span> &lt;&lt; (n + m));i += (<span class="number">1</span> &lt;&lt; n))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; n + m;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">double</span> d = <span class="built_in">getdis</span>(<span class="number">0</span>,j);</span><br><span class="line"><span class="type">int</span> v = <span class="number">1</span> &lt;&lt; <span class="built_in">countx</span>(i);</span><br><span class="line">ans = <span class="built_in">min</span>(ans,dp[i][j] + d / (<span class="number">1.0</span> * v));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; fixed &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">10</span>) &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> abc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 825 A-C1 D</title>
      <link href="/2022/10/11/cf825/"/>
      <url>/2022/10/11/cf825/</url>
      
        <content type="html"><![CDATA[<h1 id="Codeforces-Round-825-Div-2-A-C1-D"><a href="#Codeforces-Round-825-Div-2-A-C1-D" class="headerlink" title="Codeforces Round #825 (Div. 2) A-C1 D"></a>Codeforces Round #825 (Div. 2) A-C1 D</h1><h2 id="A-Make-A-Equal-to-B"><a href="#A-Make-A-Equal-to-B" class="headerlink" title="A. Make A Equal to B"></a>A. Make A Equal to B</h2><p><strong>题目大意:</strong>  给定两个$01$序列$a$,$b$长度为$n(1\leq n\leq 1e2)$，现在有两种操作，第一种操作是选择一个位置进行反转，第二个操作是任意排序$a$序列，问最少需要几次操作能让序列$a$等于序列$b$</p><p><strong>解题思路:</strong> 首先我们先思考一下，我们刚开始一定要让序列$a$和$b$中的$01$个数相同，然后在这个前提下，如果两个序列在增加$1$的过程中相同了，就不进行二操作，否则就进行二操作。如何判断两个序列是否在过程中就相同了呢？我们可以考虑将序列中的$0$变成$1$，然后看哪个序列中原本的$1$多，如果$b$中多就变$a$，$a$中多实际上就是变$b$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line">cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> na,nb;</span><br><span class="line">na = nb = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">if</span>(a[i]) na++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; b[i];</span><br><span class="line"><span class="keyword">if</span>(b[i]) nb++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> f = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> ck = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(na &gt; nb) ck = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(na &lt; nb)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!a[i]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(a[i] != b[i]) f = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!b[i]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(a[i] != b[i]) f = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="built_in">abs</span>(na - nb) + (<span class="number">1</span> - f) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Playing-with-GCD"><a href="#B-Playing-with-GCD" class="headerlink" title="B. Playing with GCD"></a>B. Playing with GCD</h2><p><strong>题目大意:</strong> 给定一个长度为$n(1\leq n \leq 2e5)$的序列，问是否存在一个长度为$n + 1$的序列$b$，满足$a_i &#x3D; gcd(b_i,b_{i + 1})$</p><p><strong>解题思路:</strong> 观察样例可得我们可以对原序列中的$a_{i - 1}$,$a_i$和$a_{i + 1}$进行分析，这三个数字分别由$b_{i - 1}$,$b_i$,$b_{i + 1}$,$b_{i + 2}$</p><p>考虑$b_i$和$b_{i + 1}$实际上还在$a_{i - 1}$和$a_{i + 1}$中，我们考虑$gcd$的性质实际上是去求若干个数字的质因子取$min$</p><p>那么我们可以对$a_{i- 1}$和$a_{i + 1}$取$gcd$，如果$a_i$不能和他们的$gcd$取余获得$0$的话，那么实际上就是不可以的，说明还有其他的质因子存在</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line">cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i) cin &gt;&gt; a[i];</span><br><span class="line"><span class="type">int</span> f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>;i &lt;= n - <span class="number">1</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> gd = __gcd(a[i - <span class="number">1</span>],a[i + <span class="number">1</span>]);</span><br><span class="line"><span class="keyword">if</span>(a[i] % gd) f = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(f) cout &lt;&lt; <span class="string">&quot;YES\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;NO\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C1-Good-Subarrays-Easy-Version"><a href="#C1-Good-Subarrays-Easy-Version" class="headerlink" title="C1. Good Subarrays (Easy Version)"></a>C1. Good Subarrays (Easy Version)</h2><p><strong>题目大意:</strong> 给定一个长度为$n(1\leq n \leq 2e5)$的序列，找出这个序列中有多少个序列满足好序列，好序列的要求是对于一段序列第$i$个元素大于等于$i$</p><p><strong>解题思路:</strong> 固定左端点取计算右端点在哪里。我们可以发现这样一件事情，如果我在当前这个位置$i$右端点到达$j$,那么我到$i + 1$的话，我可以继续从$j$往右边移动，满足双指针的性质，直接写就可以。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line">cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i) cin &gt;&gt; a[i];</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> j = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> now = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j &lt; i)</span><br><span class="line">&#123;</span><br><span class="line">j = i;</span><br><span class="line">now = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(a[j] &gt;= now &amp;&amp; j &lt;= n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;i -&gt; &quot;&lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; j &lt;&lt; &quot; &quot; &lt;&lt; now&lt;&lt; &quot;\n&quot;;</span></span><br><span class="line">j++;</span><br><span class="line">now++;</span><br><span class="line">&#125;</span><br><span class="line">j--,now--;</span><br><span class="line"><span class="type">int</span> num = j - i + <span class="number">1</span>;</span><br><span class="line">ans += num;</span><br><span class="line">now--;</span><br><span class="line"><span class="comment">// cout &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; j &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="D-Equal-Binary-Subsequences"><a href="#D-Equal-Binary-Subsequences" class="headerlink" title="D. Equal Binary Subsequences"></a>D. Equal Binary Subsequences</h2><p><strong>题目大意:</strong> 给定一个长度为$2n(1\leq n \leq 1e5)$的$01$串，可以进行以下的操作一次，选择一个子序列，并且把这个子序列中的数字往前移动一个，如果是第一个就移动到最后一个，问是否能够将这个$01$串分割成两个子序列，使得这两个子序列相同</p><p><strong>解题思路:</strong> 首先我们先考虑无法构成的情况，如果$0$的个数或者$1$的个数是奇数，那么这个序列肯定就无法构成</p><p>做一个大胆的猜想，假设目前剩下的情况下所有情况都是有解的，那么剩下的串可能是由若干个$00$ $01$ $10$ $11$组成的</p><p>我们从前往后对于一个子序列来说$00$和$11$肯定是可以直接放进去的，那么对于$01$和$10$呢？</p><p>我们可以考虑把他们放到操作里面去变换，那么实际上我们只需要把奇数位置上面的$1$放到偶数位置上去，把偶数位置上面的$1$放到奇数位置上去</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line">cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">cin &gt;&gt; str;</span><br><span class="line">str = <span class="string">&quot; &quot;</span> + str;</span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">n &lt;&lt;= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line">num += (str[i] == <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(num &amp; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; pos;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i += <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(str[i] == str[i + <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">pos.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; pos.<span class="built_in">size</span>();++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> now = pos[i];</span><br><span class="line"><span class="keyword">if</span>((i &amp; <span class="number">1</span>) == str[now] - <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans.<span class="built_in">push_back</span>(now);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> ans.<span class="built_in">push_back</span>(now + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> to:ans)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; to &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i += <span class="number">2</span>) cout &lt;&lt; i &lt;&lt; <span class="string">&quot; \n&quot;</span>[i == n - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 思维 </tag>
            
            <tag> cf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DailyTraing</title>
      <link href="/2022/10/09/DailyTraing/"/>
      <url>/2022/10/09/DailyTraing/</url>
      
        <content type="html"><![CDATA[<h1 id="每日思维题"><a href="#每日思维题" class="headerlink" title="每日思维题"></a>每日思维题</h1><h2 id="Graph-and-String"><a href="#Graph-and-String" class="headerlink" title="Graph and String"></a>Graph and String</h2><p><a href="https://codeforces.com/contest/623/problem/A">Problem - A - Codeforces</a></p><p>题目大意：</p><p>给出一个由字符串s<em>s</em>建图的过程。</p><ul><li>字符仅有$a,b,c$三种，建出的图中第$i$个顶点表示原来的第$i$个字符。</li><li>$i$与$j$有连边，当且仅当$s[i]$与$s[j]$相同或$s[i]$和$s[j]$是相邻的字符（$a$与$b$相邻，$b$与$c$相邻）</li></ul><p>现给出由某个字符串$s$建出的图，构造一个字符串使其符合上面的要求要求，或者回答不存在这样的字符串。</p><p>解题思路：首先分析题目可以发现这样一件事情，对于出现的$b$来说他是需要连接所有点的，$a$只需要连接相邻的$a$以及$b$即可，$c$的话和$a$同理，那么其实这样子的话我们可以在刚开始的时候处理以下所有和其他点连接的点，赋值为$b$，然后我们可以考虑一件事情，对于$a$和$c$来说相对应的边是不相连的，那么对于原图的补图来说一定是一张二分图，然后我们可以判断二分图并且染色之后再去根据颜色判断，如果两个相邻的边是$a$以及$c$那么就是不行的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">5e2</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> mp[maxn][maxn],n,m;</span><br><span class="line"><span class="type">int</span> deg[maxn],col[maxn];</span><br><span class="line"><span class="type">char</span> ans[maxn];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; edge[maxn];</span><br><span class="line"><span class="type">int</span> flag = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> s,<span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> to:edge[s])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(to == fa) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(col[to] == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">col[to] = col[s] ^ <span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs</span>(to,s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(col[to] == col[s]) flag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i) mp[i][i] = <span class="number">1</span>,col[i] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>,u,v;i &lt;= m;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">mp[u][v] = mp[v][u] = <span class="number">1</span>;</span><br><span class="line">deg[u]++;</span><br><span class="line">deg[v]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>;j &lt;= n;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(mp[i][j]) <span class="keyword">continue</span>;</span><br><span class="line">edge[i].<span class="built_in">emplace_back</span>(j);</span><br><span class="line">edge[j].<span class="built_in">emplace_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(deg[i] == n - <span class="number">1</span>) ans[i] = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(col[i] == <span class="number">-1</span>) col[i] = <span class="number">0</span>,<span class="built_in">dfs</span>(i,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!flag)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;No\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>;j &lt;= n;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(mp[i][j] &amp;&amp; col[i] + col[j] == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;No\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Yes\n&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(deg[i] == n - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;b&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(col[i] == <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;c&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Carousel"><a href="#Carousel" class="headerlink" title="Carousel"></a>Carousel</h2><p><a href="https://www.luogu.com.cn/problem/CF1328D">CF1328D Carousel - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a> </p><p><strong>题目大意:</strong> 有$q$组询问,每组询问如下:</p><p>已知一个有$n(3\le n\le 2<em>10^5)$个点的*<em>环</em></em>,点$i$的类型为$a_i$,现在需要给每个点进行染色,要求<strong>相邻</strong>不同类型的点的颜色不同且所用颜色数最小.输出颜色数及一种染色方案即可.(颜色从1开始)</p><p>注意: $n ≤2*10^5$</p><p><strong>解题思路:</strong></p><p>其实很容易想到环的颜色种类不多，至多只有$3$</p><p>那么我们可以进行这样子的讨论，首先我们可以把这个环分成奇环和偶环，对于偶环来说他有比较好的性质我们直接赋值$1$ $2$交替即可</p><p>那奇环呢？分析样例我们可以得出对于两两之间不一样的都是$3$种，反之就是$2$种</p><p>同时我们需要特判以下情况，在这个序列中只存在$1$种或者$2$种数字的情况</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[maxn],num[maxn],n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line">cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">num[a[i]]++;</span><br><span class="line"><span class="keyword">if</span>(num[a[i]] == <span class="number">1</span>) cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cnt == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1\n&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1 &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(cnt == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] == a[<span class="number">1</span>]) cout &lt;&lt; <span class="string">&quot;1 &quot;</span>;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;2 &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; (i &amp; <span class="number">1</span>)  + <span class="number">1</span>&lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> flag = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n - <span class="number">1</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] == a[i + <span class="number">1</span>]) flag = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a[n] == a[<span class="number">1</span>]) flag = n;</span><br><span class="line"><span class="keyword">if</span>(flag == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;3\n&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n - <span class="number">1</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; (i &amp; <span class="number">1</span>) + <span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span>; </span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;3\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;2\n&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= flag;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i % <span class="number">2</span>) cout &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = flag + <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i % <span class="number">2</span>) cout &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i) num[a[i]] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="What-a-Colorful-Wall"><a href="#What-a-Colorful-Wall" class="headerlink" title="What a Colorful Wall"></a>What a Colorful Wall</h2><p><a href="https://codeforces.com/group/MKpYqfAQQQ/contest/393177/problem/F">Problem - F - Codeforces</a></p><p><strong>题目大意:</strong> 给定$n$个矩形，每个矩形有一定的颜色，矩形之间可以相互覆盖，问在$n$个矩形覆盖之后整个坐标系中最多存在着多少种颜色</p><p><strong>解题思路:</strong> 首先先思考这样子的一件事情，因为矩形具有覆盖性，因此我们可以从后往前去放置矩形，因为后面的矩形总是不会被前面的矩形所覆盖，首先对于相同的$x$坐标的一个区域来说，如果一个矩形的高度小于另外一个的高度并且它的，那么它在这个$x$轴影响的$y$上面是被覆盖的，那么对于其他的$x$呢？我们可以利用一个类似于扫描线的做法，遍历相对应的$x$轴遍历过去即可，然后用并查集维护相对应的$y$是否已经是在同一条线上面</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">4e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> fa[maxn * <span class="number">2</span>],n,ans[maxn];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; posx,posy;</span><br><span class="line">vector&lt;array&lt;<span class="type">int</span>,5&gt;&gt; pos;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt;= <span class="number">8010</span>;++i) fa[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getf</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x == fa[x]) <span class="keyword">return</span> x;</span><br><span class="line">fa[x] = <span class="built_in">getf</span>(fa[x]);</span><br><span class="line"><span class="keyword">return</span> fa[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x = <span class="built_in">getf</span>(x);</span><br><span class="line">y = <span class="built_in">getf</span>(y);</span><br><span class="line">fa[x] = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getx</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> px = <span class="built_in">lower_bound</span>(posx.<span class="built_in">begin</span>(),posx.<span class="built_in">end</span>(),x) - posx.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">return</span> px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gety</span><span class="params">(<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> py = <span class="built_in">lower_bound</span>(posy.<span class="built_in">begin</span>(),posy.<span class="built_in">end</span>(),y) - posy.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">return</span> py;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>,x1,y1,x2,y2,col;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2 &gt;&gt; col;</span><br><span class="line">posx.<span class="built_in">push_back</span>(x1),posx.<span class="built_in">push_back</span>(x2);</span><br><span class="line">posy.<span class="built_in">push_back</span>(y1),posy.<span class="built_in">push_back</span>(y2);</span><br><span class="line">pos.<span class="built_in">push_back</span>(&#123;x1,y1,x2,y2,col&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(posx.<span class="built_in">begin</span>(),posx.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">sort</span>(posy.<span class="built_in">begin</span>(),posy.<span class="built_in">end</span>());</span><br><span class="line">posx.<span class="built_in">erase</span>(<span class="built_in">unique</span>(posx.<span class="built_in">begin</span>(),posx.<span class="built_in">end</span>()),posx.<span class="built_in">end</span>());</span><br><span class="line">posy.<span class="built_in">erase</span>(<span class="built_in">unique</span>(posy.<span class="built_in">begin</span>(),posy.<span class="built_in">end</span>()),posy.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;now:pos)</span><br><span class="line">&#123;</span><br><span class="line">now[<span class="number">0</span>] = <span class="built_in">getx</span>(now[<span class="number">0</span>]),now[<span class="number">2</span>] = <span class="built_in">getx</span>(now[<span class="number">2</span>]);</span><br><span class="line">now[<span class="number">1</span>] = <span class="built_in">gety</span>(now[<span class="number">1</span>]),now[<span class="number">3</span>] = <span class="built_in">gety</span>(now[<span class="number">3</span>]); </span><br><span class="line"><span class="comment">// cout &lt;&lt; now[0] &lt;&lt; &quot; &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> tot = posx.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt;= tot;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = n - <span class="number">1</span>;j &gt;= <span class="number">0</span>;--j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> now = pos[j];</span><br><span class="line"><span class="keyword">if</span>(now[<span class="number">0</span>] &lt;= i &amp;&amp; now[<span class="number">2</span>] &gt; i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ny = <span class="built_in">getf</span>(now[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">while</span>(ny &gt; now[<span class="number">3</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">merge</span>(ny,ny - <span class="number">1</span>);</span><br><span class="line">ans[now[<span class="number">4</span>]] = <span class="number">1</span>;</span><br><span class="line">ny = <span class="built_in">getf</span>(ny);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i) res += ans[i];</span><br><span class="line">cout &lt;&lt; res &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Chemical-table"><a href="#Chemical-table" class="headerlink" title="Chemical table"></a>Chemical table</h2><p><a href="https://codeforces.com/contest/1013/problem/D">Problem - D - Codeforces</a></p><p><strong>题意:</strong> 给定一个$n * m$的棋盘，给定$q$个元素，这些元素在棋盘的上面，如果对于一个$2 * 2$的矩形来说，这个矩形中的三个值都存在但是还有一个值不存在，那么这个值也会自动生成，问最多要加多少个值才能使得这个棋盘最后是满的</p><p><strong>解题思路:</strong> 首先我们先分析最后的棋盘的状态，最后棋盘的状态是一个满的形式，对于棋盘来说我们可以把它看成一个二分图的形式，左边是列右边是行，然后我们去分析最终态，最终态是行和列的点都在一个连通块中；然后我们分析题目给定的条件，每次对于一个行和列连边，然后对于生成那个新点来说，实际上并不会影响当前连通块的情况，那么我们只需要连接所有的边，然后找出连通块的数量是多少，最后再加上相对应的边即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">4e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> f[maxn],n,m,q;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getf</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x == f[x] ? x : f[x] = <span class="built_in">getf</span>(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x = <span class="built_in">getf</span>(x);</span><br><span class="line">y = <span class="built_in">getf</span>(y);</span><br><span class="line">f[x] = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n + m;++i)</span><br><span class="line">&#123;</span><br><span class="line">f[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>,x,y;i &lt;= q;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="built_in">merge</span>(x,y + n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n + m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">getf</span>(i) == i)</span><br><span class="line">&#123;</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans - <span class="number">1</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Cross-Swapping"><a href="#Cross-Swapping" class="headerlink" title="Cross Swapping"></a>Cross Swapping</h2><p><a href="https://codeforces.com/contest/1713/problem/E">Problem - E - Codeforces</a></p><p><strong>题意:</strong> 给定一个$n * n$的矩阵，可以选定一个$k$，交换所有的$mp[i][k]$和$mp[k][i]$，可以进行这样子的操作若干次，问在进行操作<br>之后这个矩阵字典序最小是什么样子的<br><strong>解题思路:</strong> 模拟每一次交换的过程，我们发现实际上$mp[i][j]$只会和$mp[j][i]$交换，既然这样那么实际上我们就很好去操作了<br>如果我们要交换$mp[i][j]$和$mp[j][i]$，我们只需要选定$k &#x3D; i$ $or$ $k &#x3D; j$,如果不交换我们可以两个都不选或者两个都选偶数次<br>然后的话我们可以用并查集来维护相对应的关系，用类似于敌人朋友的并查集来维护这个东西。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">2e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> mp[maxn][maxn],n;</span><br><span class="line"><span class="type">int</span> f[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getf</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x == f[x] ? x : f[x] = <span class="built_in">getf</span>(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x = <span class="built_in">getf</span>(x);</span><br><span class="line">y = <span class="built_in">getf</span>(y);</span><br><span class="line">f[x] = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line">cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;++j)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; mp[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">2</span> * n;++i) f[i] = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = i;j &lt;= n;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(mp[i][j] &lt; mp[j][i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//not change</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">getf</span>(i) == <span class="built_in">getf</span>(j + n)) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">merge</span>(i,j),<span class="built_in">merge</span>(i + n,j + n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(mp[i][j] &gt; mp[j][i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//change</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">getf</span>(i) == <span class="built_in">getf</span>(j)) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">merge</span>(i,j + n),<span class="built_in">merge</span>(i + n,j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>;k &lt;= n;++k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">getf</span>(k) &gt; n) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">swap</span>(mp[i][k],mp[k][i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;++j)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; mp[i][j] &lt;&lt; <span class="string">&quot; \n&quot;</span>[j == n];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Mikasa"><a href="#Mikasa" class="headerlink" title="Mikasa"></a>Mikasa</h2><p><a href="https://codeforces.com/contest/1554/problem/C">Problem - C - Codeforces</a></p><p><strong>题意:</strong> 给定$T$组数据，每组数据有一个$n$和$m$,给定一个序列从$n \bigoplus 0,n \bigoplus 1,…,n \bigoplus m$问这个序列中没有出现过的最小数字是多少</p><p><strong>解题思路:</strong> 考虑再这个序列中出现过的数字$k$,那么存在$x$使得式子$n \bigoplus x &#x3D; k,x ∈ [0,m]$成立,那么对于上面的式子其实可以等价于$n \bigoplus k &#x3D; x, 0 \leq n \bigoplus k \leq m$，那么我们要求的答案也就是去找一个最小的$k$使得$n \bigoplus k \geq m + 1$，那么这样子的话我们就可以进行按位考虑，假设$p &#x3D; m + 1$,我们从高位开始考虑，如果这个位置上面$n_i &#x3D; 1,p_i &#x3D; 0$,那么直接break掉，如果$n_i &#x3D; 0,p_i &#x3D; 1$,则需要加上这一位的贡献</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line">cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="type">int</span> p = m + <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">30</span>;i &gt;= <span class="number">0</span>;--i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ni = (n &gt;&gt; i &amp; <span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> pi = (p &gt;&gt; i &amp; <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(ni == <span class="number">1</span> &amp;&amp; pi == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span>(ni == <span class="number">0</span> &amp;&amp; pi == <span class="number">1</span>) ans += (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Count-Triangles"><a href="#Count-Triangles" class="headerlink" title="Count Triangles"></a>Count Triangles</h2><p><a href="https://codeforces.com/problemset/problem/1355/C">Problem - 1355C - Codeforces</a></p><p><strong>题意:</strong> 给定四个数字$A,B,C,D$使得三角形的三个边$a,b,c$分别满足$A \leq a \leq B, B\leq b \leq C,C \leq c \leq D$,问这样子的三元组$a,b,c$有多少</p><p><strong>解题思路:</strong> 其实拿到题目的时候我们可以直接考虑枚举，但是直接分别枚举$a,b$是否在区间里面时间肯定是有点问题的，但是既然是三角形我们其实如果知道$a + b$是多少我们就能找到对应的第三条边是多少，既然这样的话那么我们只需要枚举$a + b$中有多少个就可以了，然后通过差分数组去维护相对应的数量，那么对应的$a + b$在数据范围中对应的第三条边可能是啥呢？其实是在一个范围中，我们在$a + b - C$和$D + C - 1$中取小的就可以了，当然需要特判一下$a + b - C$小于$0$的情况</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; pa,pb,pc;</span><br><span class="line"><span class="type">int</span> A,B,C,D;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">2e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> sum[maxn];</span><br><span class="line"><span class="function"><span class="type">signed</span>  <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin &gt;&gt; A &gt;&gt; B &gt;&gt; C &gt;&gt; D;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = A;i &lt;= B;++i) sum[i + B]++,sum[i + C + <span class="number">1</span>]--;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">3</span> * D;++i) sum[i] += sum[i - <span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">3</span> * D;++i)</span><br><span class="line">&#123;</span><br><span class="line">ans += sum[i] * <span class="built_in">max</span>(<span class="number">0ll</span>,<span class="built_in">min</span>(i - C,D - C + <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Integers-Have-Friends"><a href="#Integers-Have-Friends" class="headerlink" title="Integers Have Friends"></a>Integers Have Friends</h2><p><a href="https://codeforces.com/problemset/problem/1548/B">Problem - 1548B - Codeforces</a></p><p><strong>题意:</strong> 给定一个长度为$n$的序列，序列中每个元素的数值各不相同，找一个最长的子序列使得这个子序列中$mod $ $m$都是相同的数字</p><p><strong>解题思路:</strong> 因为题目中需要找到$a[i]$  $mod$ $m$ $&#x3D;$ $a[j]$ $mod$ $m$,那么对于这样子的式子我们可以先进行一个化简，那么就是$(a[i] - a[j])  $ $ mod $</p><p> $m &#x3D; 0$,然后我们可以对这个序列进行一个处理，处理之后二分找最长的即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[maxn],n;</span><br><span class="line"><span class="type">int</span> b[maxn],tree[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r)</span><br><span class="line">&#123;</span><br><span class="line">tree[k] = b[l];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(k &lt;&lt; <span class="number">1</span>,l,mid);</span><br><span class="line"><span class="built_in">build</span>(k &lt;&lt; <span class="number">1</span> | <span class="number">1</span>,mid + <span class="number">1</span>,r);</span><br><span class="line">tree[k] = __gcd(tree[k &lt;&lt; <span class="number">1</span>],tree[k &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> lx,<span class="type">int</span> rx)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == lx &amp;&amp; r == rx)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> tree[k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(rx &lt;= mid) ans = __gcd(ans,<span class="built_in">query</span>(k &lt;&lt; <span class="number">1</span>,l,mid,lx,rx));</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(lx &gt; mid) ans = __gcd(ans,<span class="built_in">query</span>(k &lt;&lt; <span class="number">1</span> | <span class="number">1</span>,mid + <span class="number">1</span>,r,lx,rx));</span><br><span class="line"><span class="keyword">else</span> ans =__gcd(ans,__gcd(<span class="built_in">query</span>(k &lt;&lt; <span class="number">1</span>,l,mid,lx,mid),<span class="built_in">query</span>(k &lt;&lt; <span class="number">1</span> | <span class="number">1</span>,mid + <span class="number">1</span>,r,mid + <span class="number">1</span>,rx)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i + x - <span class="number">1</span> &gt; n) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">abs</span>(<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,i + <span class="number">1</span>,i + x - <span class="number">1</span>)) != <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line">cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line">b[i] = a[i] - a[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"><span class="type">int</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> L = <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> R = n;</span><br><span class="line"><span class="keyword">while</span>(L &lt;= R)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> mid = (L + R) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">check</span>(mid))</span><br><span class="line">&#123;</span><br><span class="line">L = mid + <span class="number">1</span>;</span><br><span class="line">ans = <span class="built_in">max</span>(ans,mid);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">R = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans&lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Distance-in-Tree"><a href="#Distance-in-Tree" class="headerlink" title="Distance in Tree"></a>Distance in Tree</h2><p><a href="https://codeforces.com/contest/161/problem/D">Problem - D - Codeforces</a></p><p><strong>题意:</strong> 给定一棵$n$个结点的树，需要找出这个树上面距离严格为$k$的点对有多少个<br><strong>解题思路:</strong> 拿到题目之后看$k$的范围实际上不大，有$500$左右，那么其实$nk$时间复杂度的算法是可以过的<br>那么接下来去思考如何用$nk$的时间复杂度去求<br>那么我们可以考虑这样子的一件事情，假设我们已经知道当前这里的一个点距离它距离为$x$的点都已知道<br>那么对于答案的贡献实际上可以是$ans +&#x3D; dp[now][i] * dp[to][k - i - 1]$<br>然后我们再更新相对应的数量即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">5e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> dp[maxn][<span class="number">520</span>];</span><br><span class="line"><span class="type">int</span> n,ans,k;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; edge[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> s,<span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dp[s][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> to:edge[s])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(to == fa) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs</span>(to,s);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; k;++i) ans += dp[s][i] * dp[to][k - i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; k;++i) dp[s][i + <span class="number">1</span>] += dp[to][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>,u,v;i &lt;= n - <span class="number">1</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">edge[u].<span class="built_in">emplace_back</span>(v);</span><br><span class="line">edge[v].<span class="built_in">emplace_back</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="The-Sports-Festival"><a href="#The-Sports-Festival" class="headerlink" title="The Sports Festival"></a>The Sports Festival</h2><p><a href="https://codeforces.com/problemset/problem/1509/C">Problem - 1509C - Codeforces</a></p><h2 id="Three-Bags"><a href="#Three-Bags" class="headerlink" title="Three Bags"></a>Three Bags</h2><p><a href="https://codeforces.com/problemset/problem/1467/C">Problem - 1467C - Codeforces</a></p><p><strong>题目大意:</strong> 给定$3$个集合，可以选定任意两个集合中的元素$a,b$,移走$b$并且让$a$变成$a - b$</p><p>问最后剩下的元素最大值是多少</p><p><strong>解题思路:</strong> 首先考虑如果在没有集合限制的情况下，其实我们进行这样子的操作就会使得一个数字没有取到，那么其实对应到集合来说，就是两个不同集合的数字的最小值没有取到是最优的；还有一种取法，就是另外两个集合全部取完，还有一个集合全部不取</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n,m,k;</span><br><span class="line"><span class="type">int</span> sum;</span><br><span class="line"><span class="type">int</span> a[maxn],b[maxn],c[maxn],sa,sb,sc;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line"><span class="type">int</span> ma,mb,mc;</span><br><span class="line">ma = mb = mc = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">sum += a[i];</span><br><span class="line">sa += a[i];</span><br><span class="line">ma = <span class="built_in">min</span>(ma,a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= m;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; b[i];</span><br><span class="line">sum += b[i];</span><br><span class="line">sb += b[i];</span><br><span class="line">mb = <span class="built_in">min</span>(mb,b[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= k;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; c[i];</span><br><span class="line">sum += c[i];</span><br><span class="line">sc += c[i];</span><br><span class="line">mc = <span class="built_in">min</span>(mc,c[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans = <span class="built_in">max</span>(&#123;sum - <span class="number">2</span> * (ma + mb),sum - <span class="number">2</span> * (mb + mc),sum - <span class="number">2</span> * (mc + ma),sum - <span class="number">2</span> * sa,sum - <span class="number">2</span> * sb,sum - <span class="number">2</span> * sc&#125;);</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Dr-Evil-Underscores"><a href="#Dr-Evil-Underscores" class="headerlink" title="Dr. Evil Underscores"></a>Dr. Evil Underscores</h2><p><a href="https://codeforces.com/contest/1285/problem/D">Problem - D - Codeforces</a></p><p><strong>题意:</strong> 给定$n$个数字，需要找到一个数字$x$使得这些数字$\bigoplus x$的最大值最小</p><p><strong>解题思路:</strong> 拿到题目之后我们可以想到拆位去思考，首先我们考虑这样子的一件事情，对于高位来说肯定是能消掉尽可能消掉，不能消掉再看接下来这个高位所带来的影响，然后对于一位来说，如果这一位在所有数字上面都是相同的，那么其实它就可以最后消掉；如果有存在不相同的，对于最终答案来说这一位肯定是取$1$的，但是对于后面的位数还是不确定什么是更优的，因此还是需要找下去</p><p>所以我们可以建立一棵$tire$树，在$tire$树上面跑$dfs$即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">2e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> tire[maxn][<span class="number">2</span>],cnt,n;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> root = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">30</span>;i &gt;= <span class="number">0</span>;--i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> id = (x &gt;&gt; i &amp; <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(!tire[root][id]) tire[root][id] = ++cnt;</span><br><span class="line">root = tire[root][id];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> pos,<span class="type">int</span> now)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(now &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(tire[pos][<span class="number">0</span>] &amp;&amp; tire[pos][<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">ans += (<span class="number">1</span> &lt;&lt; now);</span><br><span class="line">ans += <span class="built_in">min</span>(<span class="built_in">dfs</span>(tire[pos][<span class="number">0</span>],now - <span class="number">1</span>),<span class="built_in">dfs</span>(tire[pos][<span class="number">1</span>],now - <span class="number">1</span>)); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(tire[pos][<span class="number">0</span>])</span><br><span class="line">&#123;</span><br><span class="line">ans += <span class="built_in">dfs</span>(tire[pos][<span class="number">0</span>],now - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(tire[pos][<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">ans += <span class="built_in">dfs</span>(tire[pos][<span class="number">1</span>],now - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>,x;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line"><span class="built_in">insert</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">30</span>) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="New-Year’s-Problem"><a href="#New-Year’s-Problem" class="headerlink" title="New Year’s Problem"></a>New Year’s Problem</h2><p><a href="https://codeforces.com/contest/1619/problem/D">Problem - D - Codeforces</a></p><p><strong>题目大意:</strong> 给定$m$个商店，有$n$个人，最多可以在$n - 1$个商店中买东西，第$i$个人收到第$j$个物品的数值是$A{i,j}$</p><p>问如何选择能够让所有人的最小开心值最高</p><p><strong>解题思路:</strong> 其实题目有两个$trick$点，一个是最小的开心值最大，对于这一个点我们可以使用二分来解决，还有一个就是$n - 1$个商店，那么对于$n - 1$来说我们可以思考的一个点也就是鸽巢原理。那么我们在写二分$check$的时候可以这样子，因为我们是选定$n - 1$个，如果对于当前选定的$x$来说，存在对应的人的最大值没有，那么就直接返回$0$，然后对于第二个部分的话我们可以考虑这样子的一个东西，至少要有一个商店带来两个人的贡献，否则就无法使用$n - 1$个</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line">cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">mp</span>(n + <span class="number">1</span>,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m + <span class="number">1</span>));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= m;++j)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; mp[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> check = [](<span class="type">int</span> x,vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; &amp;mp)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> f = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(mp[j][i] &gt;= x) f = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!f) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ct = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= m;++j)</span><br><span class="line">&#123;</span><br><span class="line">ct += (mp[i][j] &gt;= x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ct &gt;= <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> L = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> R = <span class="number">1000000000</span>;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(L &lt;= R)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> mid = (L + R) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">check</span>(mid,mp))</span><br><span class="line">&#123;</span><br><span class="line">L = mid + <span class="number">1</span>;</span><br><span class="line">ans = <span class="built_in">max</span>(ans,mid);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> R = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Left-Right-Operation"><a href="#Left-Right-Operation" class="headerlink" title="Left Right Operation"></a><strong>Left Right Operation</strong></h2><p><a href="https://atcoder.jp/contests/abc263/tasks/abc263_d">D - Left Right Operation (atcoder.jp)</a></p><h2 id="Zuma"><a href="#Zuma" class="headerlink" title="Zuma"></a>Zuma</h2><p><a href="https://codeforces.com/contest/607/problem/B">Problem - B - Codeforces</a></p><p><strong>题目大意:</strong> 给定$n$个东西，每个东西有一个颜色，每次可以消除颜色是回文串的一个字串，消除一个字串之后会自动拼接回去，问最少需要几次可以消除完</p><p><strong>解题思路:</strong> 数据很小只有$500$，考虑区间$dp$</p><p>然后接下来我们来思考转移过程，因为每次消去的都是一个回文串，那么对于我们枚举的$l$和$r$来说可以放到上一个回文串中一起删除掉，如果$l &#x3D;&#x3D; r$</p><p>那么$dp[l][r] &#x3D; dp[l - 1][r + 1]$</p><p>否则我们需要考虑一个断点，在这个断点的两边进行$dp$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">chkmin</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">chkmax</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">5e2</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> dp[maxn][maxn];</span><br><span class="line"><span class="type">int</span> a[maxn],n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">check</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string s = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = l;i &lt;= r;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> id = <span class="string">&#x27;0&#x27;</span> + a[i];</span><br><span class="line">s.<span class="built_in">push_back</span>(id);</span><br><span class="line">&#125;</span><br><span class="line">string ss = s;</span><br><span class="line"><span class="built_in">reverse</span>(ss.<span class="built_in">begin</span>(),ss.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">return</span> ss == s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">dp[i][i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> r = i + <span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(r &gt; n) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span>(a[i] != a[r])</span><br><span class="line">&#123;</span><br><span class="line">dp[i][r] = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> dp[i][r] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> len = <span class="number">3</span>;len &lt;= n;++len)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> l = <span class="number">1</span>;l &lt;= n;++l)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> r = l + len - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(r &gt; n) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span>(a[l] == a[r]) dp[l][r] = dp[l + <span class="number">1</span>][r - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">else</span> dp[l][r] = <span class="built_in">min</span>(dp[l + <span class="number">1</span>][r],dp[l][r - <span class="number">1</span>]) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> mid = l;mid &lt;= r;++mid)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">chkmin</span>(dp[l][r],dp[l][mid] + dp[mid + <span class="number">1</span>][r]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; dp[<span class="number">1</span>][n] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Book-of-Evil"><a href="#Book-of-Evil" class="headerlink" title="Book of Evil"></a>Book of Evil</h2><p><a href="https://codeforces.com/problemset/problem/337/D">Problem - 337D - Codeforces</a></p><h2 id="Empty-Graph"><a href="#Empty-Graph" class="headerlink" title="Empty Graph"></a>Empty Graph</h2><p><a href="https://codeforces.com/problemset/problem/1712/D">https://codeforces.com/problemset/problem/1712/D</a></p><p><strong>题目大意:</strong> 给定一个长度为$n(1\leq n \leq 2e5)$的序列,对于任意的$(l,r),1 \leq l &lt; r \leq n$存在一条边连接$l$以及$r$，边权是$min(a_l,a_{l + 1},…,a_r)$</p><p>我们有$k$次操作机会可以将一个位置上的数字变成任意数字$x(1\leq x \leq 1e9)$,问这张图的直径是多少</p><p>一张图的直径定义如下所示: $max_{1 \leq u &lt; v \leq n}d(u,v)$,$d(u,v)$是从$u$到$v$的最短路</p><p><strong>解题思路:</strong>  首先我们先分析一下$d(u,v)$在这种情况下可能由什么组成，要么我是走两条最小的从$u$到$v$，如果是两个相邻的情况，那么我实际上$u$到$v$是只需要取$min(a_u,a_v)$</p><p>然后考虑这$k$次操作我们怎么使用，因为次数肯定是使用越多我最后的答案趋向于越大，具有一定的单调性，因此我们可以使用二分来写</p><p>我们去遍历整个序列，对于我们当前$check$的$x$来说，如果当前的数字小于$\frac{x}{2}$，那么我们需要一次机会将其变大</p><p>如果当前所需要的次数大于$k$的话，那么是不行的，我们就不要这一种情况</p><p>如果相同的话，我们看一下整个序列最大的$d$是多少，看看是否大于等于$x$即可</p><p>如果小于$k$次的话，找序列中最大的数字即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">chkmin</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">chkmax</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[maxn],n,k,use[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> now1 = <span class="built_in">min</span>(use[<span class="number">1</span>],use[<span class="number">2</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n - <span class="number">1</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line">now1 = <span class="built_in">max</span>(now1,<span class="built_in">min</span>(use[i],use[i + <span class="number">1</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mi = use[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">chkmin</span>(mi,use[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">min</span>(<span class="number">2</span> * mi,now1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> cs = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i) use[i] = a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(use[i] * <span class="number">2</span> &lt; x)</span><br><span class="line">&#123;</span><br><span class="line">cs++;</span><br><span class="line">use[i] = <span class="number">1e9</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cs &gt; k) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(cs == k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> now = <span class="built_in">cal</span>();</span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;??? &quot; &lt;&lt; now &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(now &gt;= x) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// cout &lt;&lt; 33 &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(k == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> now = use[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">chkmax</span>(now,use[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;now -&gt; &quot; &lt;&lt; now &lt;&lt; &quot; x -&gt; &quot; &lt;&lt; x &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(now &gt;= x) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line">cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i) cin &gt;&gt; a[i];</span><br><span class="line"><span class="type">int</span> L = <span class="number">1</span>,R = <span class="number">1e9</span>;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;?? &quot; &lt;&lt; check(4) &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">while</span>(L &lt;= R)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> mid = (L + R) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">check</span>(mid))</span><br><span class="line">&#123;</span><br><span class="line">L = mid + <span class="number">1</span>;</span><br><span class="line">ans = mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> R = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>在异或运算中，若$x \bigoplus y &#x3D; z$则有$x \bigoplus z &#x3D; y$</li><li>在两个数字取余需要相等的时候，可以转移一下位置变成一个等式</li><li>注意模拟样例的时候样例给定的特殊性质</li><li>对于$n - 1$这个数字我们要特殊考虑一下$trick$点</li><li>边着色考虑特殊情况比如有一些情况只需要两种颜色即可$(CF1217D)$</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dytechlab Cup 2022</title>
      <link href="/2022/10/09/Dytechlab-Cup-2022/"/>
      <url>/2022/10/09/Dytechlab-Cup-2022/</url>
      
        <content type="html"><![CDATA[<h1 id="Dytechlab-Cup-2022"><a href="#Dytechlab-Cup-2022" class="headerlink" title="Dytechlab Cup 2022"></a>Dytechlab Cup 2022</h1><h2 id="A-Ela-Sorting-Books"><a href="#A-Ela-Sorting-Books" class="headerlink" title="A. Ela Sorting Books"></a>A. Ela Sorting Books</h2><p><strong>题目大意:</strong>  给定$n(1 \leq n \leq 200)$本书,每本书有一个首字符，要把这$n$本书放到$k$个书架上，每个书架上面按照字典序第一个没有出现过的字符加入集合中，问这个集合最大能够构成的字符是什么</p><p><strong>解题思路:</strong> 模拟样例可以发现一件事情，假设我们当前还有若干个字符，那么从第一个字符按顺序放到最后一个可以连续放置的字符肯定是最优秀的放置方法。那么我们怎么写呢？我们可以枚举每个书架可以最终放入集合的字符是多少，然后$check$即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">chkmin</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">chkmax</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[maxn],n,k;</span><br><span class="line">string str;</span><br><span class="line">map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mp;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x &gt; n / k) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt;= x - <span class="number">1</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(mp[i] &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt;= x - <span class="number">1</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line">mp[i]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line">cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">cin &gt;&gt; str;</span><br><span class="line">mp.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> to:str)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> id = to - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">mp[id]++;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;<span class="type">char</span>&gt; ans;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= k;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">25</span>;j &gt;= <span class="number">0</span>;--j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">check</span>(j))</span><br><span class="line">&#123;</span><br><span class="line">ans.<span class="built_in">push_back</span>(<span class="string">&#x27;a&#x27;</span> + j);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(ans.<span class="built_in">begin</span>(),ans.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">reverse</span>(ans.<span class="built_in">begin</span>(),ans.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> to:ans)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; to;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="B-Ela’s-Fitness-and-the-Luxury-Number"><a href="#B-Ela’s-Fitness-and-the-Luxury-Number" class="headerlink" title="B. Ela’s Fitness and the Luxury Number"></a>B. Ela’s Fitness and the Luxury Number</h2><p><strong>题目大意:</strong> 给定$T (1 \leq T \leq 2e5)$组样例，每组两个数字分别是$l$ 以及$r(1 \leq l,r \leq 1e18)$ ，问在这个区间中美丽数字的个数是多少。美丽数字的定义是$x$可以被$x $  $mod$ $\lfloor\sqrt{x}\rfloor$ $ &#x3D; 0$</p><p><strong>解题思路:</strong> 发现数据范围实际上很大，然后我打了一下表发现了一个规律，就是根据每一个平方数去划分，可以以每个平方数划分成一个块，假设当前的平方数是$x$，当前的平方根是$y$，那么在这一个块中存在的数字分别是$x,x + y,x + 2 * y$</p><p>特别需要注意的是，$floor$存在的一定精度误差，因此在取的时候可以采取一些操作比如$–$来优化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">chkmin</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">chkmax</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[maxn],n,k;</span><br><span class="line">string str;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">20</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> div = <span class="built_in">floor</span>(<span class="built_in">sqrt</span>(<span class="number">1.0</span> * i));</span><br><span class="line"><span class="keyword">if</span>(i % div == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;i -&gt; &quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getans</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> rd = (<span class="built_in">sqrt</span>(<span class="number">1.0</span> * x));</span><br><span class="line"><span class="keyword">if</span>(rd * rd &gt; x) rd--;</span><br><span class="line"><span class="type">int</span> haha = rd * rd;</span><br><span class="line"><span class="type">int</span> ans = (rd - <span class="number">1</span>) * <span class="number">3</span>;</span><br><span class="line"><span class="keyword">if</span>(x &gt;= haha)</span><br><span class="line">&#123;</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x &gt;= haha + rd)</span><br><span class="line">&#123;</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x &gt;= haha + rd * <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line">cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> l,r;</span><br><span class="line">cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line"><span class="comment">// cout &lt;&lt; getans(l - 1) &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; l &lt;&lt; &quot; &quot; &lt;&lt; getans(l - 1) &lt;&lt; &quot; &quot; &lt;&lt; r &lt;&lt; &quot; &quot; &lt;&lt; getans(r) &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">getans</span>(r) - <span class="built_in">getans</span>(l - <span class="number">1</span>) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="C-Ela-and-Crickets"><a href="#C-Ela-and-Crickets" class="headerlink" title="C. Ela and Crickets"></a>C. Ela and Crickets</h2><p><strong>题目大意:</strong> 给定一个无限大的棋盘，给定一个$L$形状的棋子以及这个棋子刚开始的坐标，给定一个目标坐标，问这个棋子通过跳跃的方式能否到达这个目标点</p><p><strong>解题思路:</strong> 既然在一个棋盘上面，我们可以先考虑本身这个棋盘所带来的性质，也就是考虑存在的$L$形状的奇偶性带来的影响。我们可以模拟样例，发现对于一个$L$形状来说，和那个空着的格子的横纵坐标奇偶性都一样的那么我们是不可达的；然后我们考虑特殊情况，如果那个小角在边缘的话，那么不管怎么样子也只能再这个边缘移动，然后这样子判断即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">chkmin</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">chkmax</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e2</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> r[maxn],n,k,c[maxn],x,y,sx,sy;</span><br><span class="line">string str;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line">cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mpx,mpy;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">3</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; r[i] &gt;&gt; c[i];</span><br><span class="line">mpx[r[i]]++;</span><br><span class="line">mpy[c[i]]++;</span><br><span class="line">&#125;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">sx = sy = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> [to,cs]:mpx)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(cs == <span class="number">2</span>) sx = to;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> [to,cs]:mpy)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(cs == <span class="number">2</span>) sy = to;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//边缘</span></span><br><span class="line"><span class="keyword">if</span>((sx == <span class="number">1</span> || sx == n) &amp;&amp; (sy == <span class="number">1</span> || sy == n))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(sx == x || sy == y) cout &lt;&lt; <span class="string">&quot;YES\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;NO\n&quot;</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>((sx - x + sy - y) % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;YES\n&quot;</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>((sx - x) % <span class="number">2</span> == <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;YES\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>((sy - y) % <span class="number">2</span> == <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;YES\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;NO\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="D-Ela-and-the-Wiring-Wizard"><a href="#D-Ela-and-the-Wiring-Wizard" class="headerlink" title="D. Ela and the Wiring Wizard"></a>D. Ela and the Wiring Wizard</h2><p><strong>题目大意:</strong> 给定一张图，图有$n$个点$m$条边$(2 \leq n \leq 500,n - 1\leq m \leq 100000)$每次可以进行若干次操作，操作如下所示</p><p>选择两条边$(u,v)$和$(v,w)$删除$(u,v)$然后连接$(u,w)$，代价是$(u,v)$的边权</p><p>问从节点$1$到节点$n$最少需要多少次</p><p><strong>解题思路:</strong> 刚开始拿到题目的时候发现没有任何思路，模拟样例可以发现一个性质，就是无论最后怎么样，最后只有一条从$1$到$n$的边使用</p><p>那么我们可以提出猜想，是否从$1$到$n$只需要连接一条路呢？</p><p>接下来的部分参考了$pzr$佬的</p><p>我们可以做出反证感性理解一下，假设我们有多条路到$n$，其中分别是$1 -&gt; u_1 -&gt; u_2 -&gt; n$,设$u_1 -&gt;u_2$的距离是$w_1$，另外一条从$1 -&gt; u_1$权值是$w_2$</p><p>首先就放着这两条边，边权是$w_1 + w_2$</p><p>如果让我们把所有的边都变成$w_1$,那么就是$2w_1$</p><p>或者我们把所有边变成$w_2$，那么就是$2w_2$</p><p>那么进行修改后我们总能贪心取到最小的</p><p>分析样例之后，我们发现建边有成自环和非自环的情况</p><p>分析非自环的情况，那么对于一条边来说，就是去修改$dis(1,u) + dis(v,n)$的次数然后再加上$1$次走到的贡献</p><p>那么接下来考虑自环的情况，如果有自环的话最多可能存在几个自环呢？</p><p>我们可以把自环看成是一个点，设自环点是$x$,那么我们额外花费一个贡献连接$x$,从$1$到$x$再从$x$到$n$的距离相加然后乘贡献，这个$x$相当于中间的一个断点去更新整张图，因此实际上最多也就只有一个</p><p>那么对于这一种题目来说，分析完整道题目我们发现都是对<strong>边</strong> 这一个元素进行考虑</p><p>因为从一开始我们就在思考，从得出结论开始，再到实际上我去取哪条边最优</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="type">int</span> dis[maxn][maxn],n,m;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line">cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">vector&lt;array&lt;<span class="type">int</span>,3&gt;&gt; edge;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;++j)</span><br><span class="line">&#123;</span><br><span class="line">dis[i][j] = inf;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i) dis[i][i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>,u,v,w;i &lt;= m;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">edge.<span class="built_in">push_back</span>(&#123;u,v,w&#125;);</span><br><span class="line">dis[u][v] = dis[v][u] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>;k &lt;= n;++k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">chkmin</span>(dis[i][j],dis[i][k] + dis[k][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> [u,v,w]:edge)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">chkmin</span>(ans,(dis[<span class="number">1</span>][u] + <span class="number">1</span> + dis[v][n]) * w);</span><br><span class="line"><span class="built_in">chkmin</span>(ans,(dis[<span class="number">1</span>][v] + dis[u][n] + <span class="number">1</span>) * w);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> x = <span class="number">1</span>;x &lt;= n;++x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">chkmin</span>(ans,(<span class="built_in">min</span>(dis[u][x],dis[v][x]) + dis[<span class="number">1</span>][x] + dis[x][n] + <span class="number">2</span>) * w);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 思维 </tag>
            
            <tag> codeforces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/10/09/hello-world/"/>
      <url>/2022/10/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Atcoder Beginner Contest 272</title>
      <link href="/2022/10/08/Atcoder-Beginner-Contest-272/"/>
      <url>/2022/10/08/Atcoder-Beginner-Contest-272/</url>
      
        <content type="html"><![CDATA[<h1 id="Atcoder-Beginner-Contest-272"><a href="#Atcoder-Beginner-Contest-272" class="headerlink" title="Atcoder Beginner Contest 272"></a>Atcoder Beginner Contest 272</h1><h2 id="A-Integer-Sum"><a href="#A-Integer-Sum" class="headerlink" title="A - Integer Sum"></a>A - Integer Sum</h2><p><strong>题目大意:</strong> 给定$n$个数字，求$n$个数字的和</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">chkmin</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">chkmax</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="comment">// typedef long long ll;</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n,sum;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>,x;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line">sum += x;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; sum &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Everyone-is-Friends"><a href="#B-Everyone-is-Friends" class="headerlink" title="B - Everyone is Friends"></a>B - Everyone is Friends</h2><p><strong>题目大意:</strong> 给定$n$个人以及$m$个分组，问是否每两个人都曾经出现在同一组过</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">chkmin</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">chkmax</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="comment">// typedef long long ll;</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n,sum,m;</span><br><span class="line">set&lt;<span class="type">int</span>&gt; a[maxn];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>,num;i &lt;= m;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; num;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>,x;j &lt;= num;++j)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line">a[x].<span class="built_in">insert</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> f = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>;j &lt;= n;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> nm = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> to:a[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> it = a[j].<span class="built_in">find</span>(to);</span><br><span class="line"><span class="keyword">if</span>(it != a[j].<span class="built_in">end</span>()) </span><br><span class="line">&#123;</span><br><span class="line">nm++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(nm &gt;= <span class="number">1</span>) f++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(f == n * (n - <span class="number">1</span>) / <span class="number">2</span>) cout &lt;&lt; <span class="string">&quot;Yes\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;No\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Max-Even"><a href="#C-Max-Even" class="headerlink" title="C - Max Even"></a>C - Max Even</h2><p><strong>题目大意:</strong> 给定$n(1 \leq n \leq 2e5)$个数字，问两个不相同的数字加起来的最大偶数是多少</p><p><strong>解题思路:</strong> 分析题目我们可以发现一个关键问题就是两个数字加起来是偶数，那么要么是奇数和奇数相加要么是偶数和偶数相加，我们分类一下数字的奇偶性即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">chkmin</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">chkmax</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="comment">// typedef long long ll;</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n,sum,m;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">set&lt;<span class="type">int</span>&gt; odd,even;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>,x;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line"><span class="keyword">if</span>(x &amp; <span class="number">1</span>) odd.<span class="built_in">insert</span>(x);</span><br><span class="line"><span class="keyword">else</span> even.<span class="built_in">insert</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(odd.<span class="built_in">size</span>() &gt;= <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">res += *odd.<span class="built_in">rbegin</span>();</span><br><span class="line">odd.<span class="built_in">erase</span>(<span class="built_in">prev</span>(odd.<span class="built_in">end</span>()));</span><br><span class="line">res += *odd.<span class="built_in">rbegin</span>();</span><br><span class="line">ans = <span class="built_in">max</span>(ans,res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(even.<span class="built_in">size</span>() &gt;= <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">res += *even.<span class="built_in">rbegin</span>();</span><br><span class="line">even.<span class="built_in">erase</span>(<span class="built_in">prev</span>(even.<span class="built_in">end</span>()));</span><br><span class="line">res += *even.<span class="built_in">rbegin</span>();</span><br><span class="line">ans = <span class="built_in">max</span>(ans,res);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Root-M-Leaper"><a href="#D-Root-M-Leaper" class="headerlink" title="D - Root M Leaper"></a>D - Root M Leaper</h2><p><strong>题目大意:</strong> 给定一个$n * n(1\leq n \leq 400)$的棋盘，初始点在$(1,1)$，一个点如果在$(i,j)$当且仅当它可以到$(k,l)$存在他们的$\sqrt{(i - k) ^ 2 + (j - l) ^ 2} &#x3D; \sqrt{m} (1 \leq m \leq 1e5)$</p><p>求这个矩阵中的所有点最少需要几步能被走到</p><p><strong>解题思路:</strong> 发现无论怎么走实际上我们是走不出这个棋盘的，那么实际上$m$最多不会超过$n$，那么我们就可以预处理出所有可以走的步数然后进行$BFS$即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">chkmin</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">chkmax</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="comment">// typedef long long ll;</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">5e2</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> tx[] = &#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="type">int</span> ty[] = &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="type">int</span> dis[maxn][maxn];</span><br><span class="line"><span class="type">int</span> vis[maxn][maxn];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; stp;</span><br><span class="line"><span class="type">int</span> lmt = <span class="built_in">min</span>(n,m) + <span class="number">100</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt;= lmt;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt;= lmt;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i * i + j * j == m)</span><br><span class="line">&#123;</span><br><span class="line">stp.<span class="built_in">push_back</span>(&#123;i,j&#125;);</span><br><span class="line">stp.<span class="built_in">push_back</span>(&#123;j,i&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;++j) dis[i][j] = inf;</span><br><span class="line">&#125;</span><br><span class="line">queue&lt;array&lt;<span class="type">int</span>,2&gt;&gt; que;</span><br><span class="line">que.<span class="built_in">push</span>(&#123;<span class="number">1</span>,<span class="number">1</span>&#125;);</span><br><span class="line">vis[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">dis[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!que.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> [x,y] = que.<span class="built_in">front</span>();</span><br><span class="line">que.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> [spx,spy]:stp)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>;k &lt;= <span class="number">3</span>;++k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> fx = x + spx * tx[k];</span><br><span class="line"><span class="keyword">auto</span> fy = y + spy * ty[k];</span><br><span class="line"><span class="keyword">if</span>(fx &gt;= <span class="number">1</span> &amp;&amp; fx &lt;= n &amp;&amp; fy &gt;= <span class="number">1</span> &amp;&amp; fy &lt;= n &amp;&amp; dis[fx][fy] == inf &amp;&amp; vis[fx][fy] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">dis[fx][fy] = dis[x][y] + <span class="number">1</span>;</span><br><span class="line">vis[fx][fy] = <span class="number">1</span>;</span><br><span class="line">que.<span class="built_in">push</span>(&#123;fx,fy&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dis[i][j] == inf) dis[i][j] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;++j)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; dis[i][j] &lt;&lt; <span class="string">&quot; \n&quot;</span>[j == n];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Add-and-Mex"><a href="#E-Add-and-Mex" class="headerlink" title="E - Add and Mex"></a>E - Add and Mex</h2><p><strong>题目大意:</strong> 给定一个长度为$n (1 \leq n \leq 2e5)$的数组，数组是$int$范围，给定$m$次操作，每次操作第$i$个位置上面的数字都会加上$i$，问这个数组的$mex$是多少</p><p><strong>解题思路:</strong> 首先我们通过模拟样例可以发现一件事情，就是如果这个序列中的数字是负数，那么它实际上是没有用的，其次是考虑$mex$的性质，因为对于长度为$n$的数组来说，$mex$最大就是$n + 1$，那么对于每一个数字来说最多也不会超过$n + 1$，既然这样，因为对于一个下标为$i$的数字来说，最多加$n &#x2F; i$次，那么对于整个序列来说就是一个调和级数，模拟即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">chkmin</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">chkmax</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="comment">// typedef long long ll;</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> ans[maxn],a[maxn];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; pos[maxn];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line"><span class="type">int</span> st = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(a[i] &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> rd = <span class="built_in">abs</span>(a[i]) / i;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">abs</span>(a[i]) % i) rd++;</span><br><span class="line">a[i] += i * rd;</span><br><span class="line">st = rd;</span><br><span class="line"><span class="keyword">if</span>(st &lt;= m)</span><br><span class="line">&#123;</span><br><span class="line">pos[st].<span class="built_in">push_back</span>(a[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(a[i] + i &lt;= n &amp;&amp; st &lt;= m)</span><br><span class="line">&#123;</span><br><span class="line">st++;</span><br><span class="line">a[i] += i;</span><br><span class="line"><span class="keyword">if</span>(a[i] &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">pos[st].<span class="built_in">push_back</span>(a[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">sort</span>(pos[i].<span class="built_in">begin</span>(),pos[i].<span class="built_in">end</span>());</span><br><span class="line">pos[i].<span class="built_in">erase</span>(<span class="built_in">unique</span>(pos[i].<span class="built_in">begin</span>(),pos[i].<span class="built_in">end</span>()),pos[i].<span class="built_in">end</span>());</span><br><span class="line"><span class="type">int</span> now = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> to:pos[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(to != now) <span class="keyword">break</span>;</span><br><span class="line">now++;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; now &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-Yet-Another-mod-M"><a href="#G-Yet-Another-mod-M" class="headerlink" title="G - Yet Another mod M"></a>G - Yet Another mod M</h2><p><strong>题目大意:</strong> 给定一个长度为$n(1 \leq n \leq 5000)$，然后找到一个数字$M$，使得这个序列中每一个数字$mod$ $M$后存在唯一的众数</p><p><strong>解题思路:</strong> 在赛时就在想随机是否可行但是没有一个好的$check$方案，然后参考了一下严格鸽的题解</p><p>首先因为是唯一的众数，那么假设我们在序列中取两个数字，这两个数字$mod$ $M$ 都是$0$的，那么就存在$(x - y) $  $mod$  $m &#x3D;&#x3D; 0$</p><p>那接下来我们去找$(x - y)$的因子就可以了</p><p>这样子做的正确概率是：因为$x,y$都有$\frac{1}{2}$的概率取到，那么总的取到的概率就是$\frac{1}{4}$，那我们选择多次选择不到的概率实际上很小，对赌就可以了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">chkmin</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">chkmax</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="comment">// #define int long long</span></span><br><span class="line"><span class="comment">// typedef long long ll;</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> ans[maxn],a[maxn];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; pos[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x &lt; <span class="number">3</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mp;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line">mp[a[i] % x]++;</span><br><span class="line"><span class="keyword">if</span>(mp[a[i] % x] * <span class="number">2</span> &gt; n) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">while</span>(cnt--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x = a[<span class="built_in">rand</span>() % n + <span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> y = a[<span class="built_in">rand</span>() % n + <span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> d = x - y;</span><br><span class="line"><span class="keyword">if</span>(d == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i * i &lt;= d;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(d % i != <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">check</span>(i))</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">check</span>(d / i))</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; d / i &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> abc </tag>
            
            <tag> 思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Atcoder Beginner Contest 271 C-F</title>
      <link href="/2022/10/02/abc271/"/>
      <url>/2022/10/02/abc271/</url>
      
        <content type="html"><![CDATA[<h1 id="Atcoder-Beginner-Contest-271-C-F"><a href="#Atcoder-Beginner-Contest-271-C-F" class="headerlink" title="Atcoder Beginner Contest 271 C-F"></a>Atcoder Beginner Contest 271 C-F</h1><h2 id="C-Manga"><a href="#C-Manga" class="headerlink" title="C - Manga"></a>C - Manga</h2><p><strong>题意:</strong> 给定一个长度为$n(1 \leq n \leq 3e5)$的序列,每个位置有一个值$x(1 \leq x \leq 1e9)$，我们可以进行任意多次操作，操作的话是如果序列的长度还大于等于$2$，那么我们可以任意选择$2$个数字去删除，然后加进去任意一个数字进去，问我们最后能够得到一个形似$1,2,3…$的最长序列</p><p><strong>解题思路:</strong> 首先我们分析一下题意，我们可以知道最后的答案最多不会超过$n$，那么我们在读入的时候可以将大于$n$的部分放进一个$vector$里面，然后对于小于$n$的一部分我们可以先给他标记然后放到一个双端队列里面，如果其中的数字有重复的部分我们也需要放进上面的$vector$之中。接着我们模拟这个过程即可。在模拟的时候注意我们优先取$vector$当中的，然后我们取队列后面的即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">3e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> vis[maxn],n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; a;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>,x;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line"><span class="keyword">if</span>(x &lt;= n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[x]) a.<span class="built_in">push_back</span>(x);</span><br><span class="line"><span class="keyword">else</span> vis[x] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> a.<span class="built_in">push_back</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">deque&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[i]) q.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[i] &amp;&amp; q.<span class="built_in">size</span>())</span><br><span class="line">&#123;</span><br><span class="line">ans++;</span><br><span class="line">q.<span class="built_in">pop_front</span>();</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a.<span class="built_in">size</span>() &gt;= <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">a.<span class="built_in">pop_back</span>();</span><br><span class="line">a.<span class="built_in">pop_back</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a.<span class="built_in">size</span>() == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">a.<span class="built_in">pop_back</span>();</span><br><span class="line"><span class="keyword">if</span>(!q.<span class="built_in">empty</span>()) q.<span class="built_in">pop_back</span>(); </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(q.<span class="built_in">size</span>() &gt;= <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">q.<span class="built_in">pop_back</span>();</span><br><span class="line">q.<span class="built_in">pop_back</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Flip-and-Adjust"><a href="#D-Flip-and-Adjust" class="headerlink" title="D - Flip and Adjust"></a>D - Flip and Adjust</h2><p><strong>题意:</strong> 给定$n(1 \leq n \leq 100)$张卡片，每张卡片背面和正面有一个数字，现在让我们选择每张卡片的正面或者反面，问是否能够组成$s(1\leq s \leq 10000)$</p><p><strong>解题思路:</strong> 首先我们可以观察数据范围，可能是$O(n ^ 3)$或者$O(ns)$的$dp$</p><p>接下来我们考虑这样的一个过程，首先无论如何每张牌都是要取的，那么假定我现在取到第$i - 1$张牌的值有$s_{i - 1}$，那么我取第$i$张牌的时候的值肯定有$s_{i - 1} + mp[i][0]$和$s_{i - 1} + mp[i][1]$$(mp[i][0&#x2F;1]表示第i张牌的正反面的值)$</p><p>那么我们就可以用$dp[i][s]$来表示前$i$张牌可能组成的值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">2e2</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> mp[maxn][<span class="number">2</span>],n,s;</span><br><span class="line"><span class="type">int</span> dp[maxn][<span class="number">40010</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; s;</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; mp[i][<span class="number">0</span>] &gt;&gt; mp[i][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">dp[<span class="number">1</span>][mp[i][<span class="number">0</span>]] = <span class="number">1</span>;</span><br><span class="line">dp[<span class="number">1</span>][mp[i][<span class="number">1</span>]] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt;= s;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!dp[i - <span class="number">1</span>][j]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(j + mp[i][<span class="number">0</span>] &lt;= s) dp[i][j + mp[i][<span class="number">0</span>]] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(j + mp[i][<span class="number">1</span>] &lt;= s) dp[i][j + mp[i][<span class="number">1</span>]] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dp[n][s])</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Yes\n&quot;</span>;</span><br><span class="line">string ans = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = n;i &gt;= <span class="number">1</span>;--i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s - mp[i][<span class="number">0</span>] &gt;= <span class="number">0</span> &amp;&amp; dp[i - <span class="number">1</span>][s - mp[i][<span class="number">0</span>]])</span><br><span class="line">&#123;</span><br><span class="line">s -= mp[i][<span class="number">0</span>];</span><br><span class="line">ans.<span class="built_in">push_back</span>(<span class="string">&#x27;H&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">s -= mp[i][<span class="number">1</span>];</span><br><span class="line">ans.<span class="built_in">push_back</span>(<span class="string">&#x27;T&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">assert</span>(ans.<span class="built_in">length</span>() == n);</span><br><span class="line"><span class="built_in">reverse</span>(ans.<span class="built_in">begin</span>(),ans.<span class="built_in">end</span>());</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;No\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Subsequence-Path"><a href="#E-Subsequence-Path" class="headerlink" title="E - Subsequence Path"></a>E - Subsequence Path</h2><p><strong>题目大意:</strong> 给定$n$个点$m$条单向边$(1 \leq n,m \leq 2e5)$，没有重边和自环，每个边有一条权值，接下来给定一个序列$E$，我们走的路径的标号形成的序列必须是这个序列$E$的子序列，问从点$1$到点$n$的最短路径</p><p><strong>解题思路:</strong> 分析题目发现我们的突破口应该在这个给定我们的序列$E$这里，因为考虑我们取到的序列是这个序列的子序列，这里给我们透露到一些信息，就是假设我们当前已经遍历到第$i$条边，那么我们是可以用前面$i - 1$条边来更新这一张图的，那么我们知道这个点之后就可以写啦</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> u,v,w;</span><br><span class="line">&#125;edge[maxn];</span><br><span class="line"><span class="type">int</span> n,m,k;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dis</span><span class="params">(n + <span class="number">1</span>,inf)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>,u,v,w;i &lt;= m;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">edge[i] = &#123;u,v,w&#125;;</span><br><span class="line">&#125;</span><br><span class="line">dis[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>,x;i &lt;= k;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line"><span class="type">int</span> u = edge[x].u;</span><br><span class="line"><span class="type">int</span> v = edge[x].v;</span><br><span class="line"><span class="type">int</span> w = edge[x].w;</span><br><span class="line">dis[v] = <span class="built_in">min</span>(dis[v],dis[u] + w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dis[n] != inf) cout &lt;&lt; dis[n] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-XOR-on-Grid-Path"><a href="#F-XOR-on-Grid-Path" class="headerlink" title="F - XOR on Grid Path"></a>F - XOR on Grid Path</h2><p><strong>题目大意:</strong> 给定一个$n * n(1\leq n \leq 20)$的矩阵，我们从点$(1,1)$开始，每次移动可以向$(x + 1,y)$或者$(x,y + 1)$移动，问我们到达$(n,n)$使得异或和为$0$的路径有多少条</p><p><strong>解题思路:</strong> 首先对于这种矩阵的题目我们肯定先去考虑$dp$的，但是如果暴力去枚举所有方案的话方案数实际会非常的大</p><p>根据官方题解的思路，建议我们使用$meet$  $in$ $middle$来做</p><p>那$meet$  $in$ $middle$是个什么东西呢？大概就是我从两个点来搜索，搜索到一些具有共同性质的点从而结束，因为这样子会大大减少我们所需要的时间复杂度</p><p>那么对于矩阵来说，我们可以从$(1,1)$点和$(n,n)$点来搜索，对于这两个点来说我们都搜索到对角线上面的点来结束,因为对角线刚好分割两个矩阵</p><p>那么我们对于$(1,1)$点来说，我们可以直接搜索下去到对角线来记录当前异或和的数值，那么对于$(n,n)$点来说，我们可以往上面搜索，搜到对角线的话就加上之前前面遍历到这一点的值，因为我们需要异或和是$0$嘛</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">int</span> mp[<span class="number">30</span>][<span class="number">30</span>],n;</span><br><span class="line">unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; dp[<span class="number">30</span>][<span class="number">30</span>];</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> now)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x + y == n)</span><br><span class="line">&#123;</span><br><span class="line">dp[x][y][now]++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x + y &gt; n) <span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">dfs1</span>(x + <span class="number">1</span>,y,now ^ mp[x + <span class="number">1</span>][y]);</span><br><span class="line"><span class="built_in">dfs1</span>(x,y + <span class="number">1</span>,now ^ mp[x][y + <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> now)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x + y == n)</span><br><span class="line">&#123;</span><br><span class="line">ans += dp[x][y][now ^ mp[x][y]];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x + y &lt; n) <span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(x - <span class="number">1</span>,y,now ^ mp[x - <span class="number">1</span>][y]);</span><br><span class="line"><span class="built_in">dfs2</span>(x,y - <span class="number">1</span>,now ^ mp[x][y - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;++j) cin &gt;&gt; mp[i][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">1</span>,mp[<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">dfs2</span>(n,n,mp[n][n]);</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> abc </tag>
            
            <tag> 思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Graph Traing</title>
      <link href="/2022/09/29/Graph-Traing/"/>
      <url>/2022/09/29/Graph-Traing/</url>
      
        <content type="html"><![CDATA[<h1 id="Graph-Traing"><a href="#Graph-Traing" class="headerlink" title="Graph Traing"></a>Graph Traing</h1><h2 id="Boboniu-Walks-on-Graph"><a href="#Boboniu-Walks-on-Graph" class="headerlink" title="Boboniu Walks on Graph"></a>Boboniu Walks on Graph</h2><p><a href="https://codeforces.com/problemset/problem/1394/B">https://codeforces.com/problemset/problem/1394/B</a></p><p><strong>题目大意:</strong> 给定一张图有$n$个点$m$条边，每条边的权值从$1$ ~ $m$并且每条边的权值互相不相同，这张图中一个点的最大的出度是$k$,然后求$k$元组，这个$k$元组的第$i$个位置代表着出度数为$i$的点走他的边权从小到大为第$c_i$的边，问多元组最多有多少种</p><p><strong>解题思路:</strong> 首先我们可以发现这样子一件事情，因为$k$的范围并不大，因此如果我们暴力去枚举多元组的样子最多也只有$9!$种，那么我们是否可以有一种很快速的$check$方法来检查一种多元组是否合法呢？首先我们可以想这样一件事情，因为对于每一个点最后都能跳回到自己，所以最后的结果必定是一个环，那么对于一个环来说我们可以粗略的将其看成一个集合，然后我们给每个点刚开始随机一个数值。然后我们分析多元组的性质，对于任意一种多元组，第$i$位的跳跃到第$c_i$个，那么我们可以刚开始预处理这个东西，对于当前点的出度和当前去往点的序号记录一个数组然后加起来就可以了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">chkmin</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">chkmax</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n,m,k;</span><br><span class="line"><span class="type">int</span> sum[<span class="number">15</span>][<span class="number">15</span>];</span><br><span class="line"><span class="type">int</span> a[maxn],ansha,ans;</span><br><span class="line"><span class="type">int</span> res;</span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; edge[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> now)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(now == k + <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(res == ansha) ans++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= now;++i)</span><br><span class="line">&#123;</span><br><span class="line">res += sum[now][i];</span><br><span class="line"><span class="built_in">dfs</span>(now + <span class="number">1</span>);</span><br><span class="line">res -= sum[now][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i) a[i] = <span class="built_in">rand</span>() * <span class="built_in">rand</span>(),ansha += a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>,u,v,w;i &lt;= m;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">edge[u].<span class="built_in">push_back</span>(&#123;w,v&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i) <span class="built_in">sort</span>(edge[i].<span class="built_in">begin</span>(),edge[i].<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> sz = edge[i].<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt; sz;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> to = edge[i][j].second;</span><br><span class="line">sum[sz][j + <span class="number">1</span>] += a[to];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Slipper"><a href="#Slipper" class="headerlink" title="Slipper"></a>Slipper</h2><p>(<a href="https://vjudge.net/contest/517945#problem/C">https://vjudge.net/contest/517945#problem/C</a>)</p><p><strong>题目大意:</strong> 给定一棵树，结点个数为$n (1 \leq n \leq 1e5)$,给定每条树边连接的两个结点和对应的边权，除此之外可以进行若干次魔法，若$|dep_u - dep_v| &#x3D; k$，那么从$u$到$v$只需要$d$点边权，给定两个点$s$和$t$，求从$s$到$t$最少需要多少边权</p><p><strong>解题思路:</strong> 我们可以刚开始这么思考，如果不考虑任何优化，我们可以将每个点放到对应的一个存储容器中，这个容易用$dep$ 来标记，如果两个容器相差$k$，那么我们对于两个集合中的点进行一一连边即可。但是这样子实际的时间复杂度很大，那么我们考虑优化建边。根据上面的思考，我们可以发现一个性质只有层与层之间才会连接一条边，其实很多边是重复的，那么我们对于每一个层来说我们可以建一个点，表示层，那么我们对于每一个点来说，连向这个层，那么对于层与层之间的，我们可以从$u$往$u + k$建一条边，同时也可以从$u + k$往$u$建边，但是只有一层层点是不够的，因为原来的树点连过来的边权是$0$，那么我们再建一层层点来跑最短路即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// #define int long long</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">6e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxm = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> ll inf = <span class="number">1e18</span>;</span><br><span class="line"><span class="type">int</span> tot;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> u,v,w,nxt;</span><br><span class="line">&#125;edge[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> head[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[++tot].u = u,edge[tot].v = v,edge[tot].w = w,edge[tot].nxt = head[u],head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,dep[maxm],k,p,s,t,mxdep;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> s,<span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dep[s] = dep[fa] + <span class="number">1</span>;</span><br><span class="line">    mxdep = <span class="built_in">max</span>(mxdep, dep[s]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = head[s];i;i = edge[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> to = edge[i].v;</span><br><span class="line">        <span class="keyword">if</span>(to == fa) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(to,s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dij</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vis</span><span class="params">(<span class="number">3</span> * n + <span class="number">10</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;ll&gt; <span class="title">dis</span><span class="params">(<span class="number">3</span> * n + <span class="number">10</span>, inf)</span></span>;</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    priority_queue&lt;pair&lt;ll, <span class="type">int</span>&gt;, vector&lt;pair&lt;ll, <span class="type">int</span>&gt;&gt;, greater&lt;pair&lt;ll, <span class="type">int</span>&gt;&gt;&gt; que;</span><br><span class="line">    que.<span class="built_in">push</span>(&#123;<span class="number">0</span>, s&#125;);</span><br><span class="line">    <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> now = que.<span class="built_in">top</span>().second;</span><br><span class="line">        que.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(vis[now])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        vis[now] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = head[now];i;i = edge[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> to = edge[i].v;</span><br><span class="line">            ll ww = edge[i].w * <span class="number">1ll</span>;</span><br><span class="line">            <span class="keyword">if</span>(dis[to] &gt; dis[now] + ww)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[to] = dis[now] + ww;</span><br><span class="line">                que.<span class="built_in">push</span>(&#123;dis[to], to&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,dis[t]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="comment">// cin &gt;&gt; n;</span></span><br><span class="line">    mxdep = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n + n + n + <span class="number">10</span>;++i) head[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, u, v, w; i &lt;= n - <span class="number">1</span>;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">        <span class="comment">// cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span></span><br><span class="line">        <span class="built_in">add</span>(u,v,w);</span><br><span class="line">        <span class="built_in">add</span>(v,u,w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;k,&amp;p);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;s,&amp;t);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">add</span>(i,dep[i] + n,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">add</span>(dep[i] + n + n,i,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">1</span>; l &lt;= n;++l)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> r = l + k;</span><br><span class="line">        <span class="keyword">if</span>(r &gt; mxdep)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">add</span>(l + n,r + n + n,p);</span><br><span class="line">        <span class="built_in">add</span>(r + n + n,l + n,p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dij</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>), cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="comment">// cin &gt;&gt; T;</span></span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Ela-and-the-Wiring-Wizard"><a href="#Ela-and-the-Wiring-Wizard" class="headerlink" title="Ela and the Wiring Wizard"></a>Ela and the Wiring Wizard</h2><p><a href="https://codeforces.com/contest/1737/problem/D">https://codeforces.com/contest/1737/problem/D</a></p><p><strong>题目大意:</strong> 给定一张图，图有$n$个点$m$条边$(2 \leq n \leq 500,n - 1\leq m \leq 100000)$每次可以进行若干次操作，操作如下所示</p><p>选择两条边$(u,v)$和$(v,w)$删除$(u,v)$然后连接$(u,w)$，代价是$(u,v)$的边权</p><p>问从节点$1$到节点$n$最少需要多少次</p><p><strong>解题思路:</strong> 刚开始拿到题目的时候发现没有任何思路，模拟样例可以发现一个性质，就是无论最后怎么样，最后只有一条从$1$到$n$的边使用</p><p>那么我们可以提出猜想，是否从$1$到$n$只需要连接一条路呢？</p><p>接下来的部分参考了$pzr$佬的</p><p>我们可以做出反证感性理解一下，假设我们有多条路到$n$，其中分别是$1 -&gt; u_1 -&gt; u_2 -&gt; n$,设$u_1 -&gt;u_2$的距离是$w_1$，另外一条从$1 -&gt; u_1$权值是$w_2$</p><p>首先就放着这两条边，边权是$w_1 + w_2$</p><p>如果让我们把所有的边都变成$w_1$,那么就是$2w_1$</p><p>或者我们把所有边变成$w_2$，那么就是$2w_2$</p><p>那么进行修改后我们总能贪心取到最小的</p><p>分析样例之后，我们发现建边有成自环和非自环的情况</p><p>分析非自环的情况，那么对于一条边来说，就是去修改$dis(1,u) + dis(v,n)$的次数然后再加上$1$次走到的贡献</p><p>那么接下来考虑自环的情况，如果有自环的话最多可能存在几个自环呢？</p><p>我们可以把自环看成是一个点，设自环点是$x$,那么我们额外花费一个贡献连接$x$,从$1$到$x$再从$x$到$n$的距离相加然后乘贡献，这个$x$相当于中间的一个断点去更新整张图，因此实际上最多也就只有一个</p><p>那么对于这一种题目来说，分析完整道题目我们发现都是对<strong>边</strong> 这一个元素进行考虑</p><p>因为从一开始我们就在思考，从得出结论开始，再到实际上我去取哪条边最优</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="type">int</span> dis[maxn][maxn],n,m;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line">cin &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">vector&lt;array&lt;<span class="type">int</span>,3&gt;&gt; edge;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;++j)</span><br><span class="line">&#123;</span><br><span class="line">dis[i][j] = inf;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i) dis[i][i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>,u,v,w;i &lt;= m;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">edge.<span class="built_in">push_back</span>(&#123;u,v,w&#125;);</span><br><span class="line">dis[u][v] = dis[v][u] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>;k &lt;= n;++k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">chkmin</span>(dis[i][j],dis[i][k] + dis[k][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> [u,v,w]:edge)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">chkmin</span>(ans,(dis[<span class="number">1</span>][u] + <span class="number">1</span> + dis[v][n]) * w);</span><br><span class="line"><span class="built_in">chkmin</span>(ans,(dis[<span class="number">1</span>][v] + dis[u][n] + <span class="number">1</span>) * w);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> x = <span class="number">1</span>;x &lt;= n;++x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">chkmin</span>(ans,(<span class="built_in">min</span>(dis[u][x],dis[v][x]) + dis[<span class="number">1</span>][x] + dis[x][n] + <span class="number">2</span>) * w);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Session-in-BSU"><a href="#Session-in-BSU" class="headerlink" title="Session in BSU"></a>Session in BSU</h2><p><a href="https://codeforces.com/problemset/problem/1027/F">Problem - 1027F - Codeforces</a></p><p><strong>题目大意:</strong> 给定$n(1 \leq n \leq 10 ^ 6)$场比赛，每场比赛有两个数字$a_i,b_i(1 \leq a_i ,b_i \leq 10 ^ 9)$ 代表可以在第几天考试，问最早可以在哪一天结束比赛，如果无法结束比赛输出$-1$</p><p><strong>解题思路:</strong> 首先如果我们不看这个数据范围的话，那么是不是实际上可以一眼网络流，建立每个考试点和对应的天数点，跑最大流即可。但是观察一下数据范围实际上很大，那么我们就不能直接跑网络流，不过既然一眼网络流我们可以往建图这一个方向去思考这个问题。假设我对每场考试连一条边，那么是不是就代表着一件事情:我这一条边可以选择这两个点中的任意一个时间。那么整张图是不是就是一个森林了。然后我们来考虑一下每个连通块有什么性质，对于每个连通块中，我们都要让这个连通块的边数(考试场数) 小于等于点数(选择考试的天数)，那么对于每一个连通块中，我们假设边数是$num$,我们是不是选择第$num$大的天数就是这个连通块的答案</p><p>但是实际写起来之后发现这样子直接写会出现一些奇怪的问题，那么我们可以在思考刚刚形成的连通块是什么样子的，因为边数要小于等于点数，所以要么是一颗树，要么是一棵基环树，那么对于这两个来说我们只需要记录一个最大值和次大值即可，对于连通块是树的话输出次大值，基环树的输出最大值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">chkmin</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">chkmax</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">4e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> f[maxn],n,m,edgenum[maxn],sz[maxn],ansmx2[maxn],ansmx[maxn],val[maxn],cnt;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getf</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x == f[x] ? x : f[x] = <span class="built_in">getf</span>(f[x]);</span><br><span class="line">&#125;</span><br><span class="line">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; edge[maxn];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>,u,v;i &lt;= m;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">edge[i] = &#123;u,v&#125;;</span><br><span class="line">val[++cnt] = u,val[++cnt] = v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(val + <span class="number">1</span>,val + <span class="number">1</span> + cnt);</span><br><span class="line">n = <span class="built_in">unique</span>(val + <span class="number">1</span>,val + <span class="number">1</span> + cnt) - (val + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i) f[i] = i,sz[i] = <span class="number">1</span>,edgenum[i] = <span class="number">0</span>,ansmx[i] = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> [u,v] = edge[i];</span><br><span class="line">u = <span class="built_in">lower_bound</span>(val + <span class="number">1</span>,val + <span class="number">1</span> + n,u) - val;</span><br><span class="line">v = <span class="built_in">lower_bound</span>(val + <span class="number">1</span>,val + <span class="number">1</span> + n,v) - val;</span><br><span class="line"><span class="type">int</span> fu = <span class="built_in">getf</span>(u);</span><br><span class="line"><span class="type">int</span> fv = <span class="built_in">getf</span>(v);</span><br><span class="line"><span class="keyword">if</span>(fu == fv)</span><br><span class="line">&#123;</span><br><span class="line">edgenum[fu]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">f[fu] = fv;</span><br><span class="line">sz[fv] += sz[fu];</span><br><span class="line">edgenum[fv] += edgenum[fu] + <span class="number">1</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; ha;</span><br><span class="line">ha.<span class="built_in">push_back</span>(ansmx2[fu]);ha.<span class="built_in">push_back</span>(ansmx[fu]);</span><br><span class="line">ha.<span class="built_in">push_back</span>(ansmx2[fv]);ha.<span class="built_in">push_back</span>(ansmx[fv]);</span><br><span class="line"><span class="built_in">sort</span>(ha.<span class="built_in">begin</span>(),ha.<span class="built_in">end</span>());</span><br><span class="line">ansmx[fv] = ha[<span class="number">3</span>];</span><br><span class="line">ansmx2[fv] = ha[<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> f = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> fi = <span class="built_in">getf</span>(i);</span><br><span class="line"><span class="keyword">if</span>(i == fi)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(sz[i] &lt; edgenum[i])</span><br><span class="line">&#123; </span><br><span class="line">f = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(edgenum[i] == sz[i]) <span class="built_in">chkmax</span>(res,val[ansmx[i]]);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">chkmax</span>(res,val[ansmx2[i]]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!f)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; res &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Moment-of-Bloom"><a href="#Moment-of-Bloom" class="headerlink" title="Moment of Bloom"></a>Moment of Bloom</h2><p><a href="https://codeforces.com/problemset/problem/1583/E">Problem - 1583E - Codeforces</a></p><p><strong>题目大意:</strong> 给定一个点数为$n$，边数为$m$的图$(1 \leq n,m \leq 3*10^5)$,初始所有点的点权为$0$。给定$q$次操作，每次操作给定两个点，你可以选择图上这两个点中任意一条简单路径，并且给这一条简单路径上面所有的点权加$1$，问经过$q$次操作这张图所有点的点权是否都是偶数，如果是的话输出$Y!ES$并且输出每次操作应该怎么操作，否则输出$N!O$并且输出最少还需要加几条边，特别注意的是$nq \leq 3 * 10^5$</p><p><strong>解题思路:</strong> 首先遇到这样子的问题在一张图上面会很棘手，因为两个点之间可能有很多的路径，那么既然这样，我们先尝试简化一下这个问题。如果我们把这一个问题放在一棵树上面，那么两点之间的路径是不是就已经确定了。既然这样，什么时候会出现不行的情况呢？我们每次可以对路径的两个端点增加一个值，如果最后在这一棵树上面存在点的点权是奇数，那么是肯定输出$NO$的。然后由于点是成对出现的，那么点也会是成对落单的，我们记录奇数个数的点为$num$个，那么最后需要的边数就是$\frac{num}{2}$个</p><p>然后对于原题来说我们已经把题目化成在树上面了，那么我们直接在树上类似$LCA$找祖先结点沿路径输出即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">chkmin</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">chkmax</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">3e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">graph</span></span><br><span class="line">&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; edge[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">edge[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">edge[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;g1,g2;</span><br><span class="line"><span class="type">int</span> n,m,deg[maxn];</span><br><span class="line">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; op[maxn];</span><br><span class="line"><span class="type">int</span> f[maxn],p[maxn],dep[maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getf</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x == f[x] ? x : f[x] = <span class="built_in">getf</span>(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> s,<span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dep[s] = dep[fa] + <span class="number">1</span>;</span><br><span class="line">p[s] = fa;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> to:g2.edge[s])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(to == fa) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs</span>(to,s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>,u,v;i &lt;= m;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">g1.<span class="built_in">add</span>(u,v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> q;</span><br><span class="line">cin &gt;&gt; q;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= q;++i) cin &gt;&gt; op[i].first &gt;&gt; op[i].second,deg[op[i].first]++,deg[op[i].second]++;</span><br><span class="line"><span class="type">int</span> ct = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line">ct += (deg[i] &amp; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ct)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;NO\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; ct / <span class="number">2</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;YES\n&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i) f[i] = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> to:g1.edge[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> fx = <span class="built_in">getf</span>(i);</span><br><span class="line"><span class="type">int</span> fy = <span class="built_in">getf</span>(to);</span><br><span class="line"><span class="keyword">if</span>(fx == fy) <span class="keyword">continue</span>;</span><br><span class="line">f[fy] = fx;</span><br><span class="line">g2.<span class="built_in">add</span>(i,to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;?? &quot; &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= q;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> [u,v] = op[i];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; now;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; now2;</span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;?? ? &quot; &lt;&lt; u &lt;&lt; &quot; &quot; &lt;&lt; v &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">while</span>(dep[u] != dep[v])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[u] &gt; dep[v]) now.<span class="built_in">push_back</span>(u),u = p[u];</span><br><span class="line"><span class="keyword">else</span> now2.<span class="built_in">push_back</span>(v),v = p[v];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(u != v)</span><br><span class="line">&#123;</span><br><span class="line">now.<span class="built_in">push_back</span>(u);</span><br><span class="line">now2.<span class="built_in">push_back</span>(v);</span><br><span class="line">u = p[u];</span><br><span class="line">v = p[v];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">reverse</span>(now2.<span class="built_in">begin</span>(),now2.<span class="built_in">end</span>());</span><br><span class="line">now.<span class="built_in">push_back</span>(u);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> to:now2)</span><br><span class="line">&#123;</span><br><span class="line">now.<span class="built_in">push_back</span>(to);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; now.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> to:now)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; to &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Factory-Balls"><a href="#Factory-Balls" class="headerlink" title="Factory Balls"></a>Factory Balls</h2><p><a href="https://codeforces.com/gym/103855/problem/A">Problem - A - Codeforces</a></p><p>**题目大意: ** 给定一个球，球被划分成为$n$个区域，然后有$k$种颜色的油漆桶，有$m$个装备，球的每个区域在初始状态都是$1$</p><p>接下来可以进行以下三种操作若干次，一种是将这个球放入油漆桶里面，这个球没有被装备安装的部分全部会感染上这个颜色，一种是在这个球上面安装一个装备，一种是给这个球脱下一种装备</p><p>问这个球的区域是否可以达到给定的目标状态，如果可以的话输出最小的步数，否则输出$-1$</p><p>特别的是$1 \leq n,m,k \leq 10$</p><p><strong>解题思路:</strong>  首先考虑数据范围，因为我们的数据范围实际上其实很小，那么我们可以进行状压来表示 <strong>当前的状态</strong> 和 <strong>目标状态</strong> 是否一致，如果一致是$1$否则就是$0$ 。然后我们就这样子$BFS$，我们进行搜索的时候的状态可以以当前的颜色和目标的颜色的差别以及装备的数目和种类，然后我们思考，当前状态更新一步的操作要么是去不变颜色更新装备状态，不变状态更新装备颜色，然后搜索即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">chkmin</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &gt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">chkmax</span><span class="params">(T &amp;a, <span class="type">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a = b, <span class="number">1</span> : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1111</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> n,k,m;</span><br><span class="line"><span class="type">int</span> col[maxn],vis[maxn];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; equ[maxn];</span><br><span class="line"><span class="type">int</span> dis[maxn][maxn];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// ios::sync_with_stdio(false),cin.tie(0),cout.tie(0);</span></span><br><span class="line">cin &gt;&gt; n &gt;&gt; k &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i) cin &gt;&gt; col[i];</span><br><span class="line"><span class="type">int</span> s = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>,num;i &lt; m;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; num;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>,x;j &lt;= num;++j)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line">equ[i].<span class="built_in">push_back</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(col[i] == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">s |= (<span class="number">1</span> &lt;&lt; (i - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">queue&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; que;</span><br><span class="line"><span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> dis);</span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;?1&quot; &lt;&lt; dis[s][0] &lt;&lt; &quot;??\n&quot;;</span></span><br><span class="line">dis[s][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">que.<span class="built_in">push</span>(&#123;s,<span class="number">0</span>&#125;);</span><br><span class="line"><span class="keyword">while</span>(!que.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> [nowcol,nowequ] = que.<span class="built_in">front</span>();</span><br><span class="line">que.<span class="built_in">pop</span>();</span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;-----------------------------\n&quot;;</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;now -&gt; &quot; &lt;&lt; nowcol &lt;&lt; &quot; &quot; &lt;&lt; nowequ &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> toequ = nowequ ^ (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line"><span class="keyword">if</span>(dis[nowcol][toequ] &gt; dis[nowcol][nowequ] + <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">dis[nowcol][toequ] = dis[nowcol][nowequ] + <span class="number">1</span>;</span><br><span class="line">que.<span class="built_in">push</span>(&#123;nowcol,toequ&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i) vis[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(nowequ &gt;&gt; i &amp; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> to:equ[i])</span><br><span class="line">&#123;</span><br><span class="line">vis[to] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= k;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> tocol = nowcol;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[j]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(col[j] == i)</span><br><span class="line">&#123;</span><br><span class="line">tocol |= (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(tocol &gt;&gt; (j - <span class="number">1</span>) &amp; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">tocol ^= (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// cout &lt;&lt; i &lt;&lt; &quot; tocol ?? &quot; &lt;&lt; tocol &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(dis[tocol][nowequ]  &gt; dis[nowcol][nowequ] + <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">dis[tocol][nowequ] = dis[nowcol][nowequ] + <span class="number">1</span>;</span><br><span class="line">que.<span class="built_in">push</span>(&#123;tocol,nowequ&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// cout &lt;&lt; (1 &lt;&lt; (m)) - 1 &lt;&lt; &quot; &quot; &lt;&lt; dis[7][0] &lt;&lt; &quot; ??\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(dis[(<span class="number">1</span> &lt;&lt; (n)) - <span class="number">1</span>][<span class="number">0</span>] &gt;= inf) cout &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; dis[(<span class="number">1</span> &lt;&lt; (n)) - <span class="number">1</span>][<span class="number">0</span>] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flow</title>
      <link href="/2022/09/29/Flow/"/>
      <url>/2022/09/29/Flow/</url>
      
        <content type="html"><![CDATA[<h1 id="网络流"><a href="#网络流" class="headerlink" title="网络流"></a>网络流</h1><h2 id="最大流"><a href="#最大流" class="headerlink" title="最大流"></a>最大流</h2><p>网络流时间复杂度大约为$O(n^2m)$</p><p>不过也比较玄学罢了</p><p>将一张图建完之后直接跑$dinic$即可</p><p>接下来有封装之后的版本</p><p>注意这个封装版本的最大流应该有以下的特征：</p><ul><li><p>首先最大流这个点我们是从$1$开始的，因此我们在设置对应的起点和终点的时候，应该注意设置</p></li><li><p>其次是边的标号，因为是从$0$开始的</p></li><li><p>所以我们每次开始的边其实都是$etot$</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> V = <span class="number">1210</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> E = <span class="number">121000</span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FlowGraph</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> s,t,vtot;</span><br><span class="line"><span class="type">int</span> head[V],etot;</span><br><span class="line"><span class="type">int</span> dis[V],cur[V];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v,nxt;</span><br><span class="line">T f;</span><br><span class="line">&#125;e[E * <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,T f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[etot] = &#123;v,head[u],f&#125;; head[u] = etot++;</span><br><span class="line">e[etot] = &#123;u,head[v],<span class="number">0</span>&#125;; head[v] = etot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= vtot;++i)</span><br><span class="line">&#123;</span><br><span class="line">dis[i] = <span class="number">0</span>;</span><br><span class="line">cur[i] = head[i];</span><br><span class="line">&#125;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">q.<span class="built_in">push</span>(s);dis[s] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> u = q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = head[u];~i;i = e[i].nxt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(e[i].f &amp;&amp; !dis[e[i].v])</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v = e[i].v;</span><br><span class="line">dis[v] = dis[u] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(v == t) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">q.<span class="built_in">push</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">T <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,T m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(u == t) <span class="keyword">return</span> m;</span><br><span class="line">T flow = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = cur[u];~i;cur[u] = i = e[i].nxt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(e[i].f &amp;&amp; dis[e[i].v] == dis[u] + <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">T f = <span class="built_in">dfs</span>(e[i].v,<span class="built_in">min</span>(e[i].f,m));</span><br><span class="line">e[i].f -= f;</span><br><span class="line">e[i ^ <span class="number">1</span>].f += f;</span><br><span class="line">m -= f;</span><br><span class="line">flow += f;</span><br><span class="line"><span class="keyword">if</span>(!m) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!flow) dis[u] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">T <span class="title">dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T flow = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">bfs</span>()) flow += <span class="built_in">dfs</span>(s,numeric_limits&lt;T&gt;::<span class="built_in">max</span>());</span><br><span class="line"><span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> s_,<span class="type">int</span> t_,<span class="type">int</span> vtot_)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">s = s_;</span><br><span class="line">t = t_;</span><br><span class="line">vtot = vtot_;</span><br><span class="line">        etot = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= vtot;++i) head[i] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n,m,s,t;</span><br><span class="line">FlowGraph&lt;ll&gt; g;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; s &gt;&gt; t;</span><br><span class="line">g.<span class="built_in">init</span>(s,t,n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>,u,v,w;i &lt;= m;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">g.<span class="built_in">addedge</span>(u,v,w);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; g.<span class="built_in">dinic</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方案分配"><a href="#方案分配" class="headerlink" title="方案分配"></a>方案分配</h3><p>方案分配实际上我们可以思考他的<strong>流量</strong>和之前的关系，然后我们判断这个<strong>流量</strong>来输出方案</p><p>题目条件可以是类似于这样子的，给定一些试题类型，其中再给定一些试题，我每个试题是属于不同的试题类型的，求是否可以分配，并且输出方案</p><p>那么其实我们对应的解决方案是把相对应的东西放到一个$vector$中，然后去判断对应的边的流量即可</p><h4 id="P2763"><a href="#P2763" class="headerlink" title="P2763"></a>P2763</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> V = <span class="number">1210</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> E = <span class="number">121000</span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FlowGraph</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> s,t,vtot;</span><br><span class="line"><span class="type">int</span> head[V],etot;</span><br><span class="line"><span class="type">int</span> dis[V],cur[V];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v,nxt;</span><br><span class="line">T f;</span><br><span class="line">&#125;e[E * <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,T f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[etot] = &#123;v,head[u],f&#125;; head[u] = etot++;</span><br><span class="line">e[etot] = &#123;u,head[v],<span class="number">0</span>&#125;; head[v] = etot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= vtot;++i)</span><br><span class="line">&#123;</span><br><span class="line">dis[i] = <span class="number">0</span>;</span><br><span class="line">cur[i] = head[i];</span><br><span class="line">&#125;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">q.<span class="built_in">push</span>(s);dis[s] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> u = q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = head[u];~i;i = e[i].nxt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(e[i].f &amp;&amp; !dis[e[i].v])</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v = e[i].v;</span><br><span class="line">dis[v] = dis[u] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(v == t) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">q.<span class="built_in">push</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">T <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,T m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(u == t) <span class="keyword">return</span> m;</span><br><span class="line">T flow = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = cur[u];~i;cur[u] = i = e[i].nxt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(e[i].f &amp;&amp; dis[e[i].v] == dis[u] + <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">T f = <span class="built_in">dfs</span>(e[i].v,<span class="built_in">min</span>(e[i].f,m));</span><br><span class="line">e[i].f -= f;</span><br><span class="line">e[i ^ <span class="number">1</span>].f += f;</span><br><span class="line">m -= f;</span><br><span class="line">flow += f;</span><br><span class="line"><span class="keyword">if</span>(!m) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!flow) dis[u] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">T <span class="title">dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T flow = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">bfs</span>()) flow += <span class="built_in">dfs</span>(s,numeric_limits&lt;T&gt;::<span class="built_in">max</span>());</span><br><span class="line"><span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> s_,<span class="type">int</span> t_,<span class="type">int</span> vtot_)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">s = s_;</span><br><span class="line">t = t_;</span><br><span class="line">vtot = vtot_;</span><br><span class="line">        etot = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= vtot;++i) head[i] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n,k,s,t;</span><br><span class="line">FlowGraph&lt;ll&gt; g;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> st,num,id;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; prob[<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin &gt;&gt; k &gt;&gt; n;</span><br><span class="line">s = n + k + <span class="number">1</span>;</span><br><span class="line">t = n + k + <span class="number">2</span>;</span><br><span class="line">g.<span class="built_in">init</span>(s,t,t + <span class="number">10</span>);</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>,x;i &lt;= k;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//1 -&gt; type</span></span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line">sum += x;</span><br><span class="line">g.<span class="built_in">addedge</span>(s,i,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;sum -&gt; &quot; &lt;&lt; sum &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line">vector&lt;node&gt; used;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//type + 1 -&gt; type + n</span></span><br><span class="line"><span class="type">int</span> num;</span><br><span class="line">cin &gt;&gt; num;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>,bel;j &lt;= num;++j)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; bel;</span><br><span class="line">used.<span class="built_in">push_back</span>(&#123;bel,i,g.etot&#125;);</span><br><span class="line">g.<span class="built_in">addedge</span>(bel,k + i,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line">g.<span class="built_in">addedge</span>(k + i,t,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;??\n&quot;;</span></span><br><span class="line">ll namomo = g.<span class="built_in">dinic</span>();</span><br><span class="line"><span class="keyword">if</span>(namomo != sum)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> now:used)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> idd = now.id;</span><br><span class="line"><span class="keyword">if</span>(g.e[idd].f == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">prob[now.st].<span class="built_in">push_back</span>(now.num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= k;++i)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot;:&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> to:prob[i])</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; to;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">属于是最大流的方案分配问题，首先显而易见我们可以通过这一条边的流量去判断这个边是否被用过</span></span><br><span class="line"><span class="comment">来判断是否属于这一个方案当中</span></span><br><span class="line"><span class="comment">那么我们可以这样子，因为我们是把试题库和相对应的试题连接在一起</span></span><br><span class="line"><span class="comment">ok，那么这样子我们在建边的时候我们可以把相对应的边的号给放到一个vector里面</span></span><br><span class="line"><span class="comment">然后后续我们去检查这个边的流量是否为1即可</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="路径模型"><a href="#路径模型" class="headerlink" title="路径模型"></a>路径模型</h3><p>比如说一个序列，如果可以从$a_i$ 到$a_j$有一条路径，实际上我们也可以映射到一张图上面去考虑，因为我们在做最大流的过程中实际上就是在走一些流的路径</p><p>然后对于一些<strong>流量限制</strong>的情况下我们可以采用<strong>拆点</strong>的方法去限制流量</p><h4 id="P2776"><a href="#P2776" class="headerlink" title="P2776"></a>P2776</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> V = <span class="number">101210</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> E = <span class="number">1210000</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">5e2</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FlowGraph</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> s,t,vtot;</span><br><span class="line"><span class="type">int</span> head[V],etot;</span><br><span class="line"><span class="type">int</span> dis[V],cur[V];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v,nxt;</span><br><span class="line">T f;</span><br><span class="line">&#125;e[E * <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,T f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[etot] = &#123;v,head[u],f&#125;; head[u] = etot++;</span><br><span class="line">e[etot] = &#123;u,head[v],<span class="number">0</span>&#125;; head[v] = etot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= vtot;++i)</span><br><span class="line">&#123;</span><br><span class="line">dis[i] = <span class="number">0</span>;</span><br><span class="line">cur[i] = head[i];</span><br><span class="line">&#125;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">q.<span class="built_in">push</span>(s);dis[s] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> u = q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = head[u];~i;i = e[i].nxt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(e[i].f &amp;&amp; !dis[e[i].v])</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v = e[i].v;</span><br><span class="line">dis[v] = dis[u] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(v == t) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">q.<span class="built_in">push</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">T <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,T m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(u == t) <span class="keyword">return</span> m;</span><br><span class="line">T flow = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = cur[u];~i;cur[u] = i = e[i].nxt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(e[i].f &amp;&amp; dis[e[i].v] == dis[u] + <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">T f = <span class="built_in">dfs</span>(e[i].v,<span class="built_in">min</span>(e[i].f,m));</span><br><span class="line">e[i].f -= f;</span><br><span class="line">e[i ^ <span class="number">1</span>].f += f;</span><br><span class="line">m -= f;</span><br><span class="line">flow += f;</span><br><span class="line"><span class="keyword">if</span>(!m) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!flow) dis[u] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">T <span class="title">dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T flow = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">bfs</span>()) flow += <span class="built_in">dfs</span>(s,numeric_limits&lt;T&gt;::<span class="built_in">max</span>());</span><br><span class="line"><span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> s_,<span class="type">int</span> t_,<span class="type">int</span> vtot_)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">s = s_;</span><br><span class="line">t = t_;</span><br><span class="line">vtot = vtot_;</span><br><span class="line">etot = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= vtot;++i) head[i] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n,m,s,t;</span><br><span class="line"><span class="type">int</span> a[maxn],dp[maxn];</span><br><span class="line">FlowGraph&lt;ll&gt; g;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">dp[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt; i;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] &gt;= a[j])</span><br><span class="line">&#123;</span><br><span class="line">dp[i] = <span class="built_in">max</span>(dp[i],dp[j] + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans = <span class="built_in">max</span>(ans,dp[i]);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">s = <span class="number">2</span> * n + <span class="number">1</span>;</span><br><span class="line">t = <span class="number">2</span> * n + <span class="number">2</span>;</span><br><span class="line">g.<span class="built_in">init</span>(s,t,t);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[i] == <span class="number">1</span>) g.<span class="built_in">addedge</span>(s,i,n);<span class="comment">//添加流量为inf的边</span></span><br><span class="line"><span class="keyword">if</span>(dp[i] == ans) g.<span class="built_in">addedge</span>(i + n,t,n);</span><br><span class="line">g.<span class="built_in">addedge</span>(i,i + n,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>;j &lt;= n;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j] &gt;= a[i] &amp;&amp; dp[j] == dp[i] + <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">g.<span class="built_in">addedge</span>(i + n,j,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; g.<span class="built_in">dinic</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">g.<span class="built_in">init</span>(s,t,t);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[i] == <span class="number">1</span>) g.<span class="built_in">addedge</span>(s,i,n);<span class="comment">//添加流量为inf的边</span></span><br><span class="line"><span class="keyword">if</span>(dp[i] == ans) g.<span class="built_in">addedge</span>(i + n,t,n);</span><br><span class="line"><span class="keyword">if</span>(ans == <span class="number">1</span>) g.<span class="built_in">addedge</span>(i,i + n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> g.<span class="built_in">addedge</span>(i,i + n,n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>;j &lt;= n;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j] &gt;= a[i] &amp;&amp; dp[j] == dp[i] + <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">g.<span class="built_in">addedge</span>(i + n,j,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; g.<span class="built_in">dinic</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">题目大意：给定一个序列，需要解决如下的三个问题</span></span><br><span class="line"><span class="comment">1.求这个序列的最长非递减子序列</span></span><br><span class="line"><span class="comment">2.每个元素只能使用一次的情况下序列的最长非递减子序列</span></span><br><span class="line"><span class="comment">3.每个元素使用多次的情况下序列的最长非递减子序列</span></span><br><span class="line"><span class="comment">建图思路:首先对于第一个问题来说我们直接dp即可</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">对于第二个问题，我们需要思考以下我们的建图方向</span></span><br><span class="line"><span class="comment">因为只需要求方案数目，那么我们可以进行这样子的建图，我们可以从s-&gt;dp = 1的值建一条边</span></span><br><span class="line"><span class="comment">我们也可以从dp = ans -&gt; t建一条边</span></span><br><span class="line"><span class="comment">因为在第一种情况我们只考虑每一个点使用一个那么我们可以使用拆点</span></span><br><span class="line"><span class="comment">拆点是为了加一个限制只能流一个1</span></span><br><span class="line"><span class="comment">然后因为我们要找第j个数字可能从哪个第i个数字转移过来 那么我们继续找重新建边即可</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">对于第三个问题 实际上我一个点可以使用多次了</span></span><br><span class="line"><span class="comment">那么我们先特判考虑最后答案是1的情况 其实实际上下面两个问题的答案就是n</span></span><br><span class="line"><span class="comment">然后我们再考虑一个可以使用多次 那么我们拆店的时候对于多个点建n就可以了</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="最小割"><a href="#最小割" class="headerlink" title="最小割"></a>最小割</h2><p><strong>概念:</strong> 给定一张图，删除一些边使得$s$和$t$不连通</p><p>那么其实就是对于每一个点，我去将点划分为两个集合，每一个点要么属于$s$集合，要么属于$t$集合</p><p>那么对于这里割边来说，实际上就是找一条边，对于他的两个端点$u$和$v$，两个点分别属于一个集合</p><p>最小割 $\geq$ 最大流</p><p>接下来我们分析一下建边的过程</p><p>对于无向图建立割边，实际上我们不仅要考虑正向边，我们也要考虑反向边，那么对于无向图的建图方式实际上就是建两条相同边权的边</p><p>具体的建边方式如下图所示可以</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,T f,T f2 = <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[etot] = &#123;v,head[u],f&#125;; head[u] = etot++;</span><br><span class="line">e[etot] = &#123;u,head[v],f2&#125;; head[v] = etot++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么有向图的话实际上还是和之前的类似，我去建一条长度为$c$的边，另外一条是长度为$0$的边</p><p>如何在实际题目中去思考到 <strong>最小割</strong> 这个东西呢？</p><h3 id="最大权独立集"><a href="#最大权独立集" class="headerlink" title="最大权独立集"></a>最大权独立集</h3><p>首先我们可以考虑引入这样子的一个问题</p><p>假设我们有两个集合(假设为一个黑子集合和一个白子集合)，每个集合都有$n$个点，每个点都有一个点权，如果我们取了一些黑子那么我们就不能取白子，要求我们最后取得的权值<strong>最大</strong> ，对于这一个问题我们如何解答呢？</p><p>我们可以考虑这样子的一个解题方向，我们最后的集合一定是分为两个集合，一个集合是取到的棋子，另外一个集合是没有取到的集合。</p><p>那么分为两个集合的操作是不是就是一个求最小割的过程呢？我们只需要把两个集合分别和$S$和$T$集合连边就可以，然后接下来相对应连边的权值就是他们的点权，然后点之间的限制因为无法切割我们可以采用$inf$</p><p>那么其实对应的如果是二维棋盘我们也可以通过这样子的操作</p><h4 id="P2774"><a href="#P2774" class="headerlink" title="P2774"></a>P2774</h4><p>方格取数，每个方格有一定权值，可以取若干个方格，方格之间不能有相互重叠的边</p><p>本质上也就是求一个最大权独立集的问题，行列相对应建边即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> ll inf = (<span class="number">1ll</span> &lt;&lt; <span class="number">60</span>);</span><br><span class="line"><span class="type">int</span> n,m,s,t,x;</span><br><span class="line">FlowGraph&lt;ll&gt; g;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">s = n * m + <span class="number">1</span>;</span><br><span class="line">t = n * m + <span class="number">2</span>;</span><br><span class="line">g.<span class="built_in">init</span>(s,t,t);</span><br><span class="line">ll ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= m;++j)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line">ans += x;</span><br><span class="line"><span class="type">int</span> id = (i - <span class="number">1</span>) * m + j;</span><br><span class="line"><span class="keyword">if</span>((i + j) % <span class="number">2</span> == <span class="number">1</span>) </span><br><span class="line">&#123;</span><br><span class="line">g.<span class="built_in">addedge</span>(s,id,x);</span><br><span class="line"><span class="keyword">if</span>(i - <span class="number">1</span> &gt;= <span class="number">1</span>) g.<span class="built_in">addedge</span>(id,id - m,inf);</span><br><span class="line"><span class="keyword">if</span>(i + <span class="number">1</span> &lt;= n) g.<span class="built_in">addedge</span>(id,id + m,inf);</span><br><span class="line"><span class="keyword">if</span>(j + <span class="number">1</span> &lt;= m) g.<span class="built_in">addedge</span>(id,id + <span class="number">1</span>,inf);</span><br><span class="line"><span class="keyword">if</span>(j - <span class="number">1</span> &gt;= <span class="number">1</span>) g.<span class="built_in">addedge</span>(id,id - <span class="number">1</span>,inf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> g.<span class="built_in">addedge</span>(id,t,x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans - g.<span class="built_in">dinic</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="最大权闭合子图"><a href="#最大权闭合子图" class="headerlink" title="最大权闭合子图"></a>最大权闭合子图</h3><p>最大权闭合子图的定义实际上就是我每个点有一定的点权，选定一些点需要使得点权和最大，然后如果我选了一个点我是必须需要选定其他后继点的，然后我们来求这张图最多获得多少的点权</p><p>其实这个也是最小割的一种模型，那么实际上和最大权独立集的本质是一样的，我给$s$和$t$集合一定的意义，然后我去进行相应的连边。</p><p>考虑这样的一件事情，因为我们在求最小割的过程中实际上是求在$S$集合中的最小割，那么实际上也就是我们把一些东西放到了$S$集合上面。</p><p>那么之前我们说了边的方案如何选择，那么如何去进行选择点的方案呢？</p><p>那么我们可以去看$dis$数组里面的东西，因为$dis$刚开始都是$0$的，对于放在$S$集合里面的东西我们都应该选择$dis$不为$0$的点即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n,m,s,t;</span><br><span class="line">FlowGraph&lt;ll&gt; g;</span><br><span class="line">string str;</span><br><span class="line"><span class="type">const</span> ll inf = (<span class="number">1ll</span> &lt;&lt; <span class="number">60</span>);</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin &gt;&gt; m &gt;&gt; n;</span><br><span class="line">s = m + n + <span class="number">1</span>;</span><br><span class="line">t = m + n + <span class="number">2</span>;</span><br><span class="line">g.<span class="built_in">init</span>(s,t,t);</span><br><span class="line">ll ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">getline</span>(cin,str);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">getline</span>(cin,str);</span><br><span class="line">stringstream ss;</span><br><span class="line">ss &lt;&lt; str;</span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;str -&gt; &quot; &lt;&lt; str &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line">ss &gt;&gt; x;</span><br><span class="line">g.<span class="built_in">addedge</span>(s,i,x);<span class="comment">//第i个实验的费用</span></span><br><span class="line">ans += x;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(!ss.<span class="built_in">eof</span>())</span><br><span class="line">&#123;</span><br><span class="line">ss &gt;&gt; x;</span><br><span class="line">g.<span class="built_in">addedge</span>(i,x + m,inf);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x;cin &gt;&gt; x;</span><br><span class="line">g.<span class="built_in">addedge</span>(i + m,t,x);</span><br><span class="line">&#125;</span><br><span class="line">ans -= g.<span class="built_in">dinic</span>();</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; p1,p2;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= m;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(g.dis[i] &gt; <span class="number">0</span>) p1.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(g.dis[i + m] &gt; <span class="number">0</span>) p2.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> to:p1) cout &lt;&lt; to &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> to:p2) cout &lt;&lt; to &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最小费用最大流"><a href="#最小费用最大流" class="headerlink" title="最小费用最大流"></a>最小费用最大流</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> V = <span class="number">20100</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> E = <span class="number">201000</span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MinCostGraph</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> s,t,vtot;</span><br><span class="line"><span class="type">int</span> head[V],cur[V],etot;</span><br><span class="line">T dis[V],flow,cost;</span><br><span class="line"><span class="type">int</span> pre[V];</span><br><span class="line"><span class="type">bool</span> vis[V];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v,nxt;</span><br><span class="line">T f,c;</span><br><span class="line">&#125;e[E * <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v, T f, T c, T f2 = <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[etot] = &#123;v, head[u], f, c&#125;; head[u] = etot++;</span><br><span class="line">e[etot] = &#123;u, head[v], f2, -c&#125;; head[v] = etot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T inf = numeric_limits&lt;T&gt;::<span class="built_in">max</span>() / <span class="number">2</span>;<span class="comment">//防止溢出</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= vtot; ++i)</span><br><span class="line">&#123;</span><br><span class="line">dis[i] = inf;</span><br><span class="line">vis[i] = <span class="literal">false</span>;</span><br><span class="line">pre[i] = <span class="number">-1</span>; <span class="comment">//记录一下上一条边,方便增广</span></span><br><span class="line">&#125;</span><br><span class="line">dis[s] = <span class="number">0</span>;</span><br><span class="line">vis[s] = <span class="literal">true</span>;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">q.<span class="built_in">push</span>(s);</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> u = q.<span class="built_in">front</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = head[u]; ~i; i = e[i].nxt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v = e[i].v;</span><br><span class="line"><span class="keyword">if</span>(e[i].f &amp;&amp; dis[v] &gt; dis[u] + e[i].c)</span><br><span class="line">&#123;</span><br><span class="line">dis[v] = dis[u] + e[i].c;</span><br><span class="line">pre[v] = i;</span><br><span class="line"><span class="keyword">if</span>(!vis[v])</span><br><span class="line">&#123;</span><br><span class="line">vis[v] = <span class="number">1</span>;</span><br><span class="line">q.<span class="built_in">push</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">vis[u] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dis[t] != inf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//增广</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">augment</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> u = t;</span><br><span class="line">T f = numeric_limits&lt;T&gt;::<span class="built_in">max</span>();</span><br><span class="line"><span class="keyword">while</span>(~pre[u])</span><br><span class="line">&#123;</span><br><span class="line">f = <span class="built_in">min</span>(f, e[pre[u]].f);</span><br><span class="line">u = e[pre[u] ^ <span class="number">1</span>].v;</span><br><span class="line">&#125;</span><br><span class="line">flow += f;</span><br><span class="line">cost += f * dis[t];</span><br><span class="line">u = t;</span><br><span class="line"><span class="keyword">while</span>(~pre[u])</span><br><span class="line">&#123;</span><br><span class="line">e[pre[u]].f -= f;</span><br><span class="line">e[pre[u] ^ <span class="number">1</span>].f += f;</span><br><span class="line">u = e[pre[u] ^ <span class="number">1</span>].v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">pair&lt;T, T&gt; <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">flow = <span class="number">0</span>;</span><br><span class="line">cost = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">spfa</span>()) <span class="built_in">augment</span>();</span><br><span class="line"><span class="keyword">return</span> &#123;flow, cost&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> s_, <span class="type">int</span> t_, <span class="type">int</span> vtot_)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">s = s_;</span><br><span class="line">t = t_;</span><br><span class="line">vtot = vtot_;</span><br><span class="line">etot = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= vtot; ++i) head[i] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">MinCostGraph&lt;<span class="type">int</span>&gt; g;</span><br><span class="line"><span class="type">int</span> n,m,s,t;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; s &gt;&gt; t;</span><br><span class="line">g.<span class="built_in">init</span>(s,t,n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>,u,v,f,c;i &lt;= m;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v &gt;&gt; f &gt;&gt; c;</span><br><span class="line">g.<span class="built_in">addedge</span>(u,v,f,c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">auto</span> ans = g.<span class="built_in">solve</span>();</span><br><span class="line">cout &lt;&lt; ans.first &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; ans.second &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最大费用最大流"><a href="#最大费用最大流" class="headerlink" title="最大费用最大流"></a>最大费用最大流</h3><p>因为我们考虑这样子的一件事情，我们在求$MCMF$的时候实际上求的是最小的费用那么我们只需要建负边并且最终答案取反就可以了</p><h4 id="P4015"><a href="#P4015" class="headerlink" title="P4015"></a>P4015</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">MinCostGraph&lt;ll&gt; g1,g2;</span><br><span class="line"><span class="type">int</span> n,m,s,t;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">s = n + m + <span class="number">1</span>;</span><br><span class="line">t = n + m + <span class="number">2</span>;</span><br><span class="line">g1.<span class="built_in">init</span>(s,t,t);</span><br><span class="line">g2.<span class="built_in">init</span>(s,t,t);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>,x;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line">g1.<span class="built_in">addedge</span>(s,i,x,<span class="number">0</span>);</span><br><span class="line">g2.<span class="built_in">addedge</span>(s,i,x,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>,x;i &lt;= m;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line">g1.<span class="built_in">addedge</span>(i + n,t,x,<span class="number">0</span>);</span><br><span class="line">g2.<span class="built_in">addedge</span>(i + n,t,x,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= m;++j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line">g1.<span class="built_in">addedge</span>(i,j + n,<span class="number">1</span> &lt;&lt; <span class="number">30</span>,x);</span><br><span class="line">g2.<span class="built_in">addedge</span>(i,j + n,<span class="number">1</span> &lt;&lt; <span class="number">30</span>,-x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">auto</span> ans1 = g1.<span class="built_in">solve</span>();</span><br><span class="line"><span class="keyword">auto</span> ans2 = g2.<span class="built_in">solve</span>();</span><br><span class="line">cout &lt;&lt; ans1.second &lt;&lt; <span class="string">&quot;\n&quot;</span> &lt;&lt; -ans2.second &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优化建图"><a href="#优化建图" class="headerlink" title="优化建图"></a>优化建图</h3><p><a href="https://codeforces.com/problemset/problem/1525/D">Problem - 1525D - Codeforces</a></p><p><strong>题意:</strong> 给定$n$个座位，每个座位刚开始有两个数字$1$和$0$，题目保证初始给定的$1$的数量少于$0$的数量，将一个$1$移动位置需要$abs(i - j)$的贡献，问让刚开始的$1$全部变成$0$最少需要多少贡献</p><p><strong>解题思路:</strong> 其实刚开始看到题目就想着是裸的费用流，将两种点分在两边，中间连接相对应的边权即可，但是后面发现这样子写的话会有问题。但是考虑反正$1$只会往相邻的$0$移动，那么就相邻的两边建边即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> V = <span class="number">20100</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> E = <span class="number">521000</span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MinCostGraph</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> s,t,vtot;</span><br><span class="line"><span class="type">int</span> head[V],cur[V],etot;</span><br><span class="line">T dis[V],flow,cost;</span><br><span class="line"><span class="type">int</span> pre[V];</span><br><span class="line"><span class="type">bool</span> vis[V];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v,nxt;</span><br><span class="line">T f,c;</span><br><span class="line">&#125;e[E * <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v, T f, T c, T f2 = <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[etot] = &#123;v, head[u], f, c&#125;; head[u] = etot++;</span><br><span class="line">e[etot] = &#123;u, head[v], f2, -c&#125;; head[v] = etot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T inf = numeric_limits&lt;T&gt;::<span class="built_in">max</span>() / <span class="number">2</span>;<span class="comment">//防止溢出</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= vtot; ++i)</span><br><span class="line">&#123;</span><br><span class="line">dis[i] = inf;</span><br><span class="line">vis[i] = <span class="literal">false</span>;</span><br><span class="line">pre[i] = <span class="number">-1</span>; <span class="comment">//记录一下上一条边,方便增广</span></span><br><span class="line">&#125;</span><br><span class="line">dis[s] = <span class="number">0</span>;</span><br><span class="line">vis[s] = <span class="literal">true</span>;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">q.<span class="built_in">push</span>(s);</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> u = q.<span class="built_in">front</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = head[u]; ~i; i = e[i].nxt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v = e[i].v;</span><br><span class="line"><span class="keyword">if</span>(e[i].f &amp;&amp; dis[v] &gt; dis[u] + e[i].c)</span><br><span class="line">&#123;</span><br><span class="line">dis[v] = dis[u] + e[i].c;</span><br><span class="line">pre[v] = i;</span><br><span class="line"><span class="keyword">if</span>(!vis[v])</span><br><span class="line">&#123;</span><br><span class="line">vis[v] = <span class="number">1</span>;</span><br><span class="line">q.<span class="built_in">push</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">vis[u] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dis[t] != inf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//增广</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">augment</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> u = t;</span><br><span class="line">T f = numeric_limits&lt;T&gt;::<span class="built_in">max</span>();</span><br><span class="line"><span class="keyword">while</span>(~pre[u])</span><br><span class="line">&#123;</span><br><span class="line">f = <span class="built_in">min</span>(f, e[pre[u]].f);</span><br><span class="line">u = e[pre[u] ^ <span class="number">1</span>].v;</span><br><span class="line">&#125;</span><br><span class="line">flow += f;</span><br><span class="line">cost += f * dis[t];</span><br><span class="line">u = t;</span><br><span class="line"><span class="keyword">while</span>(~pre[u])</span><br><span class="line">&#123;</span><br><span class="line">e[pre[u]].f -= f;</span><br><span class="line">e[pre[u] ^ <span class="number">1</span>].f += f;</span><br><span class="line">u = e[pre[u] ^ <span class="number">1</span>].v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">pair&lt;T, T&gt; <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">flow = <span class="number">0</span>;</span><br><span class="line">cost = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">spfa</span>()) <span class="built_in">augment</span>();</span><br><span class="line"><span class="keyword">return</span> &#123;flow, cost&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> s_, <span class="type">int</span> t_, <span class="type">int</span> vtot_)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">s = s_;</span><br><span class="line">t = t_;</span><br><span class="line">vtot = vtot_;</span><br><span class="line">etot = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= vtot; ++i) head[i] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">MinCostGraph&lt;<span class="type">int</span>&gt; g;</span><br><span class="line"><span class="type">int</span> n,m,s,t;</span><br><span class="line"><span class="type">int</span> a[V];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">s = n + <span class="number">1</span>,t = n + <span class="number">2</span>;</span><br><span class="line">g.<span class="built_in">init</span>(s,t,t);</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; pos0,pos1;</span><br><span class="line"><span class="type">int</span> ct = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">if</span>(a[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// ct++;</span></span><br><span class="line">g.<span class="built_in">addedge</span>(s,i,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">g.<span class="built_in">addedge</span>(i,t,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n - <span class="number">1</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line">g.<span class="built_in">addedge</span>(i,i + <span class="number">1</span>,<span class="number">1</span> &lt;&lt; <span class="number">30</span>,<span class="number">1</span>);</span><br><span class="line">g.<span class="built_in">addedge</span>(i + <span class="number">1</span>,i,<span class="number">1</span> &lt;&lt; <span class="number">30</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">auto</span> [f,c] = g.<span class="built_in">solve</span>();</span><br><span class="line">cout &lt;&lt; c &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 网络流 </tag>
            
            <tag> 建图 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
